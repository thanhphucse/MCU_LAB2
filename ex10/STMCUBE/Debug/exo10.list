
exo10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003044  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003150  08003150  00013150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003170  08003170  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08003170  08003170  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003170  08003170  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003170  08003170  00013170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003174  08003174  00013174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08003178  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000034  080031ac  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  080031ac  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008bee  00000000  00000000  0002005d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000194c  00000000  00000000  00028c4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  0002a598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000918  00000000  00000000  0002afc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001675f  00000000  00000000  0002b8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a7a9  00000000  00000000  00042037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008220b  00000000  00000000  0004c7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ce9eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027fc  00000000  00000000  000cea40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000034 	.word	0x20000034
 8000128:	00000000 	.word	0x00000000
 800012c:	08003138 	.word	0x08003138

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000038 	.word	0x20000038
 8000148:	08003138 	.word	0x08003138

0800014c <clock>:
 *      Author: Welcome
 */
#include "clock.h"
#include "global.h"

void clock(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	second++;
 8000150:	4b13      	ldr	r3, [pc, #76]	; (80001a0 <clock+0x54>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	3301      	adds	r3, #1
 8000156:	4a12      	ldr	r2, [pc, #72]	; (80001a0 <clock+0x54>)
 8000158:	6013      	str	r3, [r2, #0]
	if(second == 60)
 800015a:	4b11      	ldr	r3, [pc, #68]	; (80001a0 <clock+0x54>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	2b3c      	cmp	r3, #60	; 0x3c
 8000160:	d107      	bne.n	8000172 <clock+0x26>
	{
		minute++;
 8000162:	4b10      	ldr	r3, [pc, #64]	; (80001a4 <clock+0x58>)
 8000164:	681b      	ldr	r3, [r3, #0]
 8000166:	3301      	adds	r3, #1
 8000168:	4a0e      	ldr	r2, [pc, #56]	; (80001a4 <clock+0x58>)
 800016a:	6013      	str	r3, [r2, #0]
		second = 0;
 800016c:	4b0c      	ldr	r3, [pc, #48]	; (80001a0 <clock+0x54>)
 800016e:	2200      	movs	r2, #0
 8000170:	601a      	str	r2, [r3, #0]
	}

	if(minute == 60)
 8000172:	4b0c      	ldr	r3, [pc, #48]	; (80001a4 <clock+0x58>)
 8000174:	681b      	ldr	r3, [r3, #0]
 8000176:	2b3c      	cmp	r3, #60	; 0x3c
 8000178:	d107      	bne.n	800018a <clock+0x3e>
	{
		hour++;
 800017a:	4b0b      	ldr	r3, [pc, #44]	; (80001a8 <clock+0x5c>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	3301      	adds	r3, #1
 8000180:	4a09      	ldr	r2, [pc, #36]	; (80001a8 <clock+0x5c>)
 8000182:	6013      	str	r3, [r2, #0]
		minute = 0;
 8000184:	4b07      	ldr	r3, [pc, #28]	; (80001a4 <clock+0x58>)
 8000186:	2200      	movs	r2, #0
 8000188:	601a      	str	r2, [r3, #0]
	}

	if(hour == 24) hour = 0;
 800018a:	4b07      	ldr	r3, [pc, #28]	; (80001a8 <clock+0x5c>)
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	2b18      	cmp	r3, #24
 8000190:	d102      	bne.n	8000198 <clock+0x4c>
 8000192:	4b05      	ldr	r3, [pc, #20]	; (80001a8 <clock+0x5c>)
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	20000020 	.word	0x20000020
 80001a4:	2000001c 	.word	0x2000001c
 80001a8:	20000018 	.word	0x20000018

080001ac <updateClockBuffer>:
#include "global.h"

int index_led = 0;
int led_buffer [4] = {3, 4, 5, 7};

void updateClockBuffer(){
 80001ac:	b480      	push	{r7}
 80001ae:	af00      	add	r7, sp, #0
	if(hour < 10)
 80001b0:	4b29      	ldr	r3, [pc, #164]	; (8000258 <updateClockBuffer+0xac>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	2b09      	cmp	r3, #9
 80001b6:	dc06      	bgt.n	80001c6 <updateClockBuffer+0x1a>
	{
		led_buffer[0] = 0;
 80001b8:	4b28      	ldr	r3, [pc, #160]	; (800025c <updateClockBuffer+0xb0>)
 80001ba:	2200      	movs	r2, #0
 80001bc:	601a      	str	r2, [r3, #0]
		led_buffer[1] = hour;
 80001be:	4b26      	ldr	r3, [pc, #152]	; (8000258 <updateClockBuffer+0xac>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	4a26      	ldr	r2, [pc, #152]	; (800025c <updateClockBuffer+0xb0>)
 80001c4:	6053      	str	r3, [r2, #4]
	}
	if(hour >= 10)
 80001c6:	4b24      	ldr	r3, [pc, #144]	; (8000258 <updateClockBuffer+0xac>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	2b09      	cmp	r3, #9
 80001cc:	dd18      	ble.n	8000200 <updateClockBuffer+0x54>
	{
		led_buffer[0] = hour/10;
 80001ce:	4b22      	ldr	r3, [pc, #136]	; (8000258 <updateClockBuffer+0xac>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a23      	ldr	r2, [pc, #140]	; (8000260 <updateClockBuffer+0xb4>)
 80001d4:	fb82 1203 	smull	r1, r2, r2, r3
 80001d8:	1092      	asrs	r2, r2, #2
 80001da:	17db      	asrs	r3, r3, #31
 80001dc:	1ad3      	subs	r3, r2, r3
 80001de:	4a1f      	ldr	r2, [pc, #124]	; (800025c <updateClockBuffer+0xb0>)
 80001e0:	6013      	str	r3, [r2, #0]
		led_buffer[1] = hour%10;
 80001e2:	4b1d      	ldr	r3, [pc, #116]	; (8000258 <updateClockBuffer+0xac>)
 80001e4:	6819      	ldr	r1, [r3, #0]
 80001e6:	4b1e      	ldr	r3, [pc, #120]	; (8000260 <updateClockBuffer+0xb4>)
 80001e8:	fb83 2301 	smull	r2, r3, r3, r1
 80001ec:	109a      	asrs	r2, r3, #2
 80001ee:	17cb      	asrs	r3, r1, #31
 80001f0:	1ad2      	subs	r2, r2, r3
 80001f2:	4613      	mov	r3, r2
 80001f4:	009b      	lsls	r3, r3, #2
 80001f6:	4413      	add	r3, r2
 80001f8:	005b      	lsls	r3, r3, #1
 80001fa:	1aca      	subs	r2, r1, r3
 80001fc:	4b17      	ldr	r3, [pc, #92]	; (800025c <updateClockBuffer+0xb0>)
 80001fe:	605a      	str	r2, [r3, #4]
	}

	if(minute < 10)
 8000200:	4b18      	ldr	r3, [pc, #96]	; (8000264 <updateClockBuffer+0xb8>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	2b09      	cmp	r3, #9
 8000206:	dc06      	bgt.n	8000216 <updateClockBuffer+0x6a>
	{
		led_buffer[2] = 0;
 8000208:	4b14      	ldr	r3, [pc, #80]	; (800025c <updateClockBuffer+0xb0>)
 800020a:	2200      	movs	r2, #0
 800020c:	609a      	str	r2, [r3, #8]
		led_buffer[3] = minute;
 800020e:	4b15      	ldr	r3, [pc, #84]	; (8000264 <updateClockBuffer+0xb8>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a12      	ldr	r2, [pc, #72]	; (800025c <updateClockBuffer+0xb0>)
 8000214:	60d3      	str	r3, [r2, #12]
	}
	if(minute >= 10)
 8000216:	4b13      	ldr	r3, [pc, #76]	; (8000264 <updateClockBuffer+0xb8>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	2b09      	cmp	r3, #9
 800021c:	dd18      	ble.n	8000250 <updateClockBuffer+0xa4>
	{
		led_buffer[2] = minute/10;
 800021e:	4b11      	ldr	r3, [pc, #68]	; (8000264 <updateClockBuffer+0xb8>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	4a0f      	ldr	r2, [pc, #60]	; (8000260 <updateClockBuffer+0xb4>)
 8000224:	fb82 1203 	smull	r1, r2, r2, r3
 8000228:	1092      	asrs	r2, r2, #2
 800022a:	17db      	asrs	r3, r3, #31
 800022c:	1ad3      	subs	r3, r2, r3
 800022e:	4a0b      	ldr	r2, [pc, #44]	; (800025c <updateClockBuffer+0xb0>)
 8000230:	6093      	str	r3, [r2, #8]
		led_buffer[3] = minute%10;
 8000232:	4b0c      	ldr	r3, [pc, #48]	; (8000264 <updateClockBuffer+0xb8>)
 8000234:	6819      	ldr	r1, [r3, #0]
 8000236:	4b0a      	ldr	r3, [pc, #40]	; (8000260 <updateClockBuffer+0xb4>)
 8000238:	fb83 2301 	smull	r2, r3, r3, r1
 800023c:	109a      	asrs	r2, r3, #2
 800023e:	17cb      	asrs	r3, r1, #31
 8000240:	1ad2      	subs	r2, r2, r3
 8000242:	4613      	mov	r3, r2
 8000244:	009b      	lsls	r3, r3, #2
 8000246:	4413      	add	r3, r2
 8000248:	005b      	lsls	r3, r3, #1
 800024a:	1aca      	subs	r2, r1, r3
 800024c:	4b03      	ldr	r3, [pc, #12]	; (800025c <updateClockBuffer+0xb0>)
 800024e:	60da      	str	r2, [r3, #12]
	}
}
 8000250:	bf00      	nop
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr
 8000258:	20000018 	.word	0x20000018
 800025c:	20000000 	.word	0x20000000
 8000260:	66666667 	.word	0x66666667
 8000264:	2000001c 	.word	0x2000001c

08000268 <display7SEG>:
 */
#include <control_led_7SEG.h>
#include "main.h"


void display7SEG(int num){
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
	if(num == 0)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d122      	bne.n	80002bc <display7SEG+0x54>
	{
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000276:	2200      	movs	r2, #0
 8000278:	2101      	movs	r1, #1
 800027a:	48bd      	ldr	r0, [pc, #756]	; (8000570 <display7SEG+0x308>)
 800027c:	f001 ff32 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000280:	2200      	movs	r2, #0
 8000282:	2102      	movs	r1, #2
 8000284:	48ba      	ldr	r0, [pc, #744]	; (8000570 <display7SEG+0x308>)
 8000286:	f001 ff2d 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 800028a:	2200      	movs	r2, #0
 800028c:	2104      	movs	r1, #4
 800028e:	48b8      	ldr	r0, [pc, #736]	; (8000570 <display7SEG+0x308>)
 8000290:	f001 ff28 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000294:	2200      	movs	r2, #0
 8000296:	2108      	movs	r1, #8
 8000298:	48b5      	ldr	r0, [pc, #724]	; (8000570 <display7SEG+0x308>)
 800029a:	f001 ff23 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 800029e:	2200      	movs	r2, #0
 80002a0:	2110      	movs	r1, #16
 80002a2:	48b3      	ldr	r0, [pc, #716]	; (8000570 <display7SEG+0x308>)
 80002a4:	f001 ff1e 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 80002a8:	2200      	movs	r2, #0
 80002aa:	2120      	movs	r1, #32
 80002ac:	48b0      	ldr	r0, [pc, #704]	; (8000570 <display7SEG+0x308>)
 80002ae:	f001 ff19 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 80002b2:	2201      	movs	r2, #1
 80002b4:	2140      	movs	r1, #64	; 0x40
 80002b6:	48ae      	ldr	r0, [pc, #696]	; (8000570 <display7SEG+0x308>)
 80002b8:	f001 ff14 	bl	80020e4 <HAL_GPIO_WritePin>
	}
	if(num == 1)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2b01      	cmp	r3, #1
 80002c0:	d122      	bne.n	8000308 <display7SEG+0xa0>
	{
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_SET);
 80002c2:	2201      	movs	r2, #1
 80002c4:	2101      	movs	r1, #1
 80002c6:	48aa      	ldr	r0, [pc, #680]	; (8000570 <display7SEG+0x308>)
 80002c8:	f001 ff0c 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80002cc:	2200      	movs	r2, #0
 80002ce:	2102      	movs	r1, #2
 80002d0:	48a7      	ldr	r0, [pc, #668]	; (8000570 <display7SEG+0x308>)
 80002d2:	f001 ff07 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80002d6:	2200      	movs	r2, #0
 80002d8:	2104      	movs	r1, #4
 80002da:	48a5      	ldr	r0, [pc, #660]	; (8000570 <display7SEG+0x308>)
 80002dc:	f001 ff02 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 80002e0:	2201      	movs	r2, #1
 80002e2:	2108      	movs	r1, #8
 80002e4:	48a2      	ldr	r0, [pc, #648]	; (8000570 <display7SEG+0x308>)
 80002e6:	f001 fefd 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 80002ea:	2201      	movs	r2, #1
 80002ec:	2110      	movs	r1, #16
 80002ee:	48a0      	ldr	r0, [pc, #640]	; (8000570 <display7SEG+0x308>)
 80002f0:	f001 fef8 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 80002f4:	2201      	movs	r2, #1
 80002f6:	2120      	movs	r1, #32
 80002f8:	489d      	ldr	r0, [pc, #628]	; (8000570 <display7SEG+0x308>)
 80002fa:	f001 fef3 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 80002fe:	2201      	movs	r2, #1
 8000300:	2140      	movs	r1, #64	; 0x40
 8000302:	489b      	ldr	r0, [pc, #620]	; (8000570 <display7SEG+0x308>)
 8000304:	f001 feee 	bl	80020e4 <HAL_GPIO_WritePin>
	}
	if(num == 2)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	2b02      	cmp	r3, #2
 800030c:	d122      	bne.n	8000354 <display7SEG+0xec>
	{
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 800030e:	2200      	movs	r2, #0
 8000310:	2101      	movs	r1, #1
 8000312:	4897      	ldr	r0, [pc, #604]	; (8000570 <display7SEG+0x308>)
 8000314:	f001 fee6 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000318:	2200      	movs	r2, #0
 800031a:	2102      	movs	r1, #2
 800031c:	4894      	ldr	r0, [pc, #592]	; (8000570 <display7SEG+0x308>)
 800031e:	f001 fee1 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_SET);
 8000322:	2201      	movs	r2, #1
 8000324:	2104      	movs	r1, #4
 8000326:	4892      	ldr	r0, [pc, #584]	; (8000570 <display7SEG+0x308>)
 8000328:	f001 fedc 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 800032c:	2200      	movs	r2, #0
 800032e:	2108      	movs	r1, #8
 8000330:	488f      	ldr	r0, [pc, #572]	; (8000570 <display7SEG+0x308>)
 8000332:	f001 fed7 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000336:	2200      	movs	r2, #0
 8000338:	2110      	movs	r1, #16
 800033a:	488d      	ldr	r0, [pc, #564]	; (8000570 <display7SEG+0x308>)
 800033c:	f001 fed2 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000340:	2201      	movs	r2, #1
 8000342:	2120      	movs	r1, #32
 8000344:	488a      	ldr	r0, [pc, #552]	; (8000570 <display7SEG+0x308>)
 8000346:	f001 fecd 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 800034a:	2200      	movs	r2, #0
 800034c:	2140      	movs	r1, #64	; 0x40
 800034e:	4888      	ldr	r0, [pc, #544]	; (8000570 <display7SEG+0x308>)
 8000350:	f001 fec8 	bl	80020e4 <HAL_GPIO_WritePin>

	}
	if(num == 3)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	2b03      	cmp	r3, #3
 8000358:	d122      	bne.n	80003a0 <display7SEG+0x138>
	{
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	2101      	movs	r1, #1
 800035e:	4884      	ldr	r0, [pc, #528]	; (8000570 <display7SEG+0x308>)
 8000360:	f001 fec0 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	2102      	movs	r1, #2
 8000368:	4881      	ldr	r0, [pc, #516]	; (8000570 <display7SEG+0x308>)
 800036a:	f001 febb 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	2104      	movs	r1, #4
 8000372:	487f      	ldr	r0, [pc, #508]	; (8000570 <display7SEG+0x308>)
 8000374:	f001 feb6 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2108      	movs	r1, #8
 800037c:	487c      	ldr	r0, [pc, #496]	; (8000570 <display7SEG+0x308>)
 800037e:	f001 feb1 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000382:	2201      	movs	r2, #1
 8000384:	2110      	movs	r1, #16
 8000386:	487a      	ldr	r0, [pc, #488]	; (8000570 <display7SEG+0x308>)
 8000388:	f001 feac 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 800038c:	2201      	movs	r2, #1
 800038e:	2120      	movs	r1, #32
 8000390:	4877      	ldr	r0, [pc, #476]	; (8000570 <display7SEG+0x308>)
 8000392:	f001 fea7 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000396:	2200      	movs	r2, #0
 8000398:	2140      	movs	r1, #64	; 0x40
 800039a:	4875      	ldr	r0, [pc, #468]	; (8000570 <display7SEG+0x308>)
 800039c:	f001 fea2 	bl	80020e4 <HAL_GPIO_WritePin>
	}
	if(num == 4)
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	2b04      	cmp	r3, #4
 80003a4:	d122      	bne.n	80003ec <display7SEG+0x184>
	{
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_SET);
 80003a6:	2201      	movs	r2, #1
 80003a8:	2101      	movs	r1, #1
 80003aa:	4871      	ldr	r0, [pc, #452]	; (8000570 <display7SEG+0x308>)
 80003ac:	f001 fe9a 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80003b0:	2200      	movs	r2, #0
 80003b2:	2102      	movs	r1, #2
 80003b4:	486e      	ldr	r0, [pc, #440]	; (8000570 <display7SEG+0x308>)
 80003b6:	f001 fe95 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2104      	movs	r1, #4
 80003be:	486c      	ldr	r0, [pc, #432]	; (8000570 <display7SEG+0x308>)
 80003c0:	f001 fe90 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 80003c4:	2201      	movs	r2, #1
 80003c6:	2108      	movs	r1, #8
 80003c8:	4869      	ldr	r0, [pc, #420]	; (8000570 <display7SEG+0x308>)
 80003ca:	f001 fe8b 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 80003ce:	2201      	movs	r2, #1
 80003d0:	2110      	movs	r1, #16
 80003d2:	4867      	ldr	r0, [pc, #412]	; (8000570 <display7SEG+0x308>)
 80003d4:	f001 fe86 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	2120      	movs	r1, #32
 80003dc:	4864      	ldr	r0, [pc, #400]	; (8000570 <display7SEG+0x308>)
 80003de:	f001 fe81 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 80003e2:	2200      	movs	r2, #0
 80003e4:	2140      	movs	r1, #64	; 0x40
 80003e6:	4862      	ldr	r0, [pc, #392]	; (8000570 <display7SEG+0x308>)
 80003e8:	f001 fe7c 	bl	80020e4 <HAL_GPIO_WritePin>
	}
	if(num == 5)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	2b05      	cmp	r3, #5
 80003f0:	d122      	bne.n	8000438 <display7SEG+0x1d0>
	{
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 80003f2:	2200      	movs	r2, #0
 80003f4:	2101      	movs	r1, #1
 80003f6:	485e      	ldr	r0, [pc, #376]	; (8000570 <display7SEG+0x308>)
 80003f8:	f001 fe74 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 80003fc:	2201      	movs	r2, #1
 80003fe:	2102      	movs	r1, #2
 8000400:	485b      	ldr	r0, [pc, #364]	; (8000570 <display7SEG+0x308>)
 8000402:	f001 fe6f 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	2104      	movs	r1, #4
 800040a:	4859      	ldr	r0, [pc, #356]	; (8000570 <display7SEG+0x308>)
 800040c:	f001 fe6a 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	2108      	movs	r1, #8
 8000414:	4856      	ldr	r0, [pc, #344]	; (8000570 <display7SEG+0x308>)
 8000416:	f001 fe65 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 800041a:	2201      	movs	r2, #1
 800041c:	2110      	movs	r1, #16
 800041e:	4854      	ldr	r0, [pc, #336]	; (8000570 <display7SEG+0x308>)
 8000420:	f001 fe60 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	2120      	movs	r1, #32
 8000428:	4851      	ldr	r0, [pc, #324]	; (8000570 <display7SEG+0x308>)
 800042a:	f001 fe5b 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 800042e:	2200      	movs	r2, #0
 8000430:	2140      	movs	r1, #64	; 0x40
 8000432:	484f      	ldr	r0, [pc, #316]	; (8000570 <display7SEG+0x308>)
 8000434:	f001 fe56 	bl	80020e4 <HAL_GPIO_WritePin>
	}
	if(num == 6)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	2b06      	cmp	r3, #6
 800043c:	d122      	bne.n	8000484 <display7SEG+0x21c>
	{
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 800043e:	2200      	movs	r2, #0
 8000440:	2101      	movs	r1, #1
 8000442:	484b      	ldr	r0, [pc, #300]	; (8000570 <display7SEG+0x308>)
 8000444:	f001 fe4e 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 8000448:	2201      	movs	r2, #1
 800044a:	2102      	movs	r1, #2
 800044c:	4848      	ldr	r0, [pc, #288]	; (8000570 <display7SEG+0x308>)
 800044e:	f001 fe49 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000452:	2200      	movs	r2, #0
 8000454:	2104      	movs	r1, #4
 8000456:	4846      	ldr	r0, [pc, #280]	; (8000570 <display7SEG+0x308>)
 8000458:	f001 fe44 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 800045c:	2200      	movs	r2, #0
 800045e:	2108      	movs	r1, #8
 8000460:	4843      	ldr	r0, [pc, #268]	; (8000570 <display7SEG+0x308>)
 8000462:	f001 fe3f 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000466:	2200      	movs	r2, #0
 8000468:	2110      	movs	r1, #16
 800046a:	4841      	ldr	r0, [pc, #260]	; (8000570 <display7SEG+0x308>)
 800046c:	f001 fe3a 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000470:	2200      	movs	r2, #0
 8000472:	2120      	movs	r1, #32
 8000474:	483e      	ldr	r0, [pc, #248]	; (8000570 <display7SEG+0x308>)
 8000476:	f001 fe35 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 800047a:	2200      	movs	r2, #0
 800047c:	2140      	movs	r1, #64	; 0x40
 800047e:	483c      	ldr	r0, [pc, #240]	; (8000570 <display7SEG+0x308>)
 8000480:	f001 fe30 	bl	80020e4 <HAL_GPIO_WritePin>

	}
	if(num == 7)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	2b07      	cmp	r3, #7
 8000488:	d122      	bne.n	80004d0 <display7SEG+0x268>
	{
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 800048a:	2200      	movs	r2, #0
 800048c:	2101      	movs	r1, #1
 800048e:	4838      	ldr	r0, [pc, #224]	; (8000570 <display7SEG+0x308>)
 8000490:	f001 fe28 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000494:	2200      	movs	r2, #0
 8000496:	2102      	movs	r1, #2
 8000498:	4835      	ldr	r0, [pc, #212]	; (8000570 <display7SEG+0x308>)
 800049a:	f001 fe23 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 800049e:	2200      	movs	r2, #0
 80004a0:	2104      	movs	r1, #4
 80004a2:	4833      	ldr	r0, [pc, #204]	; (8000570 <display7SEG+0x308>)
 80004a4:	f001 fe1e 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 80004a8:	2201      	movs	r2, #1
 80004aa:	2108      	movs	r1, #8
 80004ac:	4830      	ldr	r0, [pc, #192]	; (8000570 <display7SEG+0x308>)
 80004ae:	f001 fe19 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 80004b2:	2201      	movs	r2, #1
 80004b4:	2110      	movs	r1, #16
 80004b6:	482e      	ldr	r0, [pc, #184]	; (8000570 <display7SEG+0x308>)
 80004b8:	f001 fe14 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 80004bc:	2201      	movs	r2, #1
 80004be:	2120      	movs	r1, #32
 80004c0:	482b      	ldr	r0, [pc, #172]	; (8000570 <display7SEG+0x308>)
 80004c2:	f001 fe0f 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 80004c6:	2201      	movs	r2, #1
 80004c8:	2140      	movs	r1, #64	; 0x40
 80004ca:	4829      	ldr	r0, [pc, #164]	; (8000570 <display7SEG+0x308>)
 80004cc:	f001 fe0a 	bl	80020e4 <HAL_GPIO_WritePin>
	}
	if(num == 8)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2b08      	cmp	r3, #8
 80004d4:	d122      	bne.n	800051c <display7SEG+0x2b4>
	{
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2101      	movs	r1, #1
 80004da:	4825      	ldr	r0, [pc, #148]	; (8000570 <display7SEG+0x308>)
 80004dc:	f001 fe02 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2102      	movs	r1, #2
 80004e4:	4822      	ldr	r0, [pc, #136]	; (8000570 <display7SEG+0x308>)
 80004e6:	f001 fdfd 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2104      	movs	r1, #4
 80004ee:	4820      	ldr	r0, [pc, #128]	; (8000570 <display7SEG+0x308>)
 80004f0:	f001 fdf8 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2108      	movs	r1, #8
 80004f8:	481d      	ldr	r0, [pc, #116]	; (8000570 <display7SEG+0x308>)
 80004fa:	f001 fdf3 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 80004fe:	2200      	movs	r2, #0
 8000500:	2110      	movs	r1, #16
 8000502:	481b      	ldr	r0, [pc, #108]	; (8000570 <display7SEG+0x308>)
 8000504:	f001 fdee 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000508:	2200      	movs	r2, #0
 800050a:	2120      	movs	r1, #32
 800050c:	4818      	ldr	r0, [pc, #96]	; (8000570 <display7SEG+0x308>)
 800050e:	f001 fde9 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000512:	2200      	movs	r2, #0
 8000514:	2140      	movs	r1, #64	; 0x40
 8000516:	4816      	ldr	r0, [pc, #88]	; (8000570 <display7SEG+0x308>)
 8000518:	f001 fde4 	bl	80020e4 <HAL_GPIO_WritePin>
	}
	if(num == 9)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2b09      	cmp	r3, #9
 8000520:	d122      	bne.n	8000568 <display7SEG+0x300>
	{
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	2101      	movs	r1, #1
 8000526:	4812      	ldr	r0, [pc, #72]	; (8000570 <display7SEG+0x308>)
 8000528:	f001 fddc 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	2102      	movs	r1, #2
 8000530:	480f      	ldr	r0, [pc, #60]	; (8000570 <display7SEG+0x308>)
 8000532:	f001 fdd7 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000536:	2200      	movs	r2, #0
 8000538:	2104      	movs	r1, #4
 800053a:	480d      	ldr	r0, [pc, #52]	; (8000570 <display7SEG+0x308>)
 800053c:	f001 fdd2 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	2108      	movs	r1, #8
 8000544:	480a      	ldr	r0, [pc, #40]	; (8000570 <display7SEG+0x308>)
 8000546:	f001 fdcd 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 800054a:	2201      	movs	r2, #1
 800054c:	2110      	movs	r1, #16
 800054e:	4808      	ldr	r0, [pc, #32]	; (8000570 <display7SEG+0x308>)
 8000550:	f001 fdc8 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	2120      	movs	r1, #32
 8000558:	4805      	ldr	r0, [pc, #20]	; (8000570 <display7SEG+0x308>)
 800055a:	f001 fdc3 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	2140      	movs	r1, #64	; 0x40
 8000562:	4803      	ldr	r0, [pc, #12]	; (8000570 <display7SEG+0x308>)
 8000564:	f001 fdbe 	bl	80020e4 <HAL_GPIO_WritePin>
	}
}
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40010c00 	.word	0x40010c00

08000574 <update7SEG>:

void update7SEG (int index)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	2b03      	cmp	r3, #3
 8000580:	d87a      	bhi.n	8000678 <update7SEG+0x104>
 8000582:	a201      	add	r2, pc, #4	; (adr r2, 8000588 <update7SEG+0x14>)
 8000584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000588:	08000599 	.word	0x08000599
 800058c:	080005d1 	.word	0x080005d1
 8000590:	08000609 	.word	0x08000609
 8000594:	08000641 	.word	0x08000641
	switch (index)
	{
		case 0:
			// Display the first 7 SEG with led_buffer [0]
			{
				display7SEG(led_buffer[0]);
 8000598:	4b3a      	ldr	r3, [pc, #232]	; (8000684 <update7SEG+0x110>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4618      	mov	r0, r3
 800059e:	f7ff fe63 	bl	8000268 <display7SEG>
				HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2140      	movs	r1, #64	; 0x40
 80005a6:	4838      	ldr	r0, [pc, #224]	; (8000688 <update7SEG+0x114>)
 80005a8:	f001 fd9c 	bl	80020e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	2180      	movs	r1, #128	; 0x80
 80005b0:	4835      	ldr	r0, [pc, #212]	; (8000688 <update7SEG+0x114>)
 80005b2:	f001 fd97 	bl	80020e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80005b6:	2201      	movs	r2, #1
 80005b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005bc:	4832      	ldr	r0, [pc, #200]	; (8000688 <update7SEG+0x114>)
 80005be:	f001 fd91 	bl	80020e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80005c2:	2201      	movs	r2, #1
 80005c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005c8:	482f      	ldr	r0, [pc, #188]	; (8000688 <update7SEG+0x114>)
 80005ca:	f001 fd8b 	bl	80020e4 <HAL_GPIO_WritePin>
				break;
 80005ce:	e054      	b.n	800067a <update7SEG+0x106>
			}
		case 1:
			// Display the second 7 SEG with led_buffer [1]
			{
				display7SEG(led_buffer[1]);
 80005d0:	4b2c      	ldr	r3, [pc, #176]	; (8000684 <update7SEG+0x110>)
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff fe47 	bl	8000268 <display7SEG>
				HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 80005da:	2201      	movs	r2, #1
 80005dc:	2140      	movs	r1, #64	; 0x40
 80005de:	482a      	ldr	r0, [pc, #168]	; (8000688 <update7SEG+0x114>)
 80005e0:	f001 fd80 	bl	80020e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2180      	movs	r1, #128	; 0x80
 80005e8:	4827      	ldr	r0, [pc, #156]	; (8000688 <update7SEG+0x114>)
 80005ea:	f001 fd7b 	bl	80020e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80005ee:	2201      	movs	r2, #1
 80005f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f4:	4824      	ldr	r0, [pc, #144]	; (8000688 <update7SEG+0x114>)
 80005f6:	f001 fd75 	bl	80020e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80005fa:	2201      	movs	r2, #1
 80005fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000600:	4821      	ldr	r0, [pc, #132]	; (8000688 <update7SEG+0x114>)
 8000602:	f001 fd6f 	bl	80020e4 <HAL_GPIO_WritePin>
				break;
 8000606:	e038      	b.n	800067a <update7SEG+0x106>
			}
		case 2:
			// Display the third 7 SEG with led_buffer [2]
			{
				display7SEG(led_buffer[2]);
 8000608:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <update7SEG+0x110>)
 800060a:	689b      	ldr	r3, [r3, #8]
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff fe2b 	bl	8000268 <display7SEG>
				HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000612:	2201      	movs	r2, #1
 8000614:	2140      	movs	r1, #64	; 0x40
 8000616:	481c      	ldr	r0, [pc, #112]	; (8000688 <update7SEG+0x114>)
 8000618:	f001 fd64 	bl	80020e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 800061c:	2201      	movs	r2, #1
 800061e:	2180      	movs	r1, #128	; 0x80
 8000620:	4819      	ldr	r0, [pc, #100]	; (8000688 <update7SEG+0x114>)
 8000622:	f001 fd5f 	bl	80020e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	f44f 7180 	mov.w	r1, #256	; 0x100
 800062c:	4816      	ldr	r0, [pc, #88]	; (8000688 <update7SEG+0x114>)
 800062e:	f001 fd59 	bl	80020e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000632:	2201      	movs	r2, #1
 8000634:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000638:	4813      	ldr	r0, [pc, #76]	; (8000688 <update7SEG+0x114>)
 800063a:	f001 fd53 	bl	80020e4 <HAL_GPIO_WritePin>
				break;
 800063e:	e01c      	b.n	800067a <update7SEG+0x106>
			}
		case 3:
			// Display the forth 7 SEG with led_buffer [3]
			{
				display7SEG(led_buffer[3]);
 8000640:	4b10      	ldr	r3, [pc, #64]	; (8000684 <update7SEG+0x110>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff fe0f 	bl	8000268 <display7SEG>
				HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 800064a:	2201      	movs	r2, #1
 800064c:	2140      	movs	r1, #64	; 0x40
 800064e:	480e      	ldr	r0, [pc, #56]	; (8000688 <update7SEG+0x114>)
 8000650:	f001 fd48 	bl	80020e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000654:	2201      	movs	r2, #1
 8000656:	2180      	movs	r1, #128	; 0x80
 8000658:	480b      	ldr	r0, [pc, #44]	; (8000688 <update7SEG+0x114>)
 800065a:	f001 fd43 	bl	80020e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 800065e:	2201      	movs	r2, #1
 8000660:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000664:	4808      	ldr	r0, [pc, #32]	; (8000688 <update7SEG+0x114>)
 8000666:	f001 fd3d 	bl	80020e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <update7SEG+0x114>)
 8000672:	f001 fd37 	bl	80020e4 <HAL_GPIO_WritePin>
				break;
 8000676:	e000      	b.n	800067a <update7SEG+0x106>
			}
		default :
			break ;
 8000678:	bf00      	nop
	}
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000000 	.word	0x20000000
 8000688:	40010800 	.word	0x40010800

0800068c <displayLedMatrix>:
#include "control_matrix.h"

int index_led_matrix = 0;
uint8_t matrix_buffer [8] = {0x18,0x24,0x42,0x42,0x7e,0x42,0x42,0x42};

void displayLedMatrix(int row, int col){
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	6039      	str	r1, [r7, #0]
	int shift = 1;// mask used to get bit by bit of buffer
 8000696:	2301      	movs	r3, #1
 8000698:	60fb      	str	r3, [r7, #12]

	if(row == 0){// enable row 0
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2b00      	cmp	r3, #0
 800069e:	f040 80c3 	bne.w	8000828 <displayLedMatrix+0x19c>
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a8:	48b1      	ldr	r0, [pc, #708]	; (8000970 <displayLedMatrix+0x2e4>)
 80006aa:	f001 fd1b 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, GPIO_PIN_SET);
 80006ae:	2201      	movs	r2, #1
 80006b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b4:	48ae      	ldr	r0, [pc, #696]	; (8000970 <displayLedMatrix+0x2e4>)
 80006b6:	f001 fd15 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, GPIO_PIN_SET);
 80006ba:	2201      	movs	r2, #1
 80006bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006c0:	48ab      	ldr	r0, [pc, #684]	; (8000970 <displayLedMatrix+0x2e4>)
 80006c2:	f001 fd0f 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, GPIO_PIN_SET);
 80006c6:	2201      	movs	r2, #1
 80006c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006cc:	48a8      	ldr	r0, [pc, #672]	; (8000970 <displayLedMatrix+0x2e4>)
 80006ce:	f001 fd09 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, GPIO_PIN_SET);
 80006d2:	2201      	movs	r2, #1
 80006d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006d8:	48a5      	ldr	r0, [pc, #660]	; (8000970 <displayLedMatrix+0x2e4>)
 80006da:	f001 fd03 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, GPIO_PIN_SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e4:	48a2      	ldr	r0, [pc, #648]	; (8000970 <displayLedMatrix+0x2e4>)
 80006e6:	f001 fcfd 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, GPIO_PIN_SET);
 80006ea:	2201      	movs	r2, #1
 80006ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006f0:	489f      	ldr	r0, [pc, #636]	; (8000970 <displayLedMatrix+0x2e4>)
 80006f2:	f001 fcf7 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, GPIO_PIN_SET);
 80006f6:	2201      	movs	r2, #1
 80006f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006fc:	489c      	ldr	r0, [pc, #624]	; (8000970 <displayLedMatrix+0x2e4>)
 80006fe:	f001 fcf1 	bl	80020e4 <HAL_GPIO_WritePin>

		// get bit by bit of buffer, then assign to ENM-PIN to control COL-PIN
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1 - (col & shift));
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	b25a      	sxtb	r2, r3
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	b25b      	sxtb	r3, r3
 800070a:	4013      	ands	r3, r2
 800070c:	b25b      	sxtb	r3, r3
 800070e:	b2db      	uxtb	r3, r3
 8000710:	f1c3 0301 	rsb	r3, r3, #1
 8000714:	b2db      	uxtb	r3, r3
 8000716:	461a      	mov	r2, r3
 8000718:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800071c:	4895      	ldr	r0, [pc, #596]	; (8000974 <displayLedMatrix+0x2e8>)
 800071e:	f001 fce1 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	105b      	asrs	r3, r3, #1
 8000726:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1 - (col & shift));
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	b25a      	sxtb	r2, r3
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	b25b      	sxtb	r3, r3
 8000730:	4013      	ands	r3, r2
 8000732:	b25b      	sxtb	r3, r3
 8000734:	b2db      	uxtb	r3, r3
 8000736:	f1c3 0301 	rsb	r3, r3, #1
 800073a:	b2db      	uxtb	r3, r3
 800073c:	461a      	mov	r2, r3
 800073e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000742:	488c      	ldr	r0, [pc, #560]	; (8000974 <displayLedMatrix+0x2e8>)
 8000744:	f001 fcce 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	105b      	asrs	r3, r3, #1
 800074c:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1 - (col & shift));
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	b25a      	sxtb	r2, r3
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	b25b      	sxtb	r3, r3
 8000756:	4013      	ands	r3, r2
 8000758:	b25b      	sxtb	r3, r3
 800075a:	b2db      	uxtb	r3, r3
 800075c:	f1c3 0301 	rsb	r3, r3, #1
 8000760:	b2db      	uxtb	r3, r3
 8000762:	461a      	mov	r2, r3
 8000764:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000768:	4882      	ldr	r0, [pc, #520]	; (8000974 <displayLedMatrix+0x2e8>)
 800076a:	f001 fcbb 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	105b      	asrs	r3, r3, #1
 8000772:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1 - (col & shift));
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	b25a      	sxtb	r2, r3
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	b25b      	sxtb	r3, r3
 800077c:	4013      	ands	r3, r2
 800077e:	b25b      	sxtb	r3, r3
 8000780:	b2db      	uxtb	r3, r3
 8000782:	f1c3 0301 	rsb	r3, r3, #1
 8000786:	b2db      	uxtb	r3, r3
 8000788:	461a      	mov	r2, r3
 800078a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800078e:	4879      	ldr	r0, [pc, #484]	; (8000974 <displayLedMatrix+0x2e8>)
 8000790:	f001 fca8 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	105b      	asrs	r3, r3, #1
 8000798:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1 - (col & shift));
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	b25a      	sxtb	r2, r3
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	b25b      	sxtb	r3, r3
 80007a2:	4013      	ands	r3, r2
 80007a4:	b25b      	sxtb	r3, r3
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	f1c3 0301 	rsb	r3, r3, #1
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	461a      	mov	r2, r3
 80007b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007b4:	486f      	ldr	r0, [pc, #444]	; (8000974 <displayLedMatrix+0x2e8>)
 80007b6:	f001 fc95 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	105b      	asrs	r3, r3, #1
 80007be:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1 - (col & shift));
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	b25a      	sxtb	r2, r3
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	b25b      	sxtb	r3, r3
 80007c8:	4013      	ands	r3, r2
 80007ca:	b25b      	sxtb	r3, r3
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	f1c3 0301 	rsb	r3, r3, #1
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	461a      	mov	r2, r3
 80007d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007da:	4866      	ldr	r0, [pc, #408]	; (8000974 <displayLedMatrix+0x2e8>)
 80007dc:	f001 fc82 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	105b      	asrs	r3, r3, #1
 80007e4:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1 - (col & shift));
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	b25a      	sxtb	r2, r3
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	b25b      	sxtb	r3, r3
 80007ee:	4013      	ands	r3, r2
 80007f0:	b25b      	sxtb	r3, r3
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	f1c3 0301 	rsb	r3, r3, #1
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	461a      	mov	r2, r3
 80007fc:	2108      	movs	r1, #8
 80007fe:	485d      	ldr	r0, [pc, #372]	; (8000974 <displayLedMatrix+0x2e8>)
 8000800:	f001 fc70 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	105b      	asrs	r3, r3, #1
 8000808:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin,  1 - (col & shift));
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	b25a      	sxtb	r2, r3
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	b25b      	sxtb	r3, r3
 8000812:	4013      	ands	r3, r2
 8000814:	b25b      	sxtb	r3, r3
 8000816:	b2db      	uxtb	r3, r3
 8000818:	f1c3 0301 	rsb	r3, r3, #1
 800081c:	b2db      	uxtb	r3, r3
 800081e:	461a      	mov	r2, r3
 8000820:	2104      	movs	r1, #4
 8000822:	4854      	ldr	r0, [pc, #336]	; (8000974 <displayLedMatrix+0x2e8>)
 8000824:	f001 fc5e 	bl	80020e4 <HAL_GPIO_WritePin>
	}

	if(row == 1){// enable row 1
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2b01      	cmp	r3, #1
 800082c:	f040 80c8 	bne.w	80009c0 <displayLedMatrix+0x334>
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, GPIO_PIN_SET);
 8000830:	2201      	movs	r2, #1
 8000832:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000836:	484e      	ldr	r0, [pc, #312]	; (8000970 <displayLedMatrix+0x2e4>)
 8000838:	f001 fc54 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, GPIO_PIN_RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000842:	484b      	ldr	r0, [pc, #300]	; (8000970 <displayLedMatrix+0x2e4>)
 8000844:	f001 fc4e 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, GPIO_PIN_SET);
 8000848:	2201      	movs	r2, #1
 800084a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800084e:	4848      	ldr	r0, [pc, #288]	; (8000970 <displayLedMatrix+0x2e4>)
 8000850:	f001 fc48 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, GPIO_PIN_SET);
 8000854:	2201      	movs	r2, #1
 8000856:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800085a:	4845      	ldr	r0, [pc, #276]	; (8000970 <displayLedMatrix+0x2e4>)
 800085c:	f001 fc42 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, GPIO_PIN_SET);
 8000860:	2201      	movs	r2, #1
 8000862:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000866:	4842      	ldr	r0, [pc, #264]	; (8000970 <displayLedMatrix+0x2e4>)
 8000868:	f001 fc3c 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, GPIO_PIN_SET);
 800086c:	2201      	movs	r2, #1
 800086e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000872:	483f      	ldr	r0, [pc, #252]	; (8000970 <displayLedMatrix+0x2e4>)
 8000874:	f001 fc36 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, GPIO_PIN_SET);
 8000878:	2201      	movs	r2, #1
 800087a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800087e:	483c      	ldr	r0, [pc, #240]	; (8000970 <displayLedMatrix+0x2e4>)
 8000880:	f001 fc30 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, GPIO_PIN_SET);
 8000884:	2201      	movs	r2, #1
 8000886:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800088a:	4839      	ldr	r0, [pc, #228]	; (8000970 <displayLedMatrix+0x2e4>)
 800088c:	f001 fc2a 	bl	80020e4 <HAL_GPIO_WritePin>

		// get bit by bit of buffer, then assign to ENM-PIN to control COL-PIN
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1 - (col & shift));
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	b25a      	sxtb	r2, r3
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	b25b      	sxtb	r3, r3
 8000898:	4013      	ands	r3, r2
 800089a:	b25b      	sxtb	r3, r3
 800089c:	b2db      	uxtb	r3, r3
 800089e:	f1c3 0301 	rsb	r3, r3, #1
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	461a      	mov	r2, r3
 80008a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008aa:	4832      	ldr	r0, [pc, #200]	; (8000974 <displayLedMatrix+0x2e8>)
 80008ac:	f001 fc1a 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	105b      	asrs	r3, r3, #1
 80008b4:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1 - (col & shift));
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	b25a      	sxtb	r2, r3
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	b25b      	sxtb	r3, r3
 80008be:	4013      	ands	r3, r2
 80008c0:	b25b      	sxtb	r3, r3
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	f1c3 0301 	rsb	r3, r3, #1
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	461a      	mov	r2, r3
 80008cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008d0:	4828      	ldr	r0, [pc, #160]	; (8000974 <displayLedMatrix+0x2e8>)
 80008d2:	f001 fc07 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	105b      	asrs	r3, r3, #1
 80008da:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1 - (col & shift));
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	b25a      	sxtb	r2, r3
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	b25b      	sxtb	r3, r3
 80008e4:	4013      	ands	r3, r2
 80008e6:	b25b      	sxtb	r3, r3
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	f1c3 0301 	rsb	r3, r3, #1
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	461a      	mov	r2, r3
 80008f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008f6:	481f      	ldr	r0, [pc, #124]	; (8000974 <displayLedMatrix+0x2e8>)
 80008f8:	f001 fbf4 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	105b      	asrs	r3, r3, #1
 8000900:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1 - (col & shift));
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	b25a      	sxtb	r2, r3
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	b25b      	sxtb	r3, r3
 800090a:	4013      	ands	r3, r2
 800090c:	b25b      	sxtb	r3, r3
 800090e:	b2db      	uxtb	r3, r3
 8000910:	f1c3 0301 	rsb	r3, r3, #1
 8000914:	b2db      	uxtb	r3, r3
 8000916:	461a      	mov	r2, r3
 8000918:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800091c:	4815      	ldr	r0, [pc, #84]	; (8000974 <displayLedMatrix+0x2e8>)
 800091e:	f001 fbe1 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	105b      	asrs	r3, r3, #1
 8000926:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1 - (col & shift));
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	b25a      	sxtb	r2, r3
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	b25b      	sxtb	r3, r3
 8000930:	4013      	ands	r3, r2
 8000932:	b25b      	sxtb	r3, r3
 8000934:	b2db      	uxtb	r3, r3
 8000936:	f1c3 0301 	rsb	r3, r3, #1
 800093a:	b2db      	uxtb	r3, r3
 800093c:	461a      	mov	r2, r3
 800093e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000942:	480c      	ldr	r0, [pc, #48]	; (8000974 <displayLedMatrix+0x2e8>)
 8000944:	f001 fbce 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	105b      	asrs	r3, r3, #1
 800094c:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1 - (col & shift));
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	b25a      	sxtb	r2, r3
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	b25b      	sxtb	r3, r3
 8000956:	4013      	ands	r3, r2
 8000958:	b25b      	sxtb	r3, r3
 800095a:	b2db      	uxtb	r3, r3
 800095c:	f1c3 0301 	rsb	r3, r3, #1
 8000960:	b2db      	uxtb	r3, r3
 8000962:	461a      	mov	r2, r3
 8000964:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000968:	4802      	ldr	r0, [pc, #8]	; (8000974 <displayLedMatrix+0x2e8>)
 800096a:	f001 fbbb 	bl	80020e4 <HAL_GPIO_WritePin>
 800096e:	e003      	b.n	8000978 <displayLedMatrix+0x2ec>
 8000970:	40010c00 	.word	0x40010c00
 8000974:	40010800 	.word	0x40010800
		col = col >> 1;
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	105b      	asrs	r3, r3, #1
 800097c:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1 - (col & shift));
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	b25a      	sxtb	r2, r3
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	b25b      	sxtb	r3, r3
 8000986:	4013      	ands	r3, r2
 8000988:	b25b      	sxtb	r3, r3
 800098a:	b2db      	uxtb	r3, r3
 800098c:	f1c3 0301 	rsb	r3, r3, #1
 8000990:	b2db      	uxtb	r3, r3
 8000992:	461a      	mov	r2, r3
 8000994:	2108      	movs	r1, #8
 8000996:	48b2      	ldr	r0, [pc, #712]	; (8000c60 <displayLedMatrix+0x5d4>)
 8000998:	f001 fba4 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	105b      	asrs	r3, r3, #1
 80009a0:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin,  1 - (col & shift));
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	b25a      	sxtb	r2, r3
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	b25b      	sxtb	r3, r3
 80009aa:	4013      	ands	r3, r2
 80009ac:	b25b      	sxtb	r3, r3
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	f1c3 0301 	rsb	r3, r3, #1
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	461a      	mov	r2, r3
 80009b8:	2104      	movs	r1, #4
 80009ba:	48a9      	ldr	r0, [pc, #676]	; (8000c60 <displayLedMatrix+0x5d4>)
 80009bc:	f001 fb92 	bl	80020e4 <HAL_GPIO_WritePin>
	}

	if(row == 2){// enable row 2
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	f040 80c3 	bne.w	8000b4e <displayLedMatrix+0x4c2>
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, GPIO_PIN_SET);
 80009c8:	2201      	movs	r2, #1
 80009ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ce:	48a5      	ldr	r0, [pc, #660]	; (8000c64 <displayLedMatrix+0x5d8>)
 80009d0:	f001 fb88 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, GPIO_PIN_SET);
 80009d4:	2201      	movs	r2, #1
 80009d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009da:	48a2      	ldr	r0, [pc, #648]	; (8000c64 <displayLedMatrix+0x5d8>)
 80009dc:	f001 fb82 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009e6:	489f      	ldr	r0, [pc, #636]	; (8000c64 <displayLedMatrix+0x5d8>)
 80009e8:	f001 fb7c 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, GPIO_PIN_SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009f2:	489c      	ldr	r0, [pc, #624]	; (8000c64 <displayLedMatrix+0x5d8>)
 80009f4:	f001 fb76 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, GPIO_PIN_SET);
 80009f8:	2201      	movs	r2, #1
 80009fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009fe:	4899      	ldr	r0, [pc, #612]	; (8000c64 <displayLedMatrix+0x5d8>)
 8000a00:	f001 fb70 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, GPIO_PIN_SET);
 8000a04:	2201      	movs	r2, #1
 8000a06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a0a:	4896      	ldr	r0, [pc, #600]	; (8000c64 <displayLedMatrix+0x5d8>)
 8000a0c:	f001 fb6a 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, GPIO_PIN_SET);
 8000a10:	2201      	movs	r2, #1
 8000a12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a16:	4893      	ldr	r0, [pc, #588]	; (8000c64 <displayLedMatrix+0x5d8>)
 8000a18:	f001 fb64 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, GPIO_PIN_SET);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a22:	4890      	ldr	r0, [pc, #576]	; (8000c64 <displayLedMatrix+0x5d8>)
 8000a24:	f001 fb5e 	bl	80020e4 <HAL_GPIO_WritePin>

		// get bit by bit of buffer, then assign to ENM-PIN to control COL-PIN
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1 - (col & shift));
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	b25a      	sxtb	r2, r3
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	b25b      	sxtb	r3, r3
 8000a30:	4013      	ands	r3, r2
 8000a32:	b25b      	sxtb	r3, r3
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	f1c3 0301 	rsb	r3, r3, #1
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a42:	4887      	ldr	r0, [pc, #540]	; (8000c60 <displayLedMatrix+0x5d4>)
 8000a44:	f001 fb4e 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	105b      	asrs	r3, r3, #1
 8000a4c:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1 - (col & shift));
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	b25a      	sxtb	r2, r3
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	b25b      	sxtb	r3, r3
 8000a56:	4013      	ands	r3, r2
 8000a58:	b25b      	sxtb	r3, r3
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	f1c3 0301 	rsb	r3, r3, #1
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	461a      	mov	r2, r3
 8000a64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a68:	487d      	ldr	r0, [pc, #500]	; (8000c60 <displayLedMatrix+0x5d4>)
 8000a6a:	f001 fb3b 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	105b      	asrs	r3, r3, #1
 8000a72:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1 - (col & shift));
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	b25a      	sxtb	r2, r3
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	b25b      	sxtb	r3, r3
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	b25b      	sxtb	r3, r3
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	f1c3 0301 	rsb	r3, r3, #1
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	461a      	mov	r2, r3
 8000a8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a8e:	4874      	ldr	r0, [pc, #464]	; (8000c60 <displayLedMatrix+0x5d4>)
 8000a90:	f001 fb28 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	105b      	asrs	r3, r3, #1
 8000a98:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1 - (col & shift));
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	b25a      	sxtb	r2, r3
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	b25b      	sxtb	r3, r3
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	b25b      	sxtb	r3, r3
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	f1c3 0301 	rsb	r3, r3, #1
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	461a      	mov	r2, r3
 8000ab0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ab4:	486a      	ldr	r0, [pc, #424]	; (8000c60 <displayLedMatrix+0x5d4>)
 8000ab6:	f001 fb15 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	105b      	asrs	r3, r3, #1
 8000abe:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1 - (col & shift));
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	b25a      	sxtb	r2, r3
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	b25b      	sxtb	r3, r3
 8000ac8:	4013      	ands	r3, r2
 8000aca:	b25b      	sxtb	r3, r3
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	f1c3 0301 	rsb	r3, r3, #1
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ada:	4861      	ldr	r0, [pc, #388]	; (8000c60 <displayLedMatrix+0x5d4>)
 8000adc:	f001 fb02 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	105b      	asrs	r3, r3, #1
 8000ae4:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1 - (col & shift));
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	b25a      	sxtb	r2, r3
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	b25b      	sxtb	r3, r3
 8000aee:	4013      	ands	r3, r2
 8000af0:	b25b      	sxtb	r3, r3
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	f1c3 0301 	rsb	r3, r3, #1
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	461a      	mov	r2, r3
 8000afc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b00:	4857      	ldr	r0, [pc, #348]	; (8000c60 <displayLedMatrix+0x5d4>)
 8000b02:	f001 faef 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	105b      	asrs	r3, r3, #1
 8000b0a:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1 - (col & shift));
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	b25a      	sxtb	r2, r3
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	b25b      	sxtb	r3, r3
 8000b14:	4013      	ands	r3, r2
 8000b16:	b25b      	sxtb	r3, r3
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	f1c3 0301 	rsb	r3, r3, #1
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	461a      	mov	r2, r3
 8000b22:	2108      	movs	r1, #8
 8000b24:	484e      	ldr	r0, [pc, #312]	; (8000c60 <displayLedMatrix+0x5d4>)
 8000b26:	f001 fadd 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	105b      	asrs	r3, r3, #1
 8000b2e:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin,  1 - (col & shift));
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	b25a      	sxtb	r2, r3
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	b25b      	sxtb	r3, r3
 8000b38:	4013      	ands	r3, r2
 8000b3a:	b25b      	sxtb	r3, r3
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	f1c3 0301 	rsb	r3, r3, #1
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	461a      	mov	r2, r3
 8000b46:	2104      	movs	r1, #4
 8000b48:	4845      	ldr	r0, [pc, #276]	; (8000c60 <displayLedMatrix+0x5d4>)
 8000b4a:	f001 facb 	bl	80020e4 <HAL_GPIO_WritePin>
	}

	if(row == 3){// enable row 3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b03      	cmp	r3, #3
 8000b52:	f040 80c9 	bne.w	8000ce8 <displayLedMatrix+0x65c>
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, GPIO_PIN_SET);
 8000b56:	2201      	movs	r2, #1
 8000b58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b5c:	4841      	ldr	r0, [pc, #260]	; (8000c64 <displayLedMatrix+0x5d8>)
 8000b5e:	f001 fac1 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, GPIO_PIN_SET);
 8000b62:	2201      	movs	r2, #1
 8000b64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b68:	483e      	ldr	r0, [pc, #248]	; (8000c64 <displayLedMatrix+0x5d8>)
 8000b6a:	f001 fabb 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, GPIO_PIN_SET);
 8000b6e:	2201      	movs	r2, #1
 8000b70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b74:	483b      	ldr	r0, [pc, #236]	; (8000c64 <displayLedMatrix+0x5d8>)
 8000b76:	f001 fab5 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b80:	4838      	ldr	r0, [pc, #224]	; (8000c64 <displayLedMatrix+0x5d8>)
 8000b82:	f001 faaf 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, GPIO_PIN_SET);
 8000b86:	2201      	movs	r2, #1
 8000b88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b8c:	4835      	ldr	r0, [pc, #212]	; (8000c64 <displayLedMatrix+0x5d8>)
 8000b8e:	f001 faa9 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, GPIO_PIN_SET);
 8000b92:	2201      	movs	r2, #1
 8000b94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b98:	4832      	ldr	r0, [pc, #200]	; (8000c64 <displayLedMatrix+0x5d8>)
 8000b9a:	f001 faa3 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, GPIO_PIN_SET);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ba4:	482f      	ldr	r0, [pc, #188]	; (8000c64 <displayLedMatrix+0x5d8>)
 8000ba6:	f001 fa9d 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, GPIO_PIN_SET);
 8000baa:	2201      	movs	r2, #1
 8000bac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bb0:	482c      	ldr	r0, [pc, #176]	; (8000c64 <displayLedMatrix+0x5d8>)
 8000bb2:	f001 fa97 	bl	80020e4 <HAL_GPIO_WritePin>

		// get bit by bit of buffer, then assign to ENM-PIN to control COL-PIN
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1 - (col & shift));
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	b25a      	sxtb	r2, r3
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	b25b      	sxtb	r3, r3
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	b25b      	sxtb	r3, r3
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	f1c3 0301 	rsb	r3, r3, #1
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	461a      	mov	r2, r3
 8000bcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bd0:	4823      	ldr	r0, [pc, #140]	; (8000c60 <displayLedMatrix+0x5d4>)
 8000bd2:	f001 fa87 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	105b      	asrs	r3, r3, #1
 8000bda:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1 - (col & shift));
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	b25a      	sxtb	r2, r3
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	b25b      	sxtb	r3, r3
 8000be4:	4013      	ands	r3, r2
 8000be6:	b25b      	sxtb	r3, r3
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	f1c3 0301 	rsb	r3, r3, #1
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bf6:	481a      	ldr	r0, [pc, #104]	; (8000c60 <displayLedMatrix+0x5d4>)
 8000bf8:	f001 fa74 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	105b      	asrs	r3, r3, #1
 8000c00:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1 - (col & shift));
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	b25a      	sxtb	r2, r3
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	b25b      	sxtb	r3, r3
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	b25b      	sxtb	r3, r3
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	f1c3 0301 	rsb	r3, r3, #1
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	461a      	mov	r2, r3
 8000c18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c1c:	4810      	ldr	r0, [pc, #64]	; (8000c60 <displayLedMatrix+0x5d4>)
 8000c1e:	f001 fa61 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	105b      	asrs	r3, r3, #1
 8000c26:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1 - (col & shift));
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	b25a      	sxtb	r2, r3
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	b25b      	sxtb	r3, r3
 8000c30:	4013      	ands	r3, r2
 8000c32:	b25b      	sxtb	r3, r3
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	f1c3 0301 	rsb	r3, r3, #1
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c42:	4807      	ldr	r0, [pc, #28]	; (8000c60 <displayLedMatrix+0x5d4>)
 8000c44:	f001 fa4e 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	105b      	asrs	r3, r3, #1
 8000c4c:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1 - (col & shift));
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	b25a      	sxtb	r2, r3
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	b25b      	sxtb	r3, r3
 8000c56:	4013      	ands	r3, r2
 8000c58:	b25b      	sxtb	r3, r3
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	e004      	b.n	8000c68 <displayLedMatrix+0x5dc>
 8000c5e:	bf00      	nop
 8000c60:	40010800 	.word	0x40010800
 8000c64:	40010c00 	.word	0x40010c00
 8000c68:	f1c3 0301 	rsb	r3, r3, #1
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	461a      	mov	r2, r3
 8000c70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c74:	48b1      	ldr	r0, [pc, #708]	; (8000f3c <displayLedMatrix+0x8b0>)
 8000c76:	f001 fa35 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	105b      	asrs	r3, r3, #1
 8000c7e:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1 - (col & shift));
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	b25a      	sxtb	r2, r3
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	b25b      	sxtb	r3, r3
 8000c88:	4013      	ands	r3, r2
 8000c8a:	b25b      	sxtb	r3, r3
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	f1c3 0301 	rsb	r3, r3, #1
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	461a      	mov	r2, r3
 8000c96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c9a:	48a8      	ldr	r0, [pc, #672]	; (8000f3c <displayLedMatrix+0x8b0>)
 8000c9c:	f001 fa22 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	105b      	asrs	r3, r3, #1
 8000ca4:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1 - (col & shift));
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	b25a      	sxtb	r2, r3
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	b25b      	sxtb	r3, r3
 8000cae:	4013      	ands	r3, r2
 8000cb0:	b25b      	sxtb	r3, r3
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	f1c3 0301 	rsb	r3, r3, #1
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	461a      	mov	r2, r3
 8000cbc:	2108      	movs	r1, #8
 8000cbe:	489f      	ldr	r0, [pc, #636]	; (8000f3c <displayLedMatrix+0x8b0>)
 8000cc0:	f001 fa10 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	105b      	asrs	r3, r3, #1
 8000cc8:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin,  1 - (col & shift));
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	b25a      	sxtb	r2, r3
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	b25b      	sxtb	r3, r3
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	b25b      	sxtb	r3, r3
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	f1c3 0301 	rsb	r3, r3, #1
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	461a      	mov	r2, r3
 8000ce0:	2104      	movs	r1, #4
 8000ce2:	4896      	ldr	r0, [pc, #600]	; (8000f3c <displayLedMatrix+0x8b0>)
 8000ce4:	f001 f9fe 	bl	80020e4 <HAL_GPIO_WritePin>
	}

	if(row == 4){// enable row 4
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	f040 80c3 	bne.w	8000e76 <displayLedMatrix+0x7ea>
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, GPIO_PIN_SET);
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cf6:	4892      	ldr	r0, [pc, #584]	; (8000f40 <displayLedMatrix+0x8b4>)
 8000cf8:	f001 f9f4 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, GPIO_PIN_SET);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d02:	488f      	ldr	r0, [pc, #572]	; (8000f40 <displayLedMatrix+0x8b4>)
 8000d04:	f001 f9ee 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, GPIO_PIN_SET);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d0e:	488c      	ldr	r0, [pc, #560]	; (8000f40 <displayLedMatrix+0x8b4>)
 8000d10:	f001 f9e8 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, GPIO_PIN_SET);
 8000d14:	2201      	movs	r2, #1
 8000d16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d1a:	4889      	ldr	r0, [pc, #548]	; (8000f40 <displayLedMatrix+0x8b4>)
 8000d1c:	f001 f9e2 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, GPIO_PIN_RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d26:	4886      	ldr	r0, [pc, #536]	; (8000f40 <displayLedMatrix+0x8b4>)
 8000d28:	f001 f9dc 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, GPIO_PIN_SET);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d32:	4883      	ldr	r0, [pc, #524]	; (8000f40 <displayLedMatrix+0x8b4>)
 8000d34:	f001 f9d6 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, GPIO_PIN_SET);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d3e:	4880      	ldr	r0, [pc, #512]	; (8000f40 <displayLedMatrix+0x8b4>)
 8000d40:	f001 f9d0 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, GPIO_PIN_SET);
 8000d44:	2201      	movs	r2, #1
 8000d46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d4a:	487d      	ldr	r0, [pc, #500]	; (8000f40 <displayLedMatrix+0x8b4>)
 8000d4c:	f001 f9ca 	bl	80020e4 <HAL_GPIO_WritePin>

		// get bit by bit of buffer, then assign to ENM-PIN to control COL-PIN
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1 - (col & shift));
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	b25a      	sxtb	r2, r3
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	b25b      	sxtb	r3, r3
 8000d58:	4013      	ands	r3, r2
 8000d5a:	b25b      	sxtb	r3, r3
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	f1c3 0301 	rsb	r3, r3, #1
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	461a      	mov	r2, r3
 8000d66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d6a:	4874      	ldr	r0, [pc, #464]	; (8000f3c <displayLedMatrix+0x8b0>)
 8000d6c:	f001 f9ba 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	105b      	asrs	r3, r3, #1
 8000d74:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1 - (col & shift));
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	b25a      	sxtb	r2, r3
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	b25b      	sxtb	r3, r3
 8000d7e:	4013      	ands	r3, r2
 8000d80:	b25b      	sxtb	r3, r3
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	f1c3 0301 	rsb	r3, r3, #1
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d90:	486a      	ldr	r0, [pc, #424]	; (8000f3c <displayLedMatrix+0x8b0>)
 8000d92:	f001 f9a7 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	105b      	asrs	r3, r3, #1
 8000d9a:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1 - (col & shift));
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	b25a      	sxtb	r2, r3
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	b25b      	sxtb	r3, r3
 8000da4:	4013      	ands	r3, r2
 8000da6:	b25b      	sxtb	r3, r3
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	f1c3 0301 	rsb	r3, r3, #1
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	461a      	mov	r2, r3
 8000db2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000db6:	4861      	ldr	r0, [pc, #388]	; (8000f3c <displayLedMatrix+0x8b0>)
 8000db8:	f001 f994 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	105b      	asrs	r3, r3, #1
 8000dc0:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1 - (col & shift));
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	b25a      	sxtb	r2, r3
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	b25b      	sxtb	r3, r3
 8000dca:	4013      	ands	r3, r2
 8000dcc:	b25b      	sxtb	r3, r3
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	f1c3 0301 	rsb	r3, r3, #1
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ddc:	4857      	ldr	r0, [pc, #348]	; (8000f3c <displayLedMatrix+0x8b0>)
 8000dde:	f001 f981 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	105b      	asrs	r3, r3, #1
 8000de6:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1 - (col & shift));
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	b25a      	sxtb	r2, r3
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	b25b      	sxtb	r3, r3
 8000df0:	4013      	ands	r3, r2
 8000df2:	b25b      	sxtb	r3, r3
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	f1c3 0301 	rsb	r3, r3, #1
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e02:	484e      	ldr	r0, [pc, #312]	; (8000f3c <displayLedMatrix+0x8b0>)
 8000e04:	f001 f96e 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	105b      	asrs	r3, r3, #1
 8000e0c:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1 - (col & shift));
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	b25a      	sxtb	r2, r3
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	b25b      	sxtb	r3, r3
 8000e16:	4013      	ands	r3, r2
 8000e18:	b25b      	sxtb	r3, r3
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	f1c3 0301 	rsb	r3, r3, #1
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	461a      	mov	r2, r3
 8000e24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e28:	4844      	ldr	r0, [pc, #272]	; (8000f3c <displayLedMatrix+0x8b0>)
 8000e2a:	f001 f95b 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	105b      	asrs	r3, r3, #1
 8000e32:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1 - (col & shift));
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	b25a      	sxtb	r2, r3
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	b25b      	sxtb	r3, r3
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	b25b      	sxtb	r3, r3
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	f1c3 0301 	rsb	r3, r3, #1
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	461a      	mov	r2, r3
 8000e4a:	2108      	movs	r1, #8
 8000e4c:	483b      	ldr	r0, [pc, #236]	; (8000f3c <displayLedMatrix+0x8b0>)
 8000e4e:	f001 f949 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	105b      	asrs	r3, r3, #1
 8000e56:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin,  1 - (col & shift));
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	b25a      	sxtb	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	b25b      	sxtb	r3, r3
 8000e60:	4013      	ands	r3, r2
 8000e62:	b25b      	sxtb	r3, r3
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	f1c3 0301 	rsb	r3, r3, #1
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	2104      	movs	r1, #4
 8000e70:	4832      	ldr	r0, [pc, #200]	; (8000f3c <displayLedMatrix+0x8b0>)
 8000e72:	f001 f937 	bl	80020e4 <HAL_GPIO_WritePin>
	}

	if(row == 5){// enable row 5
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b05      	cmp	r3, #5
 8000e7a:	f040 80c9 	bne.w	8001010 <displayLedMatrix+0x984>
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, GPIO_PIN_SET);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e84:	482e      	ldr	r0, [pc, #184]	; (8000f40 <displayLedMatrix+0x8b4>)
 8000e86:	f001 f92d 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, GPIO_PIN_SET);
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e90:	482b      	ldr	r0, [pc, #172]	; (8000f40 <displayLedMatrix+0x8b4>)
 8000e92:	f001 f927 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, GPIO_PIN_SET);
 8000e96:	2201      	movs	r2, #1
 8000e98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e9c:	4828      	ldr	r0, [pc, #160]	; (8000f40 <displayLedMatrix+0x8b4>)
 8000e9e:	f001 f921 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, GPIO_PIN_SET);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ea8:	4825      	ldr	r0, [pc, #148]	; (8000f40 <displayLedMatrix+0x8b4>)
 8000eaa:	f001 f91b 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, GPIO_PIN_SET);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eb4:	4822      	ldr	r0, [pc, #136]	; (8000f40 <displayLedMatrix+0x8b4>)
 8000eb6:	f001 f915 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, GPIO_PIN_RESET);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ec0:	481f      	ldr	r0, [pc, #124]	; (8000f40 <displayLedMatrix+0x8b4>)
 8000ec2:	f001 f90f 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, GPIO_PIN_SET);
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ecc:	481c      	ldr	r0, [pc, #112]	; (8000f40 <displayLedMatrix+0x8b4>)
 8000ece:	f001 f909 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, GPIO_PIN_SET);
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ed8:	4819      	ldr	r0, [pc, #100]	; (8000f40 <displayLedMatrix+0x8b4>)
 8000eda:	f001 f903 	bl	80020e4 <HAL_GPIO_WritePin>

		// get bit by bit of buffer, then assign to ENM-PIN to control COL-PIN
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1 - (col & shift));
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	b25a      	sxtb	r2, r3
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	b25b      	sxtb	r3, r3
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	b25b      	sxtb	r3, r3
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	f1c3 0301 	rsb	r3, r3, #1
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ef8:	4810      	ldr	r0, [pc, #64]	; (8000f3c <displayLedMatrix+0x8b0>)
 8000efa:	f001 f8f3 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	105b      	asrs	r3, r3, #1
 8000f02:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1 - (col & shift));
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	b25a      	sxtb	r2, r3
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	b25b      	sxtb	r3, r3
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	b25b      	sxtb	r3, r3
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	f1c3 0301 	rsb	r3, r3, #1
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	461a      	mov	r2, r3
 8000f1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f1e:	4807      	ldr	r0, [pc, #28]	; (8000f3c <displayLedMatrix+0x8b0>)
 8000f20:	f001 f8e0 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	105b      	asrs	r3, r3, #1
 8000f28:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1 - (col & shift));
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	b25a      	sxtb	r2, r3
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	b25b      	sxtb	r3, r3
 8000f32:	4013      	ands	r3, r2
 8000f34:	b25b      	sxtb	r3, r3
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	e004      	b.n	8000f44 <displayLedMatrix+0x8b8>
 8000f3a:	bf00      	nop
 8000f3c:	40010800 	.word	0x40010800
 8000f40:	40010c00 	.word	0x40010c00
 8000f44:	f1c3 0301 	rsb	r3, r3, #1
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f50:	48b1      	ldr	r0, [pc, #708]	; (8001218 <displayLedMatrix+0xb8c>)
 8000f52:	f001 f8c7 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	105b      	asrs	r3, r3, #1
 8000f5a:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1 - (col & shift));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	b25a      	sxtb	r2, r3
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	b25b      	sxtb	r3, r3
 8000f64:	4013      	ands	r3, r2
 8000f66:	b25b      	sxtb	r3, r3
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	f1c3 0301 	rsb	r3, r3, #1
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	461a      	mov	r2, r3
 8000f72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f76:	48a8      	ldr	r0, [pc, #672]	; (8001218 <displayLedMatrix+0xb8c>)
 8000f78:	f001 f8b4 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	105b      	asrs	r3, r3, #1
 8000f80:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1 - (col & shift));
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	b25a      	sxtb	r2, r3
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	b25b      	sxtb	r3, r3
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	b25b      	sxtb	r3, r3
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	f1c3 0301 	rsb	r3, r3, #1
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	461a      	mov	r2, r3
 8000f98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f9c:	489e      	ldr	r0, [pc, #632]	; (8001218 <displayLedMatrix+0xb8c>)
 8000f9e:	f001 f8a1 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	105b      	asrs	r3, r3, #1
 8000fa6:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1 - (col & shift));
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	b25a      	sxtb	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	b25b      	sxtb	r3, r3
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	b25b      	sxtb	r3, r3
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	f1c3 0301 	rsb	r3, r3, #1
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fc2:	4895      	ldr	r0, [pc, #596]	; (8001218 <displayLedMatrix+0xb8c>)
 8000fc4:	f001 f88e 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	105b      	asrs	r3, r3, #1
 8000fcc:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1 - (col & shift));
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	b25a      	sxtb	r2, r3
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	b25b      	sxtb	r3, r3
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	b25b      	sxtb	r3, r3
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	f1c3 0301 	rsb	r3, r3, #1
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	2108      	movs	r1, #8
 8000fe6:	488c      	ldr	r0, [pc, #560]	; (8001218 <displayLedMatrix+0xb8c>)
 8000fe8:	f001 f87c 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	105b      	asrs	r3, r3, #1
 8000ff0:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin,  1 - (col & shift));
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	b25a      	sxtb	r2, r3
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	b25b      	sxtb	r3, r3
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	b25b      	sxtb	r3, r3
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	f1c3 0301 	rsb	r3, r3, #1
 8001004:	b2db      	uxtb	r3, r3
 8001006:	461a      	mov	r2, r3
 8001008:	2104      	movs	r1, #4
 800100a:	4883      	ldr	r0, [pc, #524]	; (8001218 <displayLedMatrix+0xb8c>)
 800100c:	f001 f86a 	bl	80020e4 <HAL_GPIO_WritePin>
	}

	if(row == 6){// enable row 6
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b06      	cmp	r3, #6
 8001014:	f040 80c3 	bne.w	800119e <displayLedMatrix+0xb12>
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, GPIO_PIN_SET);
 8001018:	2201      	movs	r2, #1
 800101a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800101e:	487f      	ldr	r0, [pc, #508]	; (800121c <displayLedMatrix+0xb90>)
 8001020:	f001 f860 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, GPIO_PIN_SET);
 8001024:	2201      	movs	r2, #1
 8001026:	f44f 7100 	mov.w	r1, #512	; 0x200
 800102a:	487c      	ldr	r0, [pc, #496]	; (800121c <displayLedMatrix+0xb90>)
 800102c:	f001 f85a 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, GPIO_PIN_SET);
 8001030:	2201      	movs	r2, #1
 8001032:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001036:	4879      	ldr	r0, [pc, #484]	; (800121c <displayLedMatrix+0xb90>)
 8001038:	f001 f854 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, GPIO_PIN_SET);
 800103c:	2201      	movs	r2, #1
 800103e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001042:	4876      	ldr	r0, [pc, #472]	; (800121c <displayLedMatrix+0xb90>)
 8001044:	f001 f84e 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, GPIO_PIN_SET);
 8001048:	2201      	movs	r2, #1
 800104a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800104e:	4873      	ldr	r0, [pc, #460]	; (800121c <displayLedMatrix+0xb90>)
 8001050:	f001 f848 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800105a:	4870      	ldr	r0, [pc, #448]	; (800121c <displayLedMatrix+0xb90>)
 800105c:	f001 f842 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, GPIO_PIN_RESET);
 8001060:	2200      	movs	r2, #0
 8001062:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001066:	486d      	ldr	r0, [pc, #436]	; (800121c <displayLedMatrix+0xb90>)
 8001068:	f001 f83c 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, GPIO_PIN_SET);
 800106c:	2201      	movs	r2, #1
 800106e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001072:	486a      	ldr	r0, [pc, #424]	; (800121c <displayLedMatrix+0xb90>)
 8001074:	f001 f836 	bl	80020e4 <HAL_GPIO_WritePin>

		// get bit by bit of buffer, then assign to ENM-PIN to control COL-PIN
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1 - (col & shift));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	b25a      	sxtb	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	b25b      	sxtb	r3, r3
 8001080:	4013      	ands	r3, r2
 8001082:	b25b      	sxtb	r3, r3
 8001084:	b2db      	uxtb	r3, r3
 8001086:	f1c3 0301 	rsb	r3, r3, #1
 800108a:	b2db      	uxtb	r3, r3
 800108c:	461a      	mov	r2, r3
 800108e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001092:	4861      	ldr	r0, [pc, #388]	; (8001218 <displayLedMatrix+0xb8c>)
 8001094:	f001 f826 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	105b      	asrs	r3, r3, #1
 800109c:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1 - (col & shift));
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	b25a      	sxtb	r2, r3
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	b25b      	sxtb	r3, r3
 80010a6:	4013      	ands	r3, r2
 80010a8:	b25b      	sxtb	r3, r3
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	f1c3 0301 	rsb	r3, r3, #1
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	461a      	mov	r2, r3
 80010b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010b8:	4857      	ldr	r0, [pc, #348]	; (8001218 <displayLedMatrix+0xb8c>)
 80010ba:	f001 f813 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	105b      	asrs	r3, r3, #1
 80010c2:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1 - (col & shift));
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	b25a      	sxtb	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	b25b      	sxtb	r3, r3
 80010cc:	4013      	ands	r3, r2
 80010ce:	b25b      	sxtb	r3, r3
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	f1c3 0301 	rsb	r3, r3, #1
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	461a      	mov	r2, r3
 80010da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010de:	484e      	ldr	r0, [pc, #312]	; (8001218 <displayLedMatrix+0xb8c>)
 80010e0:	f001 f800 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	105b      	asrs	r3, r3, #1
 80010e8:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1 - (col & shift));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	b25a      	sxtb	r2, r3
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	b25b      	sxtb	r3, r3
 80010f2:	4013      	ands	r3, r2
 80010f4:	b25b      	sxtb	r3, r3
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	f1c3 0301 	rsb	r3, r3, #1
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	461a      	mov	r2, r3
 8001100:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001104:	4844      	ldr	r0, [pc, #272]	; (8001218 <displayLedMatrix+0xb8c>)
 8001106:	f000 ffed 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	105b      	asrs	r3, r3, #1
 800110e:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1 - (col & shift));
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	b25a      	sxtb	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	b25b      	sxtb	r3, r3
 8001118:	4013      	ands	r3, r2
 800111a:	b25b      	sxtb	r3, r3
 800111c:	b2db      	uxtb	r3, r3
 800111e:	f1c3 0301 	rsb	r3, r3, #1
 8001122:	b2db      	uxtb	r3, r3
 8001124:	461a      	mov	r2, r3
 8001126:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800112a:	483b      	ldr	r0, [pc, #236]	; (8001218 <displayLedMatrix+0xb8c>)
 800112c:	f000 ffda 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	105b      	asrs	r3, r3, #1
 8001134:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1 - (col & shift));
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	b25a      	sxtb	r2, r3
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	b25b      	sxtb	r3, r3
 800113e:	4013      	ands	r3, r2
 8001140:	b25b      	sxtb	r3, r3
 8001142:	b2db      	uxtb	r3, r3
 8001144:	f1c3 0301 	rsb	r3, r3, #1
 8001148:	b2db      	uxtb	r3, r3
 800114a:	461a      	mov	r2, r3
 800114c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001150:	4831      	ldr	r0, [pc, #196]	; (8001218 <displayLedMatrix+0xb8c>)
 8001152:	f000 ffc7 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	105b      	asrs	r3, r3, #1
 800115a:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1 - (col & shift));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	b25a      	sxtb	r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	b25b      	sxtb	r3, r3
 8001164:	4013      	ands	r3, r2
 8001166:	b25b      	sxtb	r3, r3
 8001168:	b2db      	uxtb	r3, r3
 800116a:	f1c3 0301 	rsb	r3, r3, #1
 800116e:	b2db      	uxtb	r3, r3
 8001170:	461a      	mov	r2, r3
 8001172:	2108      	movs	r1, #8
 8001174:	4828      	ldr	r0, [pc, #160]	; (8001218 <displayLedMatrix+0xb8c>)
 8001176:	f000 ffb5 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	105b      	asrs	r3, r3, #1
 800117e:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin,  1 - (col & shift));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	b25a      	sxtb	r2, r3
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	b25b      	sxtb	r3, r3
 8001188:	4013      	ands	r3, r2
 800118a:	b25b      	sxtb	r3, r3
 800118c:	b2db      	uxtb	r3, r3
 800118e:	f1c3 0301 	rsb	r3, r3, #1
 8001192:	b2db      	uxtb	r3, r3
 8001194:	461a      	mov	r2, r3
 8001196:	2104      	movs	r1, #4
 8001198:	481f      	ldr	r0, [pc, #124]	; (8001218 <displayLedMatrix+0xb8c>)
 800119a:	f000 ffa3 	bl	80020e4 <HAL_GPIO_WritePin>
	}

	if(row == 7){// enable row 7
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b07      	cmp	r3, #7
 80011a2:	f040 80c9 	bne.w	8001338 <displayLedMatrix+0xcac>
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, GPIO_PIN_SET);
 80011a6:	2201      	movs	r2, #1
 80011a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ac:	481b      	ldr	r0, [pc, #108]	; (800121c <displayLedMatrix+0xb90>)
 80011ae:	f000 ff99 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, GPIO_PIN_SET);
 80011b2:	2201      	movs	r2, #1
 80011b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011b8:	4818      	ldr	r0, [pc, #96]	; (800121c <displayLedMatrix+0xb90>)
 80011ba:	f000 ff93 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, GPIO_PIN_SET);
 80011be:	2201      	movs	r2, #1
 80011c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011c4:	4815      	ldr	r0, [pc, #84]	; (800121c <displayLedMatrix+0xb90>)
 80011c6:	f000 ff8d 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, GPIO_PIN_SET);
 80011ca:	2201      	movs	r2, #1
 80011cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011d0:	4812      	ldr	r0, [pc, #72]	; (800121c <displayLedMatrix+0xb90>)
 80011d2:	f000 ff87 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, GPIO_PIN_SET);
 80011d6:	2201      	movs	r2, #1
 80011d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011dc:	480f      	ldr	r0, [pc, #60]	; (800121c <displayLedMatrix+0xb90>)
 80011de:	f000 ff81 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, GPIO_PIN_SET);
 80011e2:	2201      	movs	r2, #1
 80011e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011e8:	480c      	ldr	r0, [pc, #48]	; (800121c <displayLedMatrix+0xb90>)
 80011ea:	f000 ff7b 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, GPIO_PIN_SET);
 80011ee:	2201      	movs	r2, #1
 80011f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011f4:	4809      	ldr	r0, [pc, #36]	; (800121c <displayLedMatrix+0xb90>)
 80011f6:	f000 ff75 	bl	80020e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, GPIO_PIN_RESET);
 80011fa:	2200      	movs	r2, #0
 80011fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001200:	4806      	ldr	r0, [pc, #24]	; (800121c <displayLedMatrix+0xb90>)
 8001202:	f000 ff6f 	bl	80020e4 <HAL_GPIO_WritePin>

		// get bit by bit of buffer, then assign to ENM-PIN to control COL-PIN
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1 - (col & shift));
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	b25a      	sxtb	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	b25b      	sxtb	r3, r3
 800120e:	4013      	ands	r3, r2
 8001210:	b25b      	sxtb	r3, r3
 8001212:	b2db      	uxtb	r3, r3
 8001214:	e004      	b.n	8001220 <displayLedMatrix+0xb94>
 8001216:	bf00      	nop
 8001218:	40010800 	.word	0x40010800
 800121c:	40010c00 	.word	0x40010c00
 8001220:	f1c3 0301 	rsb	r3, r3, #1
 8001224:	b2db      	uxtb	r3, r3
 8001226:	461a      	mov	r2, r3
 8001228:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800122c:	4844      	ldr	r0, [pc, #272]	; (8001340 <displayLedMatrix+0xcb4>)
 800122e:	f000 ff59 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	105b      	asrs	r3, r3, #1
 8001236:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1 - (col & shift));
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	b25a      	sxtb	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	b25b      	sxtb	r3, r3
 8001240:	4013      	ands	r3, r2
 8001242:	b25b      	sxtb	r3, r3
 8001244:	b2db      	uxtb	r3, r3
 8001246:	f1c3 0301 	rsb	r3, r3, #1
 800124a:	b2db      	uxtb	r3, r3
 800124c:	461a      	mov	r2, r3
 800124e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001252:	483b      	ldr	r0, [pc, #236]	; (8001340 <displayLedMatrix+0xcb4>)
 8001254:	f000 ff46 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	105b      	asrs	r3, r3, #1
 800125c:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1 - (col & shift));
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	b25a      	sxtb	r2, r3
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	b25b      	sxtb	r3, r3
 8001266:	4013      	ands	r3, r2
 8001268:	b25b      	sxtb	r3, r3
 800126a:	b2db      	uxtb	r3, r3
 800126c:	f1c3 0301 	rsb	r3, r3, #1
 8001270:	b2db      	uxtb	r3, r3
 8001272:	461a      	mov	r2, r3
 8001274:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001278:	4831      	ldr	r0, [pc, #196]	; (8001340 <displayLedMatrix+0xcb4>)
 800127a:	f000 ff33 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	105b      	asrs	r3, r3, #1
 8001282:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1 - (col & shift));
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	b25a      	sxtb	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	b25b      	sxtb	r3, r3
 800128c:	4013      	ands	r3, r2
 800128e:	b25b      	sxtb	r3, r3
 8001290:	b2db      	uxtb	r3, r3
 8001292:	f1c3 0301 	rsb	r3, r3, #1
 8001296:	b2db      	uxtb	r3, r3
 8001298:	461a      	mov	r2, r3
 800129a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800129e:	4828      	ldr	r0, [pc, #160]	; (8001340 <displayLedMatrix+0xcb4>)
 80012a0:	f000 ff20 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	105b      	asrs	r3, r3, #1
 80012a8:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1 - (col & shift));
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	b25a      	sxtb	r2, r3
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	b25b      	sxtb	r3, r3
 80012b2:	4013      	ands	r3, r2
 80012b4:	b25b      	sxtb	r3, r3
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	f1c3 0301 	rsb	r3, r3, #1
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	461a      	mov	r2, r3
 80012c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012c4:	481e      	ldr	r0, [pc, #120]	; (8001340 <displayLedMatrix+0xcb4>)
 80012c6:	f000 ff0d 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	105b      	asrs	r3, r3, #1
 80012ce:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1 - (col & shift));
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	b25a      	sxtb	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	b25b      	sxtb	r3, r3
 80012d8:	4013      	ands	r3, r2
 80012da:	b25b      	sxtb	r3, r3
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	f1c3 0301 	rsb	r3, r3, #1
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	461a      	mov	r2, r3
 80012e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012ea:	4815      	ldr	r0, [pc, #84]	; (8001340 <displayLedMatrix+0xcb4>)
 80012ec:	f000 fefa 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	105b      	asrs	r3, r3, #1
 80012f4:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1 - (col & shift));
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	b25a      	sxtb	r2, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	b25b      	sxtb	r3, r3
 80012fe:	4013      	ands	r3, r2
 8001300:	b25b      	sxtb	r3, r3
 8001302:	b2db      	uxtb	r3, r3
 8001304:	f1c3 0301 	rsb	r3, r3, #1
 8001308:	b2db      	uxtb	r3, r3
 800130a:	461a      	mov	r2, r3
 800130c:	2108      	movs	r1, #8
 800130e:	480c      	ldr	r0, [pc, #48]	; (8001340 <displayLedMatrix+0xcb4>)
 8001310:	f000 fee8 	bl	80020e4 <HAL_GPIO_WritePin>
		col = col >> 1;
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	105b      	asrs	r3, r3, #1
 8001318:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin,  1 - (col & shift));
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	b25a      	sxtb	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	b25b      	sxtb	r3, r3
 8001322:	4013      	ands	r3, r2
 8001324:	b25b      	sxtb	r3, r3
 8001326:	b2db      	uxtb	r3, r3
 8001328:	f1c3 0301 	rsb	r3, r3, #1
 800132c:	b2db      	uxtb	r3, r3
 800132e:	461a      	mov	r2, r3
 8001330:	2104      	movs	r1, #4
 8001332:	4803      	ldr	r0, [pc, #12]	; (8001340 <displayLedMatrix+0xcb4>)
 8001334:	f000 fed6 	bl	80020e4 <HAL_GPIO_WritePin>
	}

}
 8001338:	bf00      	nop
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40010800 	.word	0x40010800

08001344 <updateLedMatrix>:

void updateLedMatrix(int index){
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b07      	cmp	r3, #7
 8001350:	d84a      	bhi.n	80013e8 <updateLedMatrix+0xa4>
 8001352:	a201      	add	r2, pc, #4	; (adr r2, 8001358 <updateLedMatrix+0x14>)
 8001354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001358:	08001379 	.word	0x08001379
 800135c:	08001387 	.word	0x08001387
 8001360:	08001395 	.word	0x08001395
 8001364:	080013a3 	.word	0x080013a3
 8001368:	080013b1 	.word	0x080013b1
 800136c:	080013bf 	.word	0x080013bf
 8001370:	080013cd 	.word	0x080013cd
 8001374:	080013db 	.word	0x080013db
	switch(index){
	case 0:// display row 0 of led matrix
		displayLedMatrix(0, matrix_buffer[0]);
 8001378:	4b1e      	ldr	r3, [pc, #120]	; (80013f4 <updateLedMatrix+0xb0>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	4619      	mov	r1, r3
 800137e:	2000      	movs	r0, #0
 8001380:	f7ff f984 	bl	800068c <displayLedMatrix>
		break;
 8001384:	e031      	b.n	80013ea <updateLedMatrix+0xa6>
	case 1:// display row 1 of led matrix
		displayLedMatrix(1, matrix_buffer[1]);
 8001386:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <updateLedMatrix+0xb0>)
 8001388:	785b      	ldrb	r3, [r3, #1]
 800138a:	4619      	mov	r1, r3
 800138c:	2001      	movs	r0, #1
 800138e:	f7ff f97d 	bl	800068c <displayLedMatrix>
		break;
 8001392:	e02a      	b.n	80013ea <updateLedMatrix+0xa6>
	case 2:// display row 2 of led matrix
		displayLedMatrix(2, matrix_buffer[2]);
 8001394:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <updateLedMatrix+0xb0>)
 8001396:	789b      	ldrb	r3, [r3, #2]
 8001398:	4619      	mov	r1, r3
 800139a:	2002      	movs	r0, #2
 800139c:	f7ff f976 	bl	800068c <displayLedMatrix>
		break;
 80013a0:	e023      	b.n	80013ea <updateLedMatrix+0xa6>
	case 3:// display row 3 of led matrix
		displayLedMatrix(3, matrix_buffer[3]);
 80013a2:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <updateLedMatrix+0xb0>)
 80013a4:	78db      	ldrb	r3, [r3, #3]
 80013a6:	4619      	mov	r1, r3
 80013a8:	2003      	movs	r0, #3
 80013aa:	f7ff f96f 	bl	800068c <displayLedMatrix>
		break;
 80013ae:	e01c      	b.n	80013ea <updateLedMatrix+0xa6>
	case 4:// display row 4 of led matrix
		displayLedMatrix(4, matrix_buffer[4]);
 80013b0:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <updateLedMatrix+0xb0>)
 80013b2:	791b      	ldrb	r3, [r3, #4]
 80013b4:	4619      	mov	r1, r3
 80013b6:	2004      	movs	r0, #4
 80013b8:	f7ff f968 	bl	800068c <displayLedMatrix>
		break;
 80013bc:	e015      	b.n	80013ea <updateLedMatrix+0xa6>
	case 5:// display row 5 of led matrix
		displayLedMatrix(5, matrix_buffer[5]);
 80013be:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <updateLedMatrix+0xb0>)
 80013c0:	795b      	ldrb	r3, [r3, #5]
 80013c2:	4619      	mov	r1, r3
 80013c4:	2005      	movs	r0, #5
 80013c6:	f7ff f961 	bl	800068c <displayLedMatrix>
		break;
 80013ca:	e00e      	b.n	80013ea <updateLedMatrix+0xa6>
	case 6:// display row 6 of led matrix
		displayLedMatrix(6, matrix_buffer[6]);
 80013cc:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <updateLedMatrix+0xb0>)
 80013ce:	799b      	ldrb	r3, [r3, #6]
 80013d0:	4619      	mov	r1, r3
 80013d2:	2006      	movs	r0, #6
 80013d4:	f7ff f95a 	bl	800068c <displayLedMatrix>
		break;
 80013d8:	e007      	b.n	80013ea <updateLedMatrix+0xa6>
	case 7:// display row 7 of led matrix
		displayLedMatrix(7, matrix_buffer[7]);
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <updateLedMatrix+0xb0>)
 80013dc:	79db      	ldrb	r3, [r3, #7]
 80013de:	4619      	mov	r1, r3
 80013e0:	2007      	movs	r0, #7
 80013e2:	f7ff f953 	bl	800068c <displayLedMatrix>
		break;
 80013e6:	e000      	b.n	80013ea <updateLedMatrix+0xa6>
	default:
		break;
 80013e8:	bf00      	nop
	}
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000010 	.word	0x20000010

080013f8 <updateMatrix_buffer>:

void updateMatrix_buffer(){
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
	// shift bit of every buffer from right to left
	matrix_buffer[0] = (matrix_buffer[0] << 1) | (matrix_buffer[0] >> 7);
 80013fc:	4b39      	ldr	r3, [pc, #228]	; (80014e4 <updateMatrix_buffer+0xec>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	b25a      	sxtb	r2, r3
 8001404:	4b37      	ldr	r3, [pc, #220]	; (80014e4 <updateMatrix_buffer+0xec>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	09db      	lsrs	r3, r3, #7
 800140a:	b2db      	uxtb	r3, r3
 800140c:	b25b      	sxtb	r3, r3
 800140e:	4313      	orrs	r3, r2
 8001410:	b25b      	sxtb	r3, r3
 8001412:	b2da      	uxtb	r2, r3
 8001414:	4b33      	ldr	r3, [pc, #204]	; (80014e4 <updateMatrix_buffer+0xec>)
 8001416:	701a      	strb	r2, [r3, #0]
	matrix_buffer[1] = (matrix_buffer[1] << 1) | (matrix_buffer[1] >> 7);
 8001418:	4b32      	ldr	r3, [pc, #200]	; (80014e4 <updateMatrix_buffer+0xec>)
 800141a:	785b      	ldrb	r3, [r3, #1]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	b25a      	sxtb	r2, r3
 8001420:	4b30      	ldr	r3, [pc, #192]	; (80014e4 <updateMatrix_buffer+0xec>)
 8001422:	785b      	ldrb	r3, [r3, #1]
 8001424:	09db      	lsrs	r3, r3, #7
 8001426:	b2db      	uxtb	r3, r3
 8001428:	b25b      	sxtb	r3, r3
 800142a:	4313      	orrs	r3, r2
 800142c:	b25b      	sxtb	r3, r3
 800142e:	b2da      	uxtb	r2, r3
 8001430:	4b2c      	ldr	r3, [pc, #176]	; (80014e4 <updateMatrix_buffer+0xec>)
 8001432:	705a      	strb	r2, [r3, #1]
	matrix_buffer[2] = (matrix_buffer[2] << 1) | (matrix_buffer[2] >> 7);
 8001434:	4b2b      	ldr	r3, [pc, #172]	; (80014e4 <updateMatrix_buffer+0xec>)
 8001436:	789b      	ldrb	r3, [r3, #2]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	b25a      	sxtb	r2, r3
 800143c:	4b29      	ldr	r3, [pc, #164]	; (80014e4 <updateMatrix_buffer+0xec>)
 800143e:	789b      	ldrb	r3, [r3, #2]
 8001440:	09db      	lsrs	r3, r3, #7
 8001442:	b2db      	uxtb	r3, r3
 8001444:	b25b      	sxtb	r3, r3
 8001446:	4313      	orrs	r3, r2
 8001448:	b25b      	sxtb	r3, r3
 800144a:	b2da      	uxtb	r2, r3
 800144c:	4b25      	ldr	r3, [pc, #148]	; (80014e4 <updateMatrix_buffer+0xec>)
 800144e:	709a      	strb	r2, [r3, #2]
	matrix_buffer[3] = (matrix_buffer[3] << 1) | (matrix_buffer[3] >> 7);
 8001450:	4b24      	ldr	r3, [pc, #144]	; (80014e4 <updateMatrix_buffer+0xec>)
 8001452:	78db      	ldrb	r3, [r3, #3]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	b25a      	sxtb	r2, r3
 8001458:	4b22      	ldr	r3, [pc, #136]	; (80014e4 <updateMatrix_buffer+0xec>)
 800145a:	78db      	ldrb	r3, [r3, #3]
 800145c:	09db      	lsrs	r3, r3, #7
 800145e:	b2db      	uxtb	r3, r3
 8001460:	b25b      	sxtb	r3, r3
 8001462:	4313      	orrs	r3, r2
 8001464:	b25b      	sxtb	r3, r3
 8001466:	b2da      	uxtb	r2, r3
 8001468:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <updateMatrix_buffer+0xec>)
 800146a:	70da      	strb	r2, [r3, #3]
	matrix_buffer[4] = (matrix_buffer[4] << 1) | (matrix_buffer[4] >> 7);
 800146c:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <updateMatrix_buffer+0xec>)
 800146e:	791b      	ldrb	r3, [r3, #4]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	b25a      	sxtb	r2, r3
 8001474:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <updateMatrix_buffer+0xec>)
 8001476:	791b      	ldrb	r3, [r3, #4]
 8001478:	09db      	lsrs	r3, r3, #7
 800147a:	b2db      	uxtb	r3, r3
 800147c:	b25b      	sxtb	r3, r3
 800147e:	4313      	orrs	r3, r2
 8001480:	b25b      	sxtb	r3, r3
 8001482:	b2da      	uxtb	r2, r3
 8001484:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <updateMatrix_buffer+0xec>)
 8001486:	711a      	strb	r2, [r3, #4]
	matrix_buffer[5] = (matrix_buffer[5] << 1) | (matrix_buffer[5] >> 7);
 8001488:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <updateMatrix_buffer+0xec>)
 800148a:	795b      	ldrb	r3, [r3, #5]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	b25a      	sxtb	r2, r3
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <updateMatrix_buffer+0xec>)
 8001492:	795b      	ldrb	r3, [r3, #5]
 8001494:	09db      	lsrs	r3, r3, #7
 8001496:	b2db      	uxtb	r3, r3
 8001498:	b25b      	sxtb	r3, r3
 800149a:	4313      	orrs	r3, r2
 800149c:	b25b      	sxtb	r3, r3
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <updateMatrix_buffer+0xec>)
 80014a2:	715a      	strb	r2, [r3, #5]
	matrix_buffer[6] = (matrix_buffer[6] << 1) | (matrix_buffer[6] >> 7);
 80014a4:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <updateMatrix_buffer+0xec>)
 80014a6:	799b      	ldrb	r3, [r3, #6]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	b25a      	sxtb	r2, r3
 80014ac:	4b0d      	ldr	r3, [pc, #52]	; (80014e4 <updateMatrix_buffer+0xec>)
 80014ae:	799b      	ldrb	r3, [r3, #6]
 80014b0:	09db      	lsrs	r3, r3, #7
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	b25b      	sxtb	r3, r3
 80014b6:	4313      	orrs	r3, r2
 80014b8:	b25b      	sxtb	r3, r3
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <updateMatrix_buffer+0xec>)
 80014be:	719a      	strb	r2, [r3, #6]
	matrix_buffer[7] = (matrix_buffer[7] << 1) | (matrix_buffer[7] >> 7);
 80014c0:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <updateMatrix_buffer+0xec>)
 80014c2:	79db      	ldrb	r3, [r3, #7]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	b25a      	sxtb	r2, r3
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <updateMatrix_buffer+0xec>)
 80014ca:	79db      	ldrb	r3, [r3, #7]
 80014cc:	09db      	lsrs	r3, r3, #7
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	b25b      	sxtb	r3, r3
 80014d2:	4313      	orrs	r3, r2
 80014d4:	b25b      	sxtb	r3, r3
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	4b02      	ldr	r3, [pc, #8]	; (80014e4 <updateMatrix_buffer+0xec>)
 80014da:	71da      	strb	r2, [r3, #7]
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr
 80014e4:	20000010 	.word	0x20000010

080014e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ec:	f000 fb10 	bl	8001b10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014f0:	f000 f880 	bl	80015f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014f4:	f000 f906 	bl	8001704 <MX_GPIO_Init>
  MX_TIM2_Init();
 80014f8:	f000 f8b8 	bl	800166c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80014fc:	4834      	ldr	r0, [pc, #208]	; (80015d0 <main+0xe8>)
 80014fe:	f001 fa5b 	bl	80029b8 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //initial timer counter
  setTimer1(1000);
 8001502:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001506:	f000 f963 	bl	80017d0 <setTimer1>
  setTimer2(1000);
 800150a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800150e:	f000 f979 	bl	8001804 <setTimer2>
  setTimer3(1000);
 8001512:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001516:	f000 f98f 	bl	8001838 <setTimer3>
  setTimer4(1000);
 800151a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800151e:	f000 f9a5 	bl	800186c <setTimer4>
  setTimer5(1000);
 8001522:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001526:	f000 f9bb 	bl	80018a0 <setTimer5>
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	if(timer3_flag == 1)// control LED-RED and DOT-LED
 800152a:	4b2a      	ldr	r3, [pc, #168]	; (80015d4 <main+0xec>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d10b      	bne.n	800154a <main+0x62>
	{
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001532:	2120      	movs	r1, #32
 8001534:	4828      	ldr	r0, [pc, #160]	; (80015d8 <main+0xf0>)
 8001536:	f000 fded 	bl	8002114 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(DOT_GPIO_Port, DOT_Pin);
 800153a:	2110      	movs	r1, #16
 800153c:	4826      	ldr	r0, [pc, #152]	; (80015d8 <main+0xf0>)
 800153e:	f000 fde9 	bl	8002114 <HAL_GPIO_TogglePin>
		setTimer3(500);
 8001542:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001546:	f000 f977 	bl	8001838 <setTimer3>
	}

	if(timer1_flag == 1)// run time as a clock
 800154a:	4b24      	ldr	r3, [pc, #144]	; (80015dc <main+0xf4>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d107      	bne.n	8001562 <main+0x7a>
	{
		clock();
 8001552:	f7fe fdfb 	bl	800014c <clock>
		updateClockBuffer();
 8001556:	f7fe fe29 	bl	80001ac <updateClockBuffer>
		setTimer1(1000);
 800155a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800155e:	f000 f937 	bl	80017d0 <setTimer1>
	}

	if(timer2_flag == 1)//control 4 led 7-SEG
 8001562:	4b1f      	ldr	r3, [pc, #124]	; (80015e0 <main+0xf8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d111      	bne.n	800158e <main+0xa6>
	{
		update7SEG(index_led++);
 800156a:	4b1e      	ldr	r3, [pc, #120]	; (80015e4 <main+0xfc>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	1c5a      	adds	r2, r3, #1
 8001570:	491c      	ldr	r1, [pc, #112]	; (80015e4 <main+0xfc>)
 8001572:	600a      	str	r2, [r1, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	f7fe fffd 	bl	8000574 <update7SEG>
		if(index_led == MAX_LED) index_led = 0;
 800157a:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <main+0xfc>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2b04      	cmp	r3, #4
 8001580:	d102      	bne.n	8001588 <main+0xa0>
 8001582:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <main+0xfc>)
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
		setTimer2(250);
 8001588:	20fa      	movs	r0, #250	; 0xfa
 800158a:	f000 f93b 	bl	8001804 <setTimer2>
	}

	if(timer4_flag == 1)//control display led Matrix
 800158e:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <main+0x100>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d111      	bne.n	80015ba <main+0xd2>
	{
		updateLedMatrix(index_led_matrix++);
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <main+0x104>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	1c5a      	adds	r2, r3, #1
 800159c:	4913      	ldr	r1, [pc, #76]	; (80015ec <main+0x104>)
 800159e:	600a      	str	r2, [r1, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff fecf 	bl	8001344 <updateLedMatrix>
		if(index_led_matrix == MAX_LED_MATRIX) index_led_matrix = 0;
 80015a6:	4b11      	ldr	r3, [pc, #68]	; (80015ec <main+0x104>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2b08      	cmp	r3, #8
 80015ac:	d102      	bne.n	80015b4 <main+0xcc>
 80015ae:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <main+0x104>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
		setTimer4(100);
 80015b4:	2064      	movs	r0, #100	; 0x64
 80015b6:	f000 f959 	bl	800186c <setTimer4>
	}

	if(timer5_flag == 1)// update Matrix buffer to creat character moving effect
 80015ba:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <main+0x108>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d1b3      	bne.n	800152a <main+0x42>
	{
		updateMatrix_buffer();
 80015c2:	f7ff ff19 	bl	80013f8 <updateMatrix_buffer>
		setTimer5(1000);// character moving per one second
 80015c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015ca:	f000 f969 	bl	80018a0 <setTimer5>
	if(timer3_flag == 1)// control LED-RED and DOT-LED
 80015ce:	e7ac      	b.n	800152a <main+0x42>
 80015d0:	20000080 	.word	0x20000080
 80015d4:	20000068 	.word	0x20000068
 80015d8:	40010800 	.word	0x40010800
 80015dc:	20000058 	.word	0x20000058
 80015e0:	20000060 	.word	0x20000060
 80015e4:	20000050 	.word	0x20000050
 80015e8:	20000070 	.word	0x20000070
 80015ec:	20000054 	.word	0x20000054
 80015f0:	20000078 	.word	0x20000078

080015f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b090      	sub	sp, #64	; 0x40
 80015f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015fa:	f107 0318 	add.w	r3, r7, #24
 80015fe:	2228      	movs	r2, #40	; 0x28
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f001 fd90 	bl	8003128 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001616:	2302      	movs	r3, #2
 8001618:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800161a:	2301      	movs	r3, #1
 800161c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800161e:	2310      	movs	r3, #16
 8001620:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001622:	2300      	movs	r3, #0
 8001624:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001626:	f107 0318 	add.w	r3, r7, #24
 800162a:	4618      	mov	r0, r3
 800162c:	f000 fd8c 	bl	8002148 <HAL_RCC_OscConfig>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001636:	f000 f8c5 	bl	80017c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800163a:	230f      	movs	r3, #15
 800163c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800163e:	2300      	movs	r3, #0
 8001640:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f000 fff8 	bl	8002648 <HAL_RCC_ClockConfig>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800165e:	f000 f8b1 	bl	80017c4 <Error_Handler>
  }
}
 8001662:	bf00      	nop
 8001664:	3740      	adds	r7, #64	; 0x40
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001672:	f107 0308 	add.w	r3, r7, #8
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001680:	463b      	mov	r3, r7
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001688:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <MX_TIM2_Init+0x94>)
 800168a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800168e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001690:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <MX_TIM2_Init+0x94>)
 8001692:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001696:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001698:	4b19      	ldr	r3, [pc, #100]	; (8001700 <MX_TIM2_Init+0x94>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800169e:	4b18      	ldr	r3, [pc, #96]	; (8001700 <MX_TIM2_Init+0x94>)
 80016a0:	2209      	movs	r2, #9
 80016a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a4:	4b16      	ldr	r3, [pc, #88]	; (8001700 <MX_TIM2_Init+0x94>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016aa:	4b15      	ldr	r3, [pc, #84]	; (8001700 <MX_TIM2_Init+0x94>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016b0:	4813      	ldr	r0, [pc, #76]	; (8001700 <MX_TIM2_Init+0x94>)
 80016b2:	f001 f931 	bl	8002918 <HAL_TIM_Base_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80016bc:	f000 f882 	bl	80017c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016c6:	f107 0308 	add.w	r3, r7, #8
 80016ca:	4619      	mov	r1, r3
 80016cc:	480c      	ldr	r0, [pc, #48]	; (8001700 <MX_TIM2_Init+0x94>)
 80016ce:	f001 fac7 	bl	8002c60 <HAL_TIM_ConfigClockSource>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80016d8:	f000 f874 	bl	80017c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016dc:	2300      	movs	r3, #0
 80016de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016e4:	463b      	mov	r3, r7
 80016e6:	4619      	mov	r1, r3
 80016e8:	4805      	ldr	r0, [pc, #20]	; (8001700 <MX_TIM2_Init+0x94>)
 80016ea:	f001 fc8f 	bl	800300c <HAL_TIMEx_MasterConfigSynchronization>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80016f4:	f000 f866 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016f8:	bf00      	nop
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000080 	.word	0x20000080

08001704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170a:	f107 0308 	add.w	r3, r7, #8
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001718:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <MX_GPIO_Init+0xa0>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	4a21      	ldr	r2, [pc, #132]	; (80017a4 <MX_GPIO_Init+0xa0>)
 800171e:	f043 0304 	orr.w	r3, r3, #4
 8001722:	6193      	str	r3, [r2, #24]
 8001724:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <MX_GPIO_Init+0xa0>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001730:	4b1c      	ldr	r3, [pc, #112]	; (80017a4 <MX_GPIO_Init+0xa0>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	4a1b      	ldr	r2, [pc, #108]	; (80017a4 <MX_GPIO_Init+0xa0>)
 8001736:	f043 0308 	orr.w	r3, r3, #8
 800173a:	6193      	str	r3, [r2, #24]
 800173c:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <MX_GPIO_Init+0xa0>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	f003 0308 	and.w	r3, r3, #8
 8001744:	603b      	str	r3, [r7, #0]
 8001746:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENM0_Pin|ENM1_Pin|DOT_Pin|LED_RED_Pin
 8001748:	2200      	movs	r2, #0
 800174a:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 800174e:	4816      	ldr	r0, [pc, #88]	; (80017a8 <MX_GPIO_Init+0xa4>)
 8001750:	f000 fcc8 	bl	80020e4 <HAL_GPIO_WritePin>
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|ROW2_Pin
 8001754:	2200      	movs	r2, #0
 8001756:	f64f 717f 	movw	r1, #65407	; 0xff7f
 800175a:	4814      	ldr	r0, [pc, #80]	; (80017ac <MX_GPIO_Init+0xa8>)
 800175c:	f000 fcc2 	bl	80020e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENM0_Pin ENM1_Pin DOT_Pin LED_RED_Pin
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           ENM2_Pin ENM3_Pin ENM4_Pin ENM5_Pin
                           ENM6_Pin ENM7_Pin */
  GPIO_InitStruct.Pin = ENM0_Pin|ENM1_Pin|DOT_Pin|LED_RED_Pin
 8001760:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8001764:	60bb      	str	r3, [r7, #8]
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001766:	2301      	movs	r3, #1
 8001768:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176e:	2302      	movs	r3, #2
 8001770:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001772:	f107 0308 	add.w	r3, r7, #8
 8001776:	4619      	mov	r1, r3
 8001778:	480b      	ldr	r0, [pc, #44]	; (80017a8 <MX_GPIO_Init+0xa4>)
 800177a:	f000 fb39 	bl	8001df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin ROW2_Pin
                           ROW3_Pin ROW4_Pin ROW5_Pin ROW6_Pin
                           ROW7_Pin SEG3_Pin SEG4_Pin SEG5_Pin
                           SEG6_Pin ROW0_Pin ROW1_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|ROW2_Pin
 800177e:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8001782:	60bb      	str	r3, [r7, #8]
                          |ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin
                          |ROW7_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin|ROW0_Pin|ROW1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001784:	2301      	movs	r3, #1
 8001786:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178c:	2302      	movs	r3, #2
 800178e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001790:	f107 0308 	add.w	r3, r7, #8
 8001794:	4619      	mov	r1, r3
 8001796:	4805      	ldr	r0, [pc, #20]	; (80017ac <MX_GPIO_Init+0xa8>)
 8001798:	f000 fb2a 	bl	8001df0 <HAL_GPIO_Init>

}
 800179c:	bf00      	nop
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40010800 	.word	0x40010800
 80017ac:	40010c00 	.word	0x40010c00

080017b0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	timerRun();
 80017b8:	f000 f88c 	bl	80018d4 <timerRun>
}
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c8:	b672      	cpsid	i
}
 80017ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017cc:	e7fe      	b.n	80017cc <Error_Handler+0x8>
	...

080017d0 <setTimer1>:
// timer5 is used to update buffer led matrix
int timer5_flag = 0;
int timer5_counter = 0;

//timer for update clockbuffer
void setTimer1(int duration){
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 80017d8:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <setTimer1+0x28>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	fb92 f3f3 	sdiv	r3, r2, r3
 80017e2:	4a06      	ldr	r2, [pc, #24]	; (80017fc <setTimer1+0x2c>)
 80017e4:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80017e6:	4b06      	ldr	r3, [pc, #24]	; (8001800 <setTimer1+0x30>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	20000024 	.word	0x20000024
 80017fc:	2000005c 	.word	0x2000005c
 8001800:	20000058 	.word	0x20000058

08001804 <setTimer2>:

//timer for update 7SEG led
void setTimer2(int duration){
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 800180c:	4b07      	ldr	r3, [pc, #28]	; (800182c <setTimer2+0x28>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	fb92 f3f3 	sdiv	r3, r2, r3
 8001816:	4a06      	ldr	r2, [pc, #24]	; (8001830 <setTimer2+0x2c>)
 8001818:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800181a:	4b06      	ldr	r3, [pc, #24]	; (8001834 <setTimer2+0x30>)
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	20000024 	.word	0x20000024
 8001830:	20000064 	.word	0x20000064
 8001834:	20000060 	.word	0x20000060

08001838 <setTimer3>:

//timer for control LED-RED and DOT-LED
void setTimer3(int duration){
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TICK;
 8001840:	4b07      	ldr	r3, [pc, #28]	; (8001860 <setTimer3+0x28>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	fb92 f3f3 	sdiv	r3, r2, r3
 800184a:	4a06      	ldr	r2, [pc, #24]	; (8001864 <setTimer3+0x2c>)
 800184c:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800184e:	4b06      	ldr	r3, [pc, #24]	; (8001868 <setTimer3+0x30>)
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	20000024 	.word	0x20000024
 8001864:	2000006c 	.word	0x2000006c
 8001868:	20000068 	.word	0x20000068

0800186c <setTimer4>:

//timer for update led matrix
void setTimer4(int duration){
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TICK;
 8001874:	4b07      	ldr	r3, [pc, #28]	; (8001894 <setTimer4+0x28>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	fb92 f3f3 	sdiv	r3, r2, r3
 800187e:	4a06      	ldr	r2, [pc, #24]	; (8001898 <setTimer4+0x2c>)
 8001880:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <setTimer4+0x30>)
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	20000024 	.word	0x20000024
 8001898:	20000074 	.word	0x20000074
 800189c:	20000070 	.word	0x20000070

080018a0 <setTimer5>:

//timer for update buffer led matrix
void setTimer5(int duration){
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/TICK;
 80018a8:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <setTimer5+0x28>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80018b2:	4a06      	ldr	r2, [pc, #24]	; (80018cc <setTimer5+0x2c>)
 80018b4:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 80018b6:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <setTimer5+0x30>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	20000024 	.word	0x20000024
 80018cc:	2000007c 	.word	0x2000007c
 80018d0:	20000078 	.word	0x20000078

080018d4 <timerRun>:

void timerRun(){
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) timer1_counter--;
 80018d8:	4b29      	ldr	r3, [pc, #164]	; (8001980 <timerRun+0xac>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	dd04      	ble.n	80018ea <timerRun+0x16>
 80018e0:	4b27      	ldr	r3, [pc, #156]	; (8001980 <timerRun+0xac>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	3b01      	subs	r3, #1
 80018e6:	4a26      	ldr	r2, [pc, #152]	; (8001980 <timerRun+0xac>)
 80018e8:	6013      	str	r3, [r2, #0]
	if(timer1_counter == 0){
 80018ea:	4b25      	ldr	r3, [pc, #148]	; (8001980 <timerRun+0xac>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d102      	bne.n	80018f8 <timerRun+0x24>
		timer1_flag = 1;
 80018f2:	4b24      	ldr	r3, [pc, #144]	; (8001984 <timerRun+0xb0>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	601a      	str	r2, [r3, #0]
	}

	if(timer2_counter > 0) timer2_counter--;
 80018f8:	4b23      	ldr	r3, [pc, #140]	; (8001988 <timerRun+0xb4>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	dd04      	ble.n	800190a <timerRun+0x36>
 8001900:	4b21      	ldr	r3, [pc, #132]	; (8001988 <timerRun+0xb4>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	3b01      	subs	r3, #1
 8001906:	4a20      	ldr	r2, [pc, #128]	; (8001988 <timerRun+0xb4>)
 8001908:	6013      	str	r3, [r2, #0]
	if(timer2_counter == 0){
 800190a:	4b1f      	ldr	r3, [pc, #124]	; (8001988 <timerRun+0xb4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d102      	bne.n	8001918 <timerRun+0x44>
		timer2_flag = 1;
 8001912:	4b1e      	ldr	r3, [pc, #120]	; (800198c <timerRun+0xb8>)
 8001914:	2201      	movs	r2, #1
 8001916:	601a      	str	r2, [r3, #0]
	}

	if(timer3_counter > 0) timer3_counter--;
 8001918:	4b1d      	ldr	r3, [pc, #116]	; (8001990 <timerRun+0xbc>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	dd04      	ble.n	800192a <timerRun+0x56>
 8001920:	4b1b      	ldr	r3, [pc, #108]	; (8001990 <timerRun+0xbc>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	3b01      	subs	r3, #1
 8001926:	4a1a      	ldr	r2, [pc, #104]	; (8001990 <timerRun+0xbc>)
 8001928:	6013      	str	r3, [r2, #0]
	if(timer3_counter == 0){
 800192a:	4b19      	ldr	r3, [pc, #100]	; (8001990 <timerRun+0xbc>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d102      	bne.n	8001938 <timerRun+0x64>
		timer3_flag = 1;
 8001932:	4b18      	ldr	r3, [pc, #96]	; (8001994 <timerRun+0xc0>)
 8001934:	2201      	movs	r2, #1
 8001936:	601a      	str	r2, [r3, #0]
	}

	if(timer4_counter > 0) timer4_counter--;
 8001938:	4b17      	ldr	r3, [pc, #92]	; (8001998 <timerRun+0xc4>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	dd04      	ble.n	800194a <timerRun+0x76>
 8001940:	4b15      	ldr	r3, [pc, #84]	; (8001998 <timerRun+0xc4>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	3b01      	subs	r3, #1
 8001946:	4a14      	ldr	r2, [pc, #80]	; (8001998 <timerRun+0xc4>)
 8001948:	6013      	str	r3, [r2, #0]
	if(timer4_counter == 0){
 800194a:	4b13      	ldr	r3, [pc, #76]	; (8001998 <timerRun+0xc4>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d102      	bne.n	8001958 <timerRun+0x84>
		timer4_flag = 1;
 8001952:	4b12      	ldr	r3, [pc, #72]	; (800199c <timerRun+0xc8>)
 8001954:	2201      	movs	r2, #1
 8001956:	601a      	str	r2, [r3, #0]
	}

	if(timer5_counter > 0) timer5_counter--;
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <timerRun+0xcc>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	dd04      	ble.n	800196a <timerRun+0x96>
 8001960:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <timerRun+0xcc>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	3b01      	subs	r3, #1
 8001966:	4a0e      	ldr	r2, [pc, #56]	; (80019a0 <timerRun+0xcc>)
 8001968:	6013      	str	r3, [r2, #0]
	if(timer5_counter == 0){
 800196a:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <timerRun+0xcc>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d102      	bne.n	8001978 <timerRun+0xa4>
		timer5_flag = 1;
 8001972:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <timerRun+0xd0>)
 8001974:	2201      	movs	r2, #1
 8001976:	601a      	str	r2, [r3, #0]
	}
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr
 8001980:	2000005c 	.word	0x2000005c
 8001984:	20000058 	.word	0x20000058
 8001988:	20000064 	.word	0x20000064
 800198c:	20000060 	.word	0x20000060
 8001990:	2000006c 	.word	0x2000006c
 8001994:	20000068 	.word	0x20000068
 8001998:	20000074 	.word	0x20000074
 800199c:	20000070 	.word	0x20000070
 80019a0:	2000007c 	.word	0x2000007c
 80019a4:	20000078 	.word	0x20000078

080019a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019ae:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <HAL_MspInit+0x5c>)
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	4a14      	ldr	r2, [pc, #80]	; (8001a04 <HAL_MspInit+0x5c>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6193      	str	r3, [r2, #24]
 80019ba:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_MspInit+0x5c>)
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c6:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <HAL_MspInit+0x5c>)
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	4a0e      	ldr	r2, [pc, #56]	; (8001a04 <HAL_MspInit+0x5c>)
 80019cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d0:	61d3      	str	r3, [r2, #28]
 80019d2:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <HAL_MspInit+0x5c>)
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019da:	607b      	str	r3, [r7, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80019de:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <HAL_MspInit+0x60>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	4a04      	ldr	r2, [pc, #16]	; (8001a08 <HAL_MspInit+0x60>)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019fa:	bf00      	nop
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr
 8001a04:	40021000 	.word	0x40021000
 8001a08:	40010000 	.word	0x40010000

08001a0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a1c:	d113      	bne.n	8001a46 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a1e:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <HAL_TIM_Base_MspInit+0x44>)
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	4a0b      	ldr	r2, [pc, #44]	; (8001a50 <HAL_TIM_Base_MspInit+0x44>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	61d3      	str	r3, [r2, #28]
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <HAL_TIM_Base_MspInit+0x44>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2100      	movs	r1, #0
 8001a3a:	201c      	movs	r0, #28
 8001a3c:	f000 f9a1 	bl	8001d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a40:	201c      	movs	r0, #28
 8001a42:	f000 f9ba 	bl	8001dba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a46:	bf00      	nop
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40021000 	.word	0x40021000

08001a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a58:	e7fe      	b.n	8001a58 <NMI_Handler+0x4>

08001a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a5e:	e7fe      	b.n	8001a5e <HardFault_Handler+0x4>

08001a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a64:	e7fe      	b.n	8001a64 <MemManage_Handler+0x4>

08001a66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a6a:	e7fe      	b.n	8001a6a <BusFault_Handler+0x4>

08001a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a70:	e7fe      	b.n	8001a70 <UsageFault_Handler+0x4>

08001a72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr

08001a7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr

08001a8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr

08001a96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a9a:	f000 f87f 	bl	8001b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001aa8:	4802      	ldr	r0, [pc, #8]	; (8001ab4 <TIM2_IRQHandler+0x10>)
 8001aaa:	f000 ffd1 	bl	8002a50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000080 	.word	0x20000080

08001ab8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ac4:	480c      	ldr	r0, [pc, #48]	; (8001af8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ac6:	490d      	ldr	r1, [pc, #52]	; (8001afc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ac8:	4a0d      	ldr	r2, [pc, #52]	; (8001b00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001acc:	e002      	b.n	8001ad4 <LoopCopyDataInit>

08001ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ad2:	3304      	adds	r3, #4

08001ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad8:	d3f9      	bcc.n	8001ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ada:	4a0a      	ldr	r2, [pc, #40]	; (8001b04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001adc:	4c0a      	ldr	r4, [pc, #40]	; (8001b08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae0:	e001      	b.n	8001ae6 <LoopFillZerobss>

08001ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae4:	3204      	adds	r2, #4

08001ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae8:	d3fb      	bcc.n	8001ae2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001aea:	f7ff ffe5 	bl	8001ab8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aee:	f001 faf7 	bl	80030e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001af2:	f7ff fcf9 	bl	80014e8 <main>
  bx lr
 8001af6:	4770      	bx	lr
  ldr r0, =_sdata
 8001af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001afc:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8001b00:	08003178 	.word	0x08003178
  ldr r2, =_sbss
 8001b04:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8001b08:	200000cc 	.word	0x200000cc

08001b0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b0c:	e7fe      	b.n	8001b0c <ADC1_2_IRQHandler>
	...

08001b10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <HAL_Init+0x28>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a07      	ldr	r2, [pc, #28]	; (8001b38 <HAL_Init+0x28>)
 8001b1a:	f043 0310 	orr.w	r3, r3, #16
 8001b1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b20:	2003      	movs	r0, #3
 8001b22:	f000 f923 	bl	8001d6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b26:	200f      	movs	r0, #15
 8001b28:	f000 f808 	bl	8001b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b2c:	f7ff ff3c 	bl	80019a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40022000 	.word	0x40022000

08001b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b44:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_InitTick+0x54>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <HAL_InitTick+0x58>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f000 f93b 	bl	8001dd6 <HAL_SYSTICK_Config>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e00e      	b.n	8001b88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b0f      	cmp	r3, #15
 8001b6e:	d80a      	bhi.n	8001b86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b70:	2200      	movs	r2, #0
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	f04f 30ff 	mov.w	r0, #4294967295
 8001b78:	f000 f903 	bl	8001d82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b7c:	4a06      	ldr	r2, [pc, #24]	; (8001b98 <HAL_InitTick+0x5c>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
 8001b84:	e000      	b.n	8001b88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000028 	.word	0x20000028
 8001b94:	20000030 	.word	0x20000030
 8001b98:	2000002c 	.word	0x2000002c

08001b9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <HAL_IncTick+0x1c>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <HAL_IncTick+0x20>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	4a03      	ldr	r2, [pc, #12]	; (8001bbc <HAL_IncTick+0x20>)
 8001bae:	6013      	str	r3, [r2, #0]
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr
 8001bb8:	20000030 	.word	0x20000030
 8001bbc:	200000c8 	.word	0x200000c8

08001bc0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc4:	4b02      	ldr	r3, [pc, #8]	; (8001bd0 <HAL_GetTick+0x10>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr
 8001bd0:	200000c8 	.word	0x200000c8

08001bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <__NVIC_SetPriorityGrouping+0x44>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c06:	4a04      	ldr	r2, [pc, #16]	; (8001c18 <__NVIC_SetPriorityGrouping+0x44>)
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	60d3      	str	r3, [r2, #12]
}
 8001c0c:	bf00      	nop
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c20:	4b04      	ldr	r3, [pc, #16]	; (8001c34 <__NVIC_GetPriorityGrouping+0x18>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	0a1b      	lsrs	r3, r3, #8
 8001c26:	f003 0307 	and.w	r3, r3, #7
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	db0b      	blt.n	8001c62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	f003 021f 	and.w	r2, r3, #31
 8001c50:	4906      	ldr	r1, [pc, #24]	; (8001c6c <__NVIC_EnableIRQ+0x34>)
 8001c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c56:	095b      	lsrs	r3, r3, #5
 8001c58:	2001      	movs	r0, #1
 8001c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr
 8001c6c:	e000e100 	.word	0xe000e100

08001c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	6039      	str	r1, [r7, #0]
 8001c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	db0a      	blt.n	8001c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	490c      	ldr	r1, [pc, #48]	; (8001cbc <__NVIC_SetPriority+0x4c>)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	0112      	lsls	r2, r2, #4
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	440b      	add	r3, r1
 8001c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c98:	e00a      	b.n	8001cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	4908      	ldr	r1, [pc, #32]	; (8001cc0 <__NVIC_SetPriority+0x50>)
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	3b04      	subs	r3, #4
 8001ca8:	0112      	lsls	r2, r2, #4
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	440b      	add	r3, r1
 8001cae:	761a      	strb	r2, [r3, #24]
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	e000e100 	.word	0xe000e100
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b089      	sub	sp, #36	; 0x24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f1c3 0307 	rsb	r3, r3, #7
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	bf28      	it	cs
 8001ce2:	2304      	movcs	r3, #4
 8001ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3304      	adds	r3, #4
 8001cea:	2b06      	cmp	r3, #6
 8001cec:	d902      	bls.n	8001cf4 <NVIC_EncodePriority+0x30>
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	3b03      	subs	r3, #3
 8001cf2:	e000      	b.n	8001cf6 <NVIC_EncodePriority+0x32>
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43da      	mvns	r2, r3
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	401a      	ands	r2, r3
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	fa01 f303 	lsl.w	r3, r1, r3
 8001d16:	43d9      	mvns	r1, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d1c:	4313      	orrs	r3, r2
         );
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3724      	adds	r7, #36	; 0x24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr

08001d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d38:	d301      	bcc.n	8001d3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e00f      	b.n	8001d5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d3e:	4a0a      	ldr	r2, [pc, #40]	; (8001d68 <SysTick_Config+0x40>)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d46:	210f      	movs	r1, #15
 8001d48:	f04f 30ff 	mov.w	r0, #4294967295
 8001d4c:	f7ff ff90 	bl	8001c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d50:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <SysTick_Config+0x40>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d56:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <SysTick_Config+0x40>)
 8001d58:	2207      	movs	r2, #7
 8001d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	e000e010 	.word	0xe000e010

08001d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff ff2d 	bl	8001bd4 <__NVIC_SetPriorityGrouping>
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b086      	sub	sp, #24
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	4603      	mov	r3, r0
 8001d8a:	60b9      	str	r1, [r7, #8]
 8001d8c:	607a      	str	r2, [r7, #4]
 8001d8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d94:	f7ff ff42 	bl	8001c1c <__NVIC_GetPriorityGrouping>
 8001d98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	68b9      	ldr	r1, [r7, #8]
 8001d9e:	6978      	ldr	r0, [r7, #20]
 8001da0:	f7ff ff90 	bl	8001cc4 <NVIC_EncodePriority>
 8001da4:	4602      	mov	r2, r0
 8001da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001daa:	4611      	mov	r1, r2
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff ff5f 	bl	8001c70 <__NVIC_SetPriority>
}
 8001db2:	bf00      	nop
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff35 	bl	8001c38 <__NVIC_EnableIRQ>
}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff ffa2 	bl	8001d28 <SysTick_Config>
 8001de4:	4603      	mov	r3, r0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b08b      	sub	sp, #44	; 0x2c
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e02:	e148      	b.n	8002096 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e04:	2201      	movs	r2, #1
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	69fa      	ldr	r2, [r7, #28]
 8001e14:	4013      	ands	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	f040 8137 	bne.w	8002090 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	4aa3      	ldr	r2, [pc, #652]	; (80020b4 <HAL_GPIO_Init+0x2c4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d05e      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
 8001e2c:	4aa1      	ldr	r2, [pc, #644]	; (80020b4 <HAL_GPIO_Init+0x2c4>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d875      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e32:	4aa1      	ldr	r2, [pc, #644]	; (80020b8 <HAL_GPIO_Init+0x2c8>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d058      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
 8001e38:	4a9f      	ldr	r2, [pc, #636]	; (80020b8 <HAL_GPIO_Init+0x2c8>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d86f      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e3e:	4a9f      	ldr	r2, [pc, #636]	; (80020bc <HAL_GPIO_Init+0x2cc>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d052      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
 8001e44:	4a9d      	ldr	r2, [pc, #628]	; (80020bc <HAL_GPIO_Init+0x2cc>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d869      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e4a:	4a9d      	ldr	r2, [pc, #628]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d04c      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
 8001e50:	4a9b      	ldr	r2, [pc, #620]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d863      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e56:	4a9b      	ldr	r2, [pc, #620]	; (80020c4 <HAL_GPIO_Init+0x2d4>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d046      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
 8001e5c:	4a99      	ldr	r2, [pc, #612]	; (80020c4 <HAL_GPIO_Init+0x2d4>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d85d      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e62:	2b12      	cmp	r3, #18
 8001e64:	d82a      	bhi.n	8001ebc <HAL_GPIO_Init+0xcc>
 8001e66:	2b12      	cmp	r3, #18
 8001e68:	d859      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e6a:	a201      	add	r2, pc, #4	; (adr r2, 8001e70 <HAL_GPIO_Init+0x80>)
 8001e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e70:	08001eeb 	.word	0x08001eeb
 8001e74:	08001ec5 	.word	0x08001ec5
 8001e78:	08001ed7 	.word	0x08001ed7
 8001e7c:	08001f19 	.word	0x08001f19
 8001e80:	08001f1f 	.word	0x08001f1f
 8001e84:	08001f1f 	.word	0x08001f1f
 8001e88:	08001f1f 	.word	0x08001f1f
 8001e8c:	08001f1f 	.word	0x08001f1f
 8001e90:	08001f1f 	.word	0x08001f1f
 8001e94:	08001f1f 	.word	0x08001f1f
 8001e98:	08001f1f 	.word	0x08001f1f
 8001e9c:	08001f1f 	.word	0x08001f1f
 8001ea0:	08001f1f 	.word	0x08001f1f
 8001ea4:	08001f1f 	.word	0x08001f1f
 8001ea8:	08001f1f 	.word	0x08001f1f
 8001eac:	08001f1f 	.word	0x08001f1f
 8001eb0:	08001f1f 	.word	0x08001f1f
 8001eb4:	08001ecd 	.word	0x08001ecd
 8001eb8:	08001ee1 	.word	0x08001ee1
 8001ebc:	4a82      	ldr	r2, [pc, #520]	; (80020c8 <HAL_GPIO_Init+0x2d8>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d013      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ec2:	e02c      	b.n	8001f1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	623b      	str	r3, [r7, #32]
          break;
 8001eca:	e029      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	623b      	str	r3, [r7, #32]
          break;
 8001ed4:	e024      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	3308      	adds	r3, #8
 8001edc:	623b      	str	r3, [r7, #32]
          break;
 8001ede:	e01f      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	330c      	adds	r3, #12
 8001ee6:	623b      	str	r3, [r7, #32]
          break;
 8001ee8:	e01a      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d102      	bne.n	8001ef8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ef2:	2304      	movs	r3, #4
 8001ef4:	623b      	str	r3, [r7, #32]
          break;
 8001ef6:	e013      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d105      	bne.n	8001f0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f00:	2308      	movs	r3, #8
 8001f02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	69fa      	ldr	r2, [r7, #28]
 8001f08:	611a      	str	r2, [r3, #16]
          break;
 8001f0a:	e009      	b.n	8001f20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f0c:	2308      	movs	r3, #8
 8001f0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69fa      	ldr	r2, [r7, #28]
 8001f14:	615a      	str	r2, [r3, #20]
          break;
 8001f16:	e003      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	623b      	str	r3, [r7, #32]
          break;
 8001f1c:	e000      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          break;
 8001f1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	2bff      	cmp	r3, #255	; 0xff
 8001f24:	d801      	bhi.n	8001f2a <HAL_GPIO_Init+0x13a>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	e001      	b.n	8001f2e <HAL_GPIO_Init+0x13e>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	2bff      	cmp	r3, #255	; 0xff
 8001f34:	d802      	bhi.n	8001f3c <HAL_GPIO_Init+0x14c>
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	e002      	b.n	8001f42 <HAL_GPIO_Init+0x152>
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	3b08      	subs	r3, #8
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	210f      	movs	r1, #15
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	401a      	ands	r2, r3
 8001f54:	6a39      	ldr	r1, [r7, #32]
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 8090 	beq.w	8002090 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f70:	4b56      	ldr	r3, [pc, #344]	; (80020cc <HAL_GPIO_Init+0x2dc>)
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	4a55      	ldr	r2, [pc, #340]	; (80020cc <HAL_GPIO_Init+0x2dc>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	6193      	str	r3, [r2, #24]
 8001f7c:	4b53      	ldr	r3, [pc, #332]	; (80020cc <HAL_GPIO_Init+0x2dc>)
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f88:	4a51      	ldr	r2, [pc, #324]	; (80020d0 <HAL_GPIO_Init+0x2e0>)
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	089b      	lsrs	r3, r3, #2
 8001f8e:	3302      	adds	r3, #2
 8001f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	220f      	movs	r2, #15
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a49      	ldr	r2, [pc, #292]	; (80020d4 <HAL_GPIO_Init+0x2e4>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d00d      	beq.n	8001fd0 <HAL_GPIO_Init+0x1e0>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a48      	ldr	r2, [pc, #288]	; (80020d8 <HAL_GPIO_Init+0x2e8>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d007      	beq.n	8001fcc <HAL_GPIO_Init+0x1dc>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a47      	ldr	r2, [pc, #284]	; (80020dc <HAL_GPIO_Init+0x2ec>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d101      	bne.n	8001fc8 <HAL_GPIO_Init+0x1d8>
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	e004      	b.n	8001fd2 <HAL_GPIO_Init+0x1e2>
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e002      	b.n	8001fd2 <HAL_GPIO_Init+0x1e2>
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e000      	b.n	8001fd2 <HAL_GPIO_Init+0x1e2>
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd4:	f002 0203 	and.w	r2, r2, #3
 8001fd8:	0092      	lsls	r2, r2, #2
 8001fda:	4093      	lsls	r3, r2
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fe2:	493b      	ldr	r1, [pc, #236]	; (80020d0 <HAL_GPIO_Init+0x2e0>)
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	089b      	lsrs	r3, r3, #2
 8001fe8:	3302      	adds	r3, #2
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d006      	beq.n	800200a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ffc:	4b38      	ldr	r3, [pc, #224]	; (80020e0 <HAL_GPIO_Init+0x2f0>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	4937      	ldr	r1, [pc, #220]	; (80020e0 <HAL_GPIO_Init+0x2f0>)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	4313      	orrs	r3, r2
 8002006:	600b      	str	r3, [r1, #0]
 8002008:	e006      	b.n	8002018 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800200a:	4b35      	ldr	r3, [pc, #212]	; (80020e0 <HAL_GPIO_Init+0x2f0>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	43db      	mvns	r3, r3
 8002012:	4933      	ldr	r1, [pc, #204]	; (80020e0 <HAL_GPIO_Init+0x2f0>)
 8002014:	4013      	ands	r3, r2
 8002016:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d006      	beq.n	8002032 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002024:	4b2e      	ldr	r3, [pc, #184]	; (80020e0 <HAL_GPIO_Init+0x2f0>)
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	492d      	ldr	r1, [pc, #180]	; (80020e0 <HAL_GPIO_Init+0x2f0>)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	4313      	orrs	r3, r2
 800202e:	604b      	str	r3, [r1, #4]
 8002030:	e006      	b.n	8002040 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002032:	4b2b      	ldr	r3, [pc, #172]	; (80020e0 <HAL_GPIO_Init+0x2f0>)
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	43db      	mvns	r3, r3
 800203a:	4929      	ldr	r1, [pc, #164]	; (80020e0 <HAL_GPIO_Init+0x2f0>)
 800203c:	4013      	ands	r3, r2
 800203e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d006      	beq.n	800205a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800204c:	4b24      	ldr	r3, [pc, #144]	; (80020e0 <HAL_GPIO_Init+0x2f0>)
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	4923      	ldr	r1, [pc, #140]	; (80020e0 <HAL_GPIO_Init+0x2f0>)
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	4313      	orrs	r3, r2
 8002056:	608b      	str	r3, [r1, #8]
 8002058:	e006      	b.n	8002068 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800205a:	4b21      	ldr	r3, [pc, #132]	; (80020e0 <HAL_GPIO_Init+0x2f0>)
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	43db      	mvns	r3, r3
 8002062:	491f      	ldr	r1, [pc, #124]	; (80020e0 <HAL_GPIO_Init+0x2f0>)
 8002064:	4013      	ands	r3, r2
 8002066:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d006      	beq.n	8002082 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002074:	4b1a      	ldr	r3, [pc, #104]	; (80020e0 <HAL_GPIO_Init+0x2f0>)
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	4919      	ldr	r1, [pc, #100]	; (80020e0 <HAL_GPIO_Init+0x2f0>)
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	4313      	orrs	r3, r2
 800207e:	60cb      	str	r3, [r1, #12]
 8002080:	e006      	b.n	8002090 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002082:	4b17      	ldr	r3, [pc, #92]	; (80020e0 <HAL_GPIO_Init+0x2f0>)
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	43db      	mvns	r3, r3
 800208a:	4915      	ldr	r1, [pc, #84]	; (80020e0 <HAL_GPIO_Init+0x2f0>)
 800208c:	4013      	ands	r3, r2
 800208e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	3301      	adds	r3, #1
 8002094:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	fa22 f303 	lsr.w	r3, r2, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f47f aeaf 	bne.w	8001e04 <HAL_GPIO_Init+0x14>
  }
}
 80020a6:	bf00      	nop
 80020a8:	bf00      	nop
 80020aa:	372c      	adds	r7, #44	; 0x2c
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	10320000 	.word	0x10320000
 80020b8:	10310000 	.word	0x10310000
 80020bc:	10220000 	.word	0x10220000
 80020c0:	10210000 	.word	0x10210000
 80020c4:	10120000 	.word	0x10120000
 80020c8:	10110000 	.word	0x10110000
 80020cc:	40021000 	.word	0x40021000
 80020d0:	40010000 	.word	0x40010000
 80020d4:	40010800 	.word	0x40010800
 80020d8:	40010c00 	.word	0x40010c00
 80020dc:	40011000 	.word	0x40011000
 80020e0:	40010400 	.word	0x40010400

080020e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	807b      	strh	r3, [r7, #2]
 80020f0:	4613      	mov	r3, r2
 80020f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020f4:	787b      	ldrb	r3, [r7, #1]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020fa:	887a      	ldrh	r2, [r7, #2]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002100:	e003      	b.n	800210a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002102:	887b      	ldrh	r3, [r7, #2]
 8002104:	041a      	lsls	r2, r3, #16
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	611a      	str	r2, [r3, #16]
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr

08002114 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002126:	887a      	ldrh	r2, [r7, #2]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4013      	ands	r3, r2
 800212c:	041a      	lsls	r2, r3, #16
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	43d9      	mvns	r1, r3
 8002132:	887b      	ldrh	r3, [r7, #2]
 8002134:	400b      	ands	r3, r1
 8002136:	431a      	orrs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	611a      	str	r2, [r3, #16]
}
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr
	...

08002148 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e26c      	b.n	8002634 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	f000 8087 	beq.w	8002276 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002168:	4b92      	ldr	r3, [pc, #584]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 030c 	and.w	r3, r3, #12
 8002170:	2b04      	cmp	r3, #4
 8002172:	d00c      	beq.n	800218e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002174:	4b8f      	ldr	r3, [pc, #572]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 030c 	and.w	r3, r3, #12
 800217c:	2b08      	cmp	r3, #8
 800217e:	d112      	bne.n	80021a6 <HAL_RCC_OscConfig+0x5e>
 8002180:	4b8c      	ldr	r3, [pc, #560]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800218c:	d10b      	bne.n	80021a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800218e:	4b89      	ldr	r3, [pc, #548]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d06c      	beq.n	8002274 <HAL_RCC_OscConfig+0x12c>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d168      	bne.n	8002274 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e246      	b.n	8002634 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ae:	d106      	bne.n	80021be <HAL_RCC_OscConfig+0x76>
 80021b0:	4b80      	ldr	r3, [pc, #512]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a7f      	ldr	r2, [pc, #508]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ba:	6013      	str	r3, [r2, #0]
 80021bc:	e02e      	b.n	800221c <HAL_RCC_OscConfig+0xd4>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10c      	bne.n	80021e0 <HAL_RCC_OscConfig+0x98>
 80021c6:	4b7b      	ldr	r3, [pc, #492]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a7a      	ldr	r2, [pc, #488]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	4b78      	ldr	r3, [pc, #480]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a77      	ldr	r2, [pc, #476]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	e01d      	b.n	800221c <HAL_RCC_OscConfig+0xd4>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021e8:	d10c      	bne.n	8002204 <HAL_RCC_OscConfig+0xbc>
 80021ea:	4b72      	ldr	r3, [pc, #456]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a71      	ldr	r2, [pc, #452]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	4b6f      	ldr	r3, [pc, #444]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a6e      	ldr	r2, [pc, #440]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002200:	6013      	str	r3, [r2, #0]
 8002202:	e00b      	b.n	800221c <HAL_RCC_OscConfig+0xd4>
 8002204:	4b6b      	ldr	r3, [pc, #428]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a6a      	ldr	r2, [pc, #424]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 800220a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800220e:	6013      	str	r3, [r2, #0]
 8002210:	4b68      	ldr	r3, [pc, #416]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a67      	ldr	r2, [pc, #412]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800221a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d013      	beq.n	800224c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002224:	f7ff fccc 	bl	8001bc0 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800222c:	f7ff fcc8 	bl	8001bc0 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b64      	cmp	r3, #100	; 0x64
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e1fa      	b.n	8002634 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223e:	4b5d      	ldr	r3, [pc, #372]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0f0      	beq.n	800222c <HAL_RCC_OscConfig+0xe4>
 800224a:	e014      	b.n	8002276 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224c:	f7ff fcb8 	bl	8001bc0 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002254:	f7ff fcb4 	bl	8001bc0 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b64      	cmp	r3, #100	; 0x64
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e1e6      	b.n	8002634 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002266:	4b53      	ldr	r3, [pc, #332]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f0      	bne.n	8002254 <HAL_RCC_OscConfig+0x10c>
 8002272:	e000      	b.n	8002276 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002274:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d063      	beq.n	800234a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002282:	4b4c      	ldr	r3, [pc, #304]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f003 030c 	and.w	r3, r3, #12
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00b      	beq.n	80022a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800228e:	4b49      	ldr	r3, [pc, #292]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f003 030c 	and.w	r3, r3, #12
 8002296:	2b08      	cmp	r3, #8
 8002298:	d11c      	bne.n	80022d4 <HAL_RCC_OscConfig+0x18c>
 800229a:	4b46      	ldr	r3, [pc, #280]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d116      	bne.n	80022d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a6:	4b43      	ldr	r3, [pc, #268]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d005      	beq.n	80022be <HAL_RCC_OscConfig+0x176>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d001      	beq.n	80022be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e1ba      	b.n	8002634 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022be:	4b3d      	ldr	r3, [pc, #244]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	4939      	ldr	r1, [pc, #228]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022d2:	e03a      	b.n	800234a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d020      	beq.n	800231e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022dc:	4b36      	ldr	r3, [pc, #216]	; (80023b8 <HAL_RCC_OscConfig+0x270>)
 80022de:	2201      	movs	r2, #1
 80022e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e2:	f7ff fc6d 	bl	8001bc0 <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e8:	e008      	b.n	80022fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ea:	f7ff fc69 	bl	8001bc0 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e19b      	b.n	8002634 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fc:	4b2d      	ldr	r3, [pc, #180]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0f0      	beq.n	80022ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002308:	4b2a      	ldr	r3, [pc, #168]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4927      	ldr	r1, [pc, #156]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002318:	4313      	orrs	r3, r2
 800231a:	600b      	str	r3, [r1, #0]
 800231c:	e015      	b.n	800234a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800231e:	4b26      	ldr	r3, [pc, #152]	; (80023b8 <HAL_RCC_OscConfig+0x270>)
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002324:	f7ff fc4c 	bl	8001bc0 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800232c:	f7ff fc48 	bl	8001bc0 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e17a      	b.n	8002634 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233e:	4b1d      	ldr	r3, [pc, #116]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	2b00      	cmp	r3, #0
 8002354:	d03a      	beq.n	80023cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d019      	beq.n	8002392 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800235e:	4b17      	ldr	r3, [pc, #92]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 8002360:	2201      	movs	r2, #1
 8002362:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002364:	f7ff fc2c 	bl	8001bc0 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800236c:	f7ff fc28 	bl	8001bc0 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e15a      	b.n	8002634 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800237e:	4b0d      	ldr	r3, [pc, #52]	; (80023b4 <HAL_RCC_OscConfig+0x26c>)
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0f0      	beq.n	800236c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800238a:	2001      	movs	r0, #1
 800238c:	f000 faa6 	bl	80028dc <RCC_Delay>
 8002390:	e01c      	b.n	80023cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002392:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <HAL_RCC_OscConfig+0x274>)
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002398:	f7ff fc12 	bl	8001bc0 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800239e:	e00f      	b.n	80023c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a0:	f7ff fc0e 	bl	8001bc0 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d908      	bls.n	80023c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e140      	b.n	8002634 <HAL_RCC_OscConfig+0x4ec>
 80023b2:	bf00      	nop
 80023b4:	40021000 	.word	0x40021000
 80023b8:	42420000 	.word	0x42420000
 80023bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c0:	4b9e      	ldr	r3, [pc, #632]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1e9      	bne.n	80023a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 80a6 	beq.w	8002526 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023da:	2300      	movs	r3, #0
 80023dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023de:	4b97      	ldr	r3, [pc, #604]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10d      	bne.n	8002406 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ea:	4b94      	ldr	r3, [pc, #592]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	4a93      	ldr	r2, [pc, #588]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 80023f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f4:	61d3      	str	r3, [r2, #28]
 80023f6:	4b91      	ldr	r3, [pc, #580]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fe:	60bb      	str	r3, [r7, #8]
 8002400:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002402:	2301      	movs	r3, #1
 8002404:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002406:	4b8e      	ldr	r3, [pc, #568]	; (8002640 <HAL_RCC_OscConfig+0x4f8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240e:	2b00      	cmp	r3, #0
 8002410:	d118      	bne.n	8002444 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002412:	4b8b      	ldr	r3, [pc, #556]	; (8002640 <HAL_RCC_OscConfig+0x4f8>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a8a      	ldr	r2, [pc, #552]	; (8002640 <HAL_RCC_OscConfig+0x4f8>)
 8002418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800241c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800241e:	f7ff fbcf 	bl	8001bc0 <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002424:	e008      	b.n	8002438 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002426:	f7ff fbcb 	bl	8001bc0 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b64      	cmp	r3, #100	; 0x64
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e0fd      	b.n	8002634 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002438:	4b81      	ldr	r3, [pc, #516]	; (8002640 <HAL_RCC_OscConfig+0x4f8>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0f0      	beq.n	8002426 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d106      	bne.n	800245a <HAL_RCC_OscConfig+0x312>
 800244c:	4b7b      	ldr	r3, [pc, #492]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	4a7a      	ldr	r2, [pc, #488]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	6213      	str	r3, [r2, #32]
 8002458:	e02d      	b.n	80024b6 <HAL_RCC_OscConfig+0x36e>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10c      	bne.n	800247c <HAL_RCC_OscConfig+0x334>
 8002462:	4b76      	ldr	r3, [pc, #472]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	4a75      	ldr	r2, [pc, #468]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 8002468:	f023 0301 	bic.w	r3, r3, #1
 800246c:	6213      	str	r3, [r2, #32]
 800246e:	4b73      	ldr	r3, [pc, #460]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	4a72      	ldr	r2, [pc, #456]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 8002474:	f023 0304 	bic.w	r3, r3, #4
 8002478:	6213      	str	r3, [r2, #32]
 800247a:	e01c      	b.n	80024b6 <HAL_RCC_OscConfig+0x36e>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	2b05      	cmp	r3, #5
 8002482:	d10c      	bne.n	800249e <HAL_RCC_OscConfig+0x356>
 8002484:	4b6d      	ldr	r3, [pc, #436]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	4a6c      	ldr	r2, [pc, #432]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 800248a:	f043 0304 	orr.w	r3, r3, #4
 800248e:	6213      	str	r3, [r2, #32]
 8002490:	4b6a      	ldr	r3, [pc, #424]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	4a69      	ldr	r2, [pc, #420]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	6213      	str	r3, [r2, #32]
 800249c:	e00b      	b.n	80024b6 <HAL_RCC_OscConfig+0x36e>
 800249e:	4b67      	ldr	r3, [pc, #412]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	4a66      	ldr	r2, [pc, #408]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 80024a4:	f023 0301 	bic.w	r3, r3, #1
 80024a8:	6213      	str	r3, [r2, #32]
 80024aa:	4b64      	ldr	r3, [pc, #400]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	4a63      	ldr	r2, [pc, #396]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 80024b0:	f023 0304 	bic.w	r3, r3, #4
 80024b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d015      	beq.n	80024ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024be:	f7ff fb7f 	bl	8001bc0 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c4:	e00a      	b.n	80024dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c6:	f7ff fb7b 	bl	8001bc0 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e0ab      	b.n	8002634 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024dc:	4b57      	ldr	r3, [pc, #348]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0ee      	beq.n	80024c6 <HAL_RCC_OscConfig+0x37e>
 80024e8:	e014      	b.n	8002514 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ea:	f7ff fb69 	bl	8001bc0 <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f0:	e00a      	b.n	8002508 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f2:	f7ff fb65 	bl	8001bc0 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002500:	4293      	cmp	r3, r2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e095      	b.n	8002634 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002508:	4b4c      	ldr	r3, [pc, #304]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1ee      	bne.n	80024f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002514:	7dfb      	ldrb	r3, [r7, #23]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d105      	bne.n	8002526 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800251a:	4b48      	ldr	r3, [pc, #288]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	4a47      	ldr	r2, [pc, #284]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 8002520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002524:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 8081 	beq.w	8002632 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002530:	4b42      	ldr	r3, [pc, #264]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 030c 	and.w	r3, r3, #12
 8002538:	2b08      	cmp	r3, #8
 800253a:	d061      	beq.n	8002600 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d146      	bne.n	80025d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002544:	4b3f      	ldr	r3, [pc, #252]	; (8002644 <HAL_RCC_OscConfig+0x4fc>)
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254a:	f7ff fb39 	bl	8001bc0 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002552:	f7ff fb35 	bl	8001bc0 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e067      	b.n	8002634 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002564:	4b35      	ldr	r3, [pc, #212]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1f0      	bne.n	8002552 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002578:	d108      	bne.n	800258c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800257a:	4b30      	ldr	r3, [pc, #192]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	492d      	ldr	r1, [pc, #180]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 8002588:	4313      	orrs	r3, r2
 800258a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800258c:	4b2b      	ldr	r3, [pc, #172]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a19      	ldr	r1, [r3, #32]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	430b      	orrs	r3, r1
 800259e:	4927      	ldr	r1, [pc, #156]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025a4:	4b27      	ldr	r3, [pc, #156]	; (8002644 <HAL_RCC_OscConfig+0x4fc>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025aa:	f7ff fb09 	bl	8001bc0 <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b2:	f7ff fb05 	bl	8001bc0 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e037      	b.n	8002634 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025c4:	4b1d      	ldr	r3, [pc, #116]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x46a>
 80025d0:	e02f      	b.n	8002632 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d2:	4b1c      	ldr	r3, [pc, #112]	; (8002644 <HAL_RCC_OscConfig+0x4fc>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d8:	f7ff faf2 	bl	8001bc0 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e0:	f7ff faee 	bl	8001bc0 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e020      	b.n	8002634 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f2:	4b12      	ldr	r3, [pc, #72]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f0      	bne.n	80025e0 <HAL_RCC_OscConfig+0x498>
 80025fe:	e018      	b.n	8002632 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d101      	bne.n	800260c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e013      	b.n	8002634 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800260c:	4b0b      	ldr	r3, [pc, #44]	; (800263c <HAL_RCC_OscConfig+0x4f4>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	429a      	cmp	r2, r3
 800261e:	d106      	bne.n	800262e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800262a:	429a      	cmp	r2, r3
 800262c:	d001      	beq.n	8002632 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40021000 	.word	0x40021000
 8002640:	40007000 	.word	0x40007000
 8002644:	42420060 	.word	0x42420060

08002648 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e0d0      	b.n	80027fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800265c:	4b6a      	ldr	r3, [pc, #424]	; (8002808 <HAL_RCC_ClockConfig+0x1c0>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	429a      	cmp	r2, r3
 8002668:	d910      	bls.n	800268c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266a:	4b67      	ldr	r3, [pc, #412]	; (8002808 <HAL_RCC_ClockConfig+0x1c0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f023 0207 	bic.w	r2, r3, #7
 8002672:	4965      	ldr	r1, [pc, #404]	; (8002808 <HAL_RCC_ClockConfig+0x1c0>)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	4313      	orrs	r3, r2
 8002678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800267a:	4b63      	ldr	r3, [pc, #396]	; (8002808 <HAL_RCC_ClockConfig+0x1c0>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	429a      	cmp	r2, r3
 8002686:	d001      	beq.n	800268c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e0b8      	b.n	80027fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d020      	beq.n	80026da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026a4:	4b59      	ldr	r3, [pc, #356]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	4a58      	ldr	r2, [pc, #352]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0308 	and.w	r3, r3, #8
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026bc:	4b53      	ldr	r3, [pc, #332]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	4a52      	ldr	r2, [pc, #328]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 80026c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c8:	4b50      	ldr	r3, [pc, #320]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	494d      	ldr	r1, [pc, #308]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d040      	beq.n	8002768 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d107      	bne.n	80026fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ee:	4b47      	ldr	r3, [pc, #284]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d115      	bne.n	8002726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e07f      	b.n	80027fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b02      	cmp	r3, #2
 8002704:	d107      	bne.n	8002716 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002706:	4b41      	ldr	r3, [pc, #260]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d109      	bne.n	8002726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e073      	b.n	80027fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002716:	4b3d      	ldr	r3, [pc, #244]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e06b      	b.n	80027fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002726:	4b39      	ldr	r3, [pc, #228]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f023 0203 	bic.w	r2, r3, #3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	4936      	ldr	r1, [pc, #216]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 8002734:	4313      	orrs	r3, r2
 8002736:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002738:	f7ff fa42 	bl	8001bc0 <HAL_GetTick>
 800273c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273e:	e00a      	b.n	8002756 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002740:	f7ff fa3e 	bl	8001bc0 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	f241 3288 	movw	r2, #5000	; 0x1388
 800274e:	4293      	cmp	r3, r2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e053      	b.n	80027fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002756:	4b2d      	ldr	r3, [pc, #180]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f003 020c 	and.w	r2, r3, #12
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	429a      	cmp	r2, r3
 8002766:	d1eb      	bne.n	8002740 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002768:	4b27      	ldr	r3, [pc, #156]	; (8002808 <HAL_RCC_ClockConfig+0x1c0>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	429a      	cmp	r2, r3
 8002774:	d210      	bcs.n	8002798 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002776:	4b24      	ldr	r3, [pc, #144]	; (8002808 <HAL_RCC_ClockConfig+0x1c0>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f023 0207 	bic.w	r2, r3, #7
 800277e:	4922      	ldr	r1, [pc, #136]	; (8002808 <HAL_RCC_ClockConfig+0x1c0>)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	4313      	orrs	r3, r2
 8002784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002786:	4b20      	ldr	r3, [pc, #128]	; (8002808 <HAL_RCC_ClockConfig+0x1c0>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d001      	beq.n	8002798 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e032      	b.n	80027fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d008      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027a4:	4b19      	ldr	r3, [pc, #100]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	4916      	ldr	r1, [pc, #88]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d009      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027c2:	4b12      	ldr	r3, [pc, #72]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	490e      	ldr	r1, [pc, #56]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027d6:	f000 f821 	bl	800281c <HAL_RCC_GetSysClockFreq>
 80027da:	4602      	mov	r2, r0
 80027dc:	4b0b      	ldr	r3, [pc, #44]	; (800280c <HAL_RCC_ClockConfig+0x1c4>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	091b      	lsrs	r3, r3, #4
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	490a      	ldr	r1, [pc, #40]	; (8002810 <HAL_RCC_ClockConfig+0x1c8>)
 80027e8:	5ccb      	ldrb	r3, [r1, r3]
 80027ea:	fa22 f303 	lsr.w	r3, r2, r3
 80027ee:	4a09      	ldr	r2, [pc, #36]	; (8002814 <HAL_RCC_ClockConfig+0x1cc>)
 80027f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027f2:	4b09      	ldr	r3, [pc, #36]	; (8002818 <HAL_RCC_ClockConfig+0x1d0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff f9a0 	bl	8001b3c <HAL_InitTick>

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40022000 	.word	0x40022000
 800280c:	40021000 	.word	0x40021000
 8002810:	08003160 	.word	0x08003160
 8002814:	20000028 	.word	0x20000028
 8002818:	2000002c 	.word	0x2000002c

0800281c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800281c:	b490      	push	{r4, r7}
 800281e:	b08a      	sub	sp, #40	; 0x28
 8002820:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002822:	4b2a      	ldr	r3, [pc, #168]	; (80028cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002824:	1d3c      	adds	r4, r7, #4
 8002826:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002828:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800282c:	f240 2301 	movw	r3, #513	; 0x201
 8002830:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002832:	2300      	movs	r3, #0
 8002834:	61fb      	str	r3, [r7, #28]
 8002836:	2300      	movs	r3, #0
 8002838:	61bb      	str	r3, [r7, #24]
 800283a:	2300      	movs	r3, #0
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
 800283e:	2300      	movs	r3, #0
 8002840:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002842:	2300      	movs	r3, #0
 8002844:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002846:	4b22      	ldr	r3, [pc, #136]	; (80028d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f003 030c 	and.w	r3, r3, #12
 8002852:	2b04      	cmp	r3, #4
 8002854:	d002      	beq.n	800285c <HAL_RCC_GetSysClockFreq+0x40>
 8002856:	2b08      	cmp	r3, #8
 8002858:	d003      	beq.n	8002862 <HAL_RCC_GetSysClockFreq+0x46>
 800285a:	e02d      	b.n	80028b8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800285c:	4b1d      	ldr	r3, [pc, #116]	; (80028d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800285e:	623b      	str	r3, [r7, #32]
      break;
 8002860:	e02d      	b.n	80028be <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	0c9b      	lsrs	r3, r3, #18
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800286e:	4413      	add	r3, r2
 8002870:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002874:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d013      	beq.n	80028a8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002880:	4b13      	ldr	r3, [pc, #76]	; (80028d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	0c5b      	lsrs	r3, r3, #17
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800288e:	4413      	add	r3, r2
 8002890:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002894:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	4a0e      	ldr	r2, [pc, #56]	; (80028d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800289a:	fb02 f203 	mul.w	r2, r2, r3
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
 80028a6:	e004      	b.n	80028b2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	4a0b      	ldr	r2, [pc, #44]	; (80028d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028ac:	fb02 f303 	mul.w	r3, r2, r3
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	623b      	str	r3, [r7, #32]
      break;
 80028b6:	e002      	b.n	80028be <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028b8:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028ba:	623b      	str	r3, [r7, #32]
      break;
 80028bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028be:	6a3b      	ldr	r3, [r7, #32]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3728      	adds	r7, #40	; 0x28
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc90      	pop	{r4, r7}
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	08003150 	.word	0x08003150
 80028d0:	40021000 	.word	0x40021000
 80028d4:	007a1200 	.word	0x007a1200
 80028d8:	003d0900 	.word	0x003d0900

080028dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028e4:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <RCC_Delay+0x34>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a0a      	ldr	r2, [pc, #40]	; (8002914 <RCC_Delay+0x38>)
 80028ea:	fba2 2303 	umull	r2, r3, r2, r3
 80028ee:	0a5b      	lsrs	r3, r3, #9
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	fb02 f303 	mul.w	r3, r2, r3
 80028f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028f8:	bf00      	nop
  }
  while (Delay --);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1e5a      	subs	r2, r3, #1
 80028fe:	60fa      	str	r2, [r7, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f9      	bne.n	80028f8 <RCC_Delay+0x1c>
}
 8002904:	bf00      	nop
 8002906:	bf00      	nop
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr
 8002910:	20000028 	.word	0x20000028
 8002914:	10624dd3 	.word	0x10624dd3

08002918 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e041      	b.n	80029ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7ff f864 	bl	8001a0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3304      	adds	r3, #4
 8002954:	4619      	mov	r1, r3
 8002956:	4610      	mov	r0, r2
 8002958:	f000 fa6a 	bl	8002e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
	...

080029b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d001      	beq.n	80029d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e035      	b.n	8002a3c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2202      	movs	r2, #2
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0201 	orr.w	r2, r2, #1
 80029e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a16      	ldr	r2, [pc, #88]	; (8002a48 <HAL_TIM_Base_Start_IT+0x90>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d009      	beq.n	8002a06 <HAL_TIM_Base_Start_IT+0x4e>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029fa:	d004      	beq.n	8002a06 <HAL_TIM_Base_Start_IT+0x4e>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a12      	ldr	r2, [pc, #72]	; (8002a4c <HAL_TIM_Base_Start_IT+0x94>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d111      	bne.n	8002a2a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2b06      	cmp	r3, #6
 8002a16:	d010      	beq.n	8002a3a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0201 	orr.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a28:	e007      	b.n	8002a3a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f042 0201 	orr.w	r2, r2, #1
 8002a38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	40012c00 	.word	0x40012c00
 8002a4c:	40000400 	.word	0x40000400

08002a50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d122      	bne.n	8002aac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d11b      	bne.n	8002aac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f06f 0202 	mvn.w	r2, #2
 8002a7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f9b1 	bl	8002dfa <HAL_TIM_IC_CaptureCallback>
 8002a98:	e005      	b.n	8002aa6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f9a4 	bl	8002de8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 f9b3 	bl	8002e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	f003 0304 	and.w	r3, r3, #4
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d122      	bne.n	8002b00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b04      	cmp	r3, #4
 8002ac6:	d11b      	bne.n	8002b00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f06f 0204 	mvn.w	r2, #4
 8002ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f987 	bl	8002dfa <HAL_TIM_IC_CaptureCallback>
 8002aec:	e005      	b.n	8002afa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f97a 	bl	8002de8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 f989 	bl	8002e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b08      	cmp	r3, #8
 8002b0c:	d122      	bne.n	8002b54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f003 0308 	and.w	r3, r3, #8
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	d11b      	bne.n	8002b54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f06f 0208 	mvn.w	r2, #8
 8002b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2204      	movs	r2, #4
 8002b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f95d 	bl	8002dfa <HAL_TIM_IC_CaptureCallback>
 8002b40:	e005      	b.n	8002b4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f950 	bl	8002de8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 f95f 	bl	8002e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	f003 0310 	and.w	r3, r3, #16
 8002b5e:	2b10      	cmp	r3, #16
 8002b60:	d122      	bne.n	8002ba8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	f003 0310 	and.w	r3, r3, #16
 8002b6c:	2b10      	cmp	r3, #16
 8002b6e:	d11b      	bne.n	8002ba8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f06f 0210 	mvn.w	r2, #16
 8002b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2208      	movs	r2, #8
 8002b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f933 	bl	8002dfa <HAL_TIM_IC_CaptureCallback>
 8002b94:	e005      	b.n	8002ba2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f926 	bl	8002de8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 f935 	bl	8002e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d10e      	bne.n	8002bd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d107      	bne.n	8002bd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f06f 0201 	mvn.w	r2, #1
 8002bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7fe fdee 	bl	80017b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bde:	2b80      	cmp	r3, #128	; 0x80
 8002be0:	d10e      	bne.n	8002c00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bec:	2b80      	cmp	r3, #128	; 0x80
 8002bee:	d107      	bne.n	8002c00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fa67 	bl	80030ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0a:	2b40      	cmp	r3, #64	; 0x40
 8002c0c:	d10e      	bne.n	8002c2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c18:	2b40      	cmp	r3, #64	; 0x40
 8002c1a:	d107      	bne.n	8002c2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f8f9 	bl	8002e1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	f003 0320 	and.w	r3, r3, #32
 8002c36:	2b20      	cmp	r3, #32
 8002c38:	d10e      	bne.n	8002c58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f003 0320 	and.w	r3, r3, #32
 8002c44:	2b20      	cmp	r3, #32
 8002c46:	d107      	bne.n	8002c58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f06f 0220 	mvn.w	r2, #32
 8002c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 fa32 	bl	80030bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c58:	bf00      	nop
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d101      	bne.n	8002c78 <HAL_TIM_ConfigClockSource+0x18>
 8002c74:	2302      	movs	r3, #2
 8002c76:	e0b3      	b.n	8002de0 <HAL_TIM_ConfigClockSource+0x180>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2202      	movs	r2, #2
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c9e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cb0:	d03e      	beq.n	8002d30 <HAL_TIM_ConfigClockSource+0xd0>
 8002cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cb6:	f200 8087 	bhi.w	8002dc8 <HAL_TIM_ConfigClockSource+0x168>
 8002cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cbe:	f000 8085 	beq.w	8002dcc <HAL_TIM_ConfigClockSource+0x16c>
 8002cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cc6:	d87f      	bhi.n	8002dc8 <HAL_TIM_ConfigClockSource+0x168>
 8002cc8:	2b70      	cmp	r3, #112	; 0x70
 8002cca:	d01a      	beq.n	8002d02 <HAL_TIM_ConfigClockSource+0xa2>
 8002ccc:	2b70      	cmp	r3, #112	; 0x70
 8002cce:	d87b      	bhi.n	8002dc8 <HAL_TIM_ConfigClockSource+0x168>
 8002cd0:	2b60      	cmp	r3, #96	; 0x60
 8002cd2:	d050      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x116>
 8002cd4:	2b60      	cmp	r3, #96	; 0x60
 8002cd6:	d877      	bhi.n	8002dc8 <HAL_TIM_ConfigClockSource+0x168>
 8002cd8:	2b50      	cmp	r3, #80	; 0x50
 8002cda:	d03c      	beq.n	8002d56 <HAL_TIM_ConfigClockSource+0xf6>
 8002cdc:	2b50      	cmp	r3, #80	; 0x50
 8002cde:	d873      	bhi.n	8002dc8 <HAL_TIM_ConfigClockSource+0x168>
 8002ce0:	2b40      	cmp	r3, #64	; 0x40
 8002ce2:	d058      	beq.n	8002d96 <HAL_TIM_ConfigClockSource+0x136>
 8002ce4:	2b40      	cmp	r3, #64	; 0x40
 8002ce6:	d86f      	bhi.n	8002dc8 <HAL_TIM_ConfigClockSource+0x168>
 8002ce8:	2b30      	cmp	r3, #48	; 0x30
 8002cea:	d064      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x156>
 8002cec:	2b30      	cmp	r3, #48	; 0x30
 8002cee:	d86b      	bhi.n	8002dc8 <HAL_TIM_ConfigClockSource+0x168>
 8002cf0:	2b20      	cmp	r3, #32
 8002cf2:	d060      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x156>
 8002cf4:	2b20      	cmp	r3, #32
 8002cf6:	d867      	bhi.n	8002dc8 <HAL_TIM_ConfigClockSource+0x168>
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d05c      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x156>
 8002cfc:	2b10      	cmp	r3, #16
 8002cfe:	d05a      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002d00:	e062      	b.n	8002dc8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6818      	ldr	r0, [r3, #0]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	6899      	ldr	r1, [r3, #8]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	f000 f95c 	bl	8002fce <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d24:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	609a      	str	r2, [r3, #8]
      break;
 8002d2e:	e04e      	b.n	8002dce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6818      	ldr	r0, [r3, #0]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	6899      	ldr	r1, [r3, #8]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f000 f945 	bl	8002fce <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d52:	609a      	str	r2, [r3, #8]
      break;
 8002d54:	e03b      	b.n	8002dce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	6859      	ldr	r1, [r3, #4]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	461a      	mov	r2, r3
 8002d64:	f000 f8bc 	bl	8002ee0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2150      	movs	r1, #80	; 0x50
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 f913 	bl	8002f9a <TIM_ITRx_SetConfig>
      break;
 8002d74:	e02b      	b.n	8002dce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6818      	ldr	r0, [r3, #0]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	6859      	ldr	r1, [r3, #4]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	461a      	mov	r2, r3
 8002d84:	f000 f8da 	bl	8002f3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2160      	movs	r1, #96	; 0x60
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 f903 	bl	8002f9a <TIM_ITRx_SetConfig>
      break;
 8002d94:	e01b      	b.n	8002dce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6818      	ldr	r0, [r3, #0]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	6859      	ldr	r1, [r3, #4]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	461a      	mov	r2, r3
 8002da4:	f000 f89c 	bl	8002ee0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2140      	movs	r1, #64	; 0x40
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 f8f3 	bl	8002f9a <TIM_ITRx_SetConfig>
      break;
 8002db4:	e00b      	b.n	8002dce <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4610      	mov	r0, r2
 8002dc2:	f000 f8ea 	bl	8002f9a <TIM_ITRx_SetConfig>
        break;
 8002dc6:	e002      	b.n	8002dce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002dc8:	bf00      	nop
 8002dca:	e000      	b.n	8002dce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002dcc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bc80      	pop	{r7}
 8002df8:	4770      	bx	lr

08002dfa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr

08002e0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bc80      	pop	{r7}
 8002e1c:	4770      	bx	lr

08002e1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr

08002e30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a25      	ldr	r2, [pc, #148]	; (8002ed8 <TIM_Base_SetConfig+0xa8>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d007      	beq.n	8002e58 <TIM_Base_SetConfig+0x28>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e4e:	d003      	beq.n	8002e58 <TIM_Base_SetConfig+0x28>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a22      	ldr	r2, [pc, #136]	; (8002edc <TIM_Base_SetConfig+0xac>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d108      	bne.n	8002e6a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a1a      	ldr	r2, [pc, #104]	; (8002ed8 <TIM_Base_SetConfig+0xa8>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d007      	beq.n	8002e82 <TIM_Base_SetConfig+0x52>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e78:	d003      	beq.n	8002e82 <TIM_Base_SetConfig+0x52>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a17      	ldr	r2, [pc, #92]	; (8002edc <TIM_Base_SetConfig+0xac>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d108      	bne.n	8002e94 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a07      	ldr	r2, [pc, #28]	; (8002ed8 <TIM_Base_SetConfig+0xa8>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d103      	bne.n	8002ec8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	615a      	str	r2, [r3, #20]
}
 8002ece:	bf00      	nop
 8002ed0:	3714      	adds	r7, #20
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc80      	pop	{r7}
 8002ed6:	4770      	bx	lr
 8002ed8:	40012c00 	.word	0x40012c00
 8002edc:	40000400 	.word	0x40000400

08002ee0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b087      	sub	sp, #28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	f023 0201 	bic.w	r2, r3, #1
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	011b      	lsls	r3, r3, #4
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f023 030a 	bic.w	r3, r3, #10
 8002f1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	621a      	str	r2, [r3, #32]
}
 8002f32:	bf00      	nop
 8002f34:	371c      	adds	r7, #28
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr

08002f3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b087      	sub	sp, #28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	f023 0210 	bic.w	r2, r3, #16
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f66:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	031b      	lsls	r3, r3, #12
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f78:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	011b      	lsls	r3, r3, #4
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	621a      	str	r2, [r3, #32]
}
 8002f90:	bf00      	nop
 8002f92:	371c      	adds	r7, #28
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc80      	pop	{r7}
 8002f98:	4770      	bx	lr

08002f9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b085      	sub	sp, #20
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
 8002fa2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	f043 0307 	orr.w	r3, r3, #7
 8002fbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	609a      	str	r2, [r3, #8]
}
 8002fc4:	bf00      	nop
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bc80      	pop	{r7}
 8002fcc:	4770      	bx	lr

08002fce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b087      	sub	sp, #28
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	60f8      	str	r0, [r7, #12]
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	607a      	str	r2, [r7, #4]
 8002fda:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fe8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	021a      	lsls	r2, r3, #8
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	609a      	str	r2, [r3, #8]
}
 8003002:	bf00      	nop
 8003004:	371c      	adds	r7, #28
 8003006:	46bd      	mov	sp, r7
 8003008:	bc80      	pop	{r7}
 800300a:	4770      	bx	lr

0800300c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800301c:	2b01      	cmp	r3, #1
 800301e:	d101      	bne.n	8003024 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003020:	2302      	movs	r3, #2
 8003022:	e041      	b.n	80030a8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800304a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	4313      	orrs	r3, r2
 8003054:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a14      	ldr	r2, [pc, #80]	; (80030b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d009      	beq.n	800307c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003070:	d004      	beq.n	800307c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a10      	ldr	r2, [pc, #64]	; (80030b8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d10c      	bne.n	8003096 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003082:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	4313      	orrs	r3, r2
 800308c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3714      	adds	r7, #20
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bc80      	pop	{r7}
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	40012c00 	.word	0x40012c00
 80030b8:	40000400 	.word	0x40000400

080030bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bc80      	pop	{r7}
 80030cc:	4770      	bx	lr

080030ce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr

080030e0 <__libc_init_array>:
 80030e0:	b570      	push	{r4, r5, r6, lr}
 80030e2:	2600      	movs	r6, #0
 80030e4:	4d0c      	ldr	r5, [pc, #48]	; (8003118 <__libc_init_array+0x38>)
 80030e6:	4c0d      	ldr	r4, [pc, #52]	; (800311c <__libc_init_array+0x3c>)
 80030e8:	1b64      	subs	r4, r4, r5
 80030ea:	10a4      	asrs	r4, r4, #2
 80030ec:	42a6      	cmp	r6, r4
 80030ee:	d109      	bne.n	8003104 <__libc_init_array+0x24>
 80030f0:	f000 f822 	bl	8003138 <_init>
 80030f4:	2600      	movs	r6, #0
 80030f6:	4d0a      	ldr	r5, [pc, #40]	; (8003120 <__libc_init_array+0x40>)
 80030f8:	4c0a      	ldr	r4, [pc, #40]	; (8003124 <__libc_init_array+0x44>)
 80030fa:	1b64      	subs	r4, r4, r5
 80030fc:	10a4      	asrs	r4, r4, #2
 80030fe:	42a6      	cmp	r6, r4
 8003100:	d105      	bne.n	800310e <__libc_init_array+0x2e>
 8003102:	bd70      	pop	{r4, r5, r6, pc}
 8003104:	f855 3b04 	ldr.w	r3, [r5], #4
 8003108:	4798      	blx	r3
 800310a:	3601      	adds	r6, #1
 800310c:	e7ee      	b.n	80030ec <__libc_init_array+0xc>
 800310e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003112:	4798      	blx	r3
 8003114:	3601      	adds	r6, #1
 8003116:	e7f2      	b.n	80030fe <__libc_init_array+0x1e>
 8003118:	08003170 	.word	0x08003170
 800311c:	08003170 	.word	0x08003170
 8003120:	08003170 	.word	0x08003170
 8003124:	08003174 	.word	0x08003174

08003128 <memset>:
 8003128:	4603      	mov	r3, r0
 800312a:	4402      	add	r2, r0
 800312c:	4293      	cmp	r3, r2
 800312e:	d100      	bne.n	8003132 <memset+0xa>
 8003130:	4770      	bx	lr
 8003132:	f803 1b01 	strb.w	r1, [r3], #1
 8003136:	e7f9      	b.n	800312c <memset+0x4>

08003138 <_init>:
 8003138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800313a:	bf00      	nop
 800313c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800313e:	bc08      	pop	{r3}
 8003140:	469e      	mov	lr, r3
 8003142:	4770      	bx	lr

08003144 <_fini>:
 8003144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003146:	bf00      	nop
 8003148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800314a:	bc08      	pop	{r3}
 800314c:	469e      	mov	lr, r3
 800314e:	4770      	bx	lr
