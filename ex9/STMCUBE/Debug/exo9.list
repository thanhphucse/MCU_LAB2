
exo9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ed8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002fe4  08002fe4  00012fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003004  08003004  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08003004  08003004  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003004  08003004  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003004  08003004  00013004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003008  08003008  00013008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  0800300c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000034  08003040  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08003040  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008bb5  00000000  00000000  0002005d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001934  00000000  00000000  00028c12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a18  00000000  00000000  0002a548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000908  00000000  00000000  0002af60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016763  00000000  00000000  0002b868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a69e  00000000  00000000  00041fcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000821d6  00000000  00000000  0004c669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ce83f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027b4  00000000  00000000  000ce894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000034 	.word	0x20000034
 8000128:	00000000 	.word	0x00000000
 800012c:	08002fcc 	.word	0x08002fcc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000038 	.word	0x20000038
 8000148:	08002fcc 	.word	0x08002fcc

0800014c <clock>:
 *      Author: Welcome
 */
#include "clock.h"
#include "global.h"

void clock(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	second++;
 8000150:	4b13      	ldr	r3, [pc, #76]	; (80001a0 <clock+0x54>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	3301      	adds	r3, #1
 8000156:	4a12      	ldr	r2, [pc, #72]	; (80001a0 <clock+0x54>)
 8000158:	6013      	str	r3, [r2, #0]
	if(second == 60)
 800015a:	4b11      	ldr	r3, [pc, #68]	; (80001a0 <clock+0x54>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	2b3c      	cmp	r3, #60	; 0x3c
 8000160:	d107      	bne.n	8000172 <clock+0x26>
	{
		minute++;
 8000162:	4b10      	ldr	r3, [pc, #64]	; (80001a4 <clock+0x58>)
 8000164:	681b      	ldr	r3, [r3, #0]
 8000166:	3301      	adds	r3, #1
 8000168:	4a0e      	ldr	r2, [pc, #56]	; (80001a4 <clock+0x58>)
 800016a:	6013      	str	r3, [r2, #0]
		second = 0;
 800016c:	4b0c      	ldr	r3, [pc, #48]	; (80001a0 <clock+0x54>)
 800016e:	2200      	movs	r2, #0
 8000170:	601a      	str	r2, [r3, #0]
	}

	if(minute == 60)
 8000172:	4b0c      	ldr	r3, [pc, #48]	; (80001a4 <clock+0x58>)
 8000174:	681b      	ldr	r3, [r3, #0]
 8000176:	2b3c      	cmp	r3, #60	; 0x3c
 8000178:	d107      	bne.n	800018a <clock+0x3e>
	{
		hour++;
 800017a:	4b0b      	ldr	r3, [pc, #44]	; (80001a8 <clock+0x5c>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	3301      	adds	r3, #1
 8000180:	4a09      	ldr	r2, [pc, #36]	; (80001a8 <clock+0x5c>)
 8000182:	6013      	str	r3, [r2, #0]
		minute = 0;
 8000184:	4b07      	ldr	r3, [pc, #28]	; (80001a4 <clock+0x58>)
 8000186:	2200      	movs	r2, #0
 8000188:	601a      	str	r2, [r3, #0]
	}

	if(hour == 24) hour = 0;
 800018a:	4b07      	ldr	r3, [pc, #28]	; (80001a8 <clock+0x5c>)
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	2b18      	cmp	r3, #24
 8000190:	d102      	bne.n	8000198 <clock+0x4c>
 8000192:	4b05      	ldr	r3, [pc, #20]	; (80001a8 <clock+0x5c>)
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	20000020 	.word	0x20000020
 80001a4:	2000001c 	.word	0x2000001c
 80001a8:	20000018 	.word	0x20000018

080001ac <updateClockBuffer>:
#include "global.h"

int index_led = 0;
int led_buffer [4] = {3, 4, 5, 7};

void updateClockBuffer(){
 80001ac:	b480      	push	{r7}
 80001ae:	af00      	add	r7, sp, #0
	if(hour < 10)
 80001b0:	4b29      	ldr	r3, [pc, #164]	; (8000258 <updateClockBuffer+0xac>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	2b09      	cmp	r3, #9
 80001b6:	dc06      	bgt.n	80001c6 <updateClockBuffer+0x1a>
	{
		led_buffer[0] = 0;
 80001b8:	4b28      	ldr	r3, [pc, #160]	; (800025c <updateClockBuffer+0xb0>)
 80001ba:	2200      	movs	r2, #0
 80001bc:	601a      	str	r2, [r3, #0]
		led_buffer[1] = hour;
 80001be:	4b26      	ldr	r3, [pc, #152]	; (8000258 <updateClockBuffer+0xac>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	4a26      	ldr	r2, [pc, #152]	; (800025c <updateClockBuffer+0xb0>)
 80001c4:	6053      	str	r3, [r2, #4]
	}
	if(hour >= 10)
 80001c6:	4b24      	ldr	r3, [pc, #144]	; (8000258 <updateClockBuffer+0xac>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	2b09      	cmp	r3, #9
 80001cc:	dd18      	ble.n	8000200 <updateClockBuffer+0x54>
	{
		led_buffer[0] = hour/10;
 80001ce:	4b22      	ldr	r3, [pc, #136]	; (8000258 <updateClockBuffer+0xac>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a23      	ldr	r2, [pc, #140]	; (8000260 <updateClockBuffer+0xb4>)
 80001d4:	fb82 1203 	smull	r1, r2, r2, r3
 80001d8:	1092      	asrs	r2, r2, #2
 80001da:	17db      	asrs	r3, r3, #31
 80001dc:	1ad3      	subs	r3, r2, r3
 80001de:	4a1f      	ldr	r2, [pc, #124]	; (800025c <updateClockBuffer+0xb0>)
 80001e0:	6013      	str	r3, [r2, #0]
		led_buffer[1] = hour%10;
 80001e2:	4b1d      	ldr	r3, [pc, #116]	; (8000258 <updateClockBuffer+0xac>)
 80001e4:	6819      	ldr	r1, [r3, #0]
 80001e6:	4b1e      	ldr	r3, [pc, #120]	; (8000260 <updateClockBuffer+0xb4>)
 80001e8:	fb83 2301 	smull	r2, r3, r3, r1
 80001ec:	109a      	asrs	r2, r3, #2
 80001ee:	17cb      	asrs	r3, r1, #31
 80001f0:	1ad2      	subs	r2, r2, r3
 80001f2:	4613      	mov	r3, r2
 80001f4:	009b      	lsls	r3, r3, #2
 80001f6:	4413      	add	r3, r2
 80001f8:	005b      	lsls	r3, r3, #1
 80001fa:	1aca      	subs	r2, r1, r3
 80001fc:	4b17      	ldr	r3, [pc, #92]	; (800025c <updateClockBuffer+0xb0>)
 80001fe:	605a      	str	r2, [r3, #4]
	}

	if(minute < 10)
 8000200:	4b18      	ldr	r3, [pc, #96]	; (8000264 <updateClockBuffer+0xb8>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	2b09      	cmp	r3, #9
 8000206:	dc06      	bgt.n	8000216 <updateClockBuffer+0x6a>
	{
		led_buffer[2] = 0;
 8000208:	4b14      	ldr	r3, [pc, #80]	; (800025c <updateClockBuffer+0xb0>)
 800020a:	2200      	movs	r2, #0
 800020c:	609a      	str	r2, [r3, #8]
		led_buffer[3] = minute;
 800020e:	4b15      	ldr	r3, [pc, #84]	; (8000264 <updateClockBuffer+0xb8>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a12      	ldr	r2, [pc, #72]	; (800025c <updateClockBuffer+0xb0>)
 8000214:	60d3      	str	r3, [r2, #12]
	}
	if(minute >= 10)
 8000216:	4b13      	ldr	r3, [pc, #76]	; (8000264 <updateClockBuffer+0xb8>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	2b09      	cmp	r3, #9
 800021c:	dd18      	ble.n	8000250 <updateClockBuffer+0xa4>
	{
		led_buffer[2] = (int)minute/10;
 800021e:	4b11      	ldr	r3, [pc, #68]	; (8000264 <updateClockBuffer+0xb8>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	4a0f      	ldr	r2, [pc, #60]	; (8000260 <updateClockBuffer+0xb4>)
 8000224:	fb82 1203 	smull	r1, r2, r2, r3
 8000228:	1092      	asrs	r2, r2, #2
 800022a:	17db      	asrs	r3, r3, #31
 800022c:	1ad3      	subs	r3, r2, r3
 800022e:	4a0b      	ldr	r2, [pc, #44]	; (800025c <updateClockBuffer+0xb0>)
 8000230:	6093      	str	r3, [r2, #8]
		led_buffer[3] = (int)minute%10;
 8000232:	4b0c      	ldr	r3, [pc, #48]	; (8000264 <updateClockBuffer+0xb8>)
 8000234:	6819      	ldr	r1, [r3, #0]
 8000236:	4b0a      	ldr	r3, [pc, #40]	; (8000260 <updateClockBuffer+0xb4>)
 8000238:	fb83 2301 	smull	r2, r3, r3, r1
 800023c:	109a      	asrs	r2, r3, #2
 800023e:	17cb      	asrs	r3, r1, #31
 8000240:	1ad2      	subs	r2, r2, r3
 8000242:	4613      	mov	r3, r2
 8000244:	009b      	lsls	r3, r3, #2
 8000246:	4413      	add	r3, r2
 8000248:	005b      	lsls	r3, r3, #1
 800024a:	1aca      	subs	r2, r1, r3
 800024c:	4b03      	ldr	r3, [pc, #12]	; (800025c <updateClockBuffer+0xb0>)
 800024e:	60da      	str	r2, [r3, #12]
	}
}
 8000250:	bf00      	nop
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr
 8000258:	20000018 	.word	0x20000018
 800025c:	20000000 	.word	0x20000000
 8000260:	66666667 	.word	0x66666667
 8000264:	2000001c 	.word	0x2000001c

08000268 <display7SEG>:
 */
#include "control_led.h"
#include "main.h"


void display7SEG(int num){
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
	if(num == 0)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d122      	bne.n	80002bc <display7SEG+0x54>
	{
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000276:	2200      	movs	r2, #0
 8000278:	2101      	movs	r1, #1
 800027a:	48bd      	ldr	r0, [pc, #756]	; (8000570 <display7SEG+0x308>)
 800027c:	f001 fe7c 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000280:	2200      	movs	r2, #0
 8000282:	2102      	movs	r1, #2
 8000284:	48ba      	ldr	r0, [pc, #744]	; (8000570 <display7SEG+0x308>)
 8000286:	f001 fe77 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 800028a:	2200      	movs	r2, #0
 800028c:	2104      	movs	r1, #4
 800028e:	48b8      	ldr	r0, [pc, #736]	; (8000570 <display7SEG+0x308>)
 8000290:	f001 fe72 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000294:	2200      	movs	r2, #0
 8000296:	2108      	movs	r1, #8
 8000298:	48b5      	ldr	r0, [pc, #724]	; (8000570 <display7SEG+0x308>)
 800029a:	f001 fe6d 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 800029e:	2200      	movs	r2, #0
 80002a0:	2110      	movs	r1, #16
 80002a2:	48b3      	ldr	r0, [pc, #716]	; (8000570 <display7SEG+0x308>)
 80002a4:	f001 fe68 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 80002a8:	2200      	movs	r2, #0
 80002aa:	2120      	movs	r1, #32
 80002ac:	48b0      	ldr	r0, [pc, #704]	; (8000570 <display7SEG+0x308>)
 80002ae:	f001 fe63 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 80002b2:	2201      	movs	r2, #1
 80002b4:	2140      	movs	r1, #64	; 0x40
 80002b6:	48ae      	ldr	r0, [pc, #696]	; (8000570 <display7SEG+0x308>)
 80002b8:	f001 fe5e 	bl	8001f78 <HAL_GPIO_WritePin>
	}
	if(num == 1)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2b01      	cmp	r3, #1
 80002c0:	d122      	bne.n	8000308 <display7SEG+0xa0>
	{
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_SET);
 80002c2:	2201      	movs	r2, #1
 80002c4:	2101      	movs	r1, #1
 80002c6:	48aa      	ldr	r0, [pc, #680]	; (8000570 <display7SEG+0x308>)
 80002c8:	f001 fe56 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80002cc:	2200      	movs	r2, #0
 80002ce:	2102      	movs	r1, #2
 80002d0:	48a7      	ldr	r0, [pc, #668]	; (8000570 <display7SEG+0x308>)
 80002d2:	f001 fe51 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80002d6:	2200      	movs	r2, #0
 80002d8:	2104      	movs	r1, #4
 80002da:	48a5      	ldr	r0, [pc, #660]	; (8000570 <display7SEG+0x308>)
 80002dc:	f001 fe4c 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 80002e0:	2201      	movs	r2, #1
 80002e2:	2108      	movs	r1, #8
 80002e4:	48a2      	ldr	r0, [pc, #648]	; (8000570 <display7SEG+0x308>)
 80002e6:	f001 fe47 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 80002ea:	2201      	movs	r2, #1
 80002ec:	2110      	movs	r1, #16
 80002ee:	48a0      	ldr	r0, [pc, #640]	; (8000570 <display7SEG+0x308>)
 80002f0:	f001 fe42 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 80002f4:	2201      	movs	r2, #1
 80002f6:	2120      	movs	r1, #32
 80002f8:	489d      	ldr	r0, [pc, #628]	; (8000570 <display7SEG+0x308>)
 80002fa:	f001 fe3d 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 80002fe:	2201      	movs	r2, #1
 8000300:	2140      	movs	r1, #64	; 0x40
 8000302:	489b      	ldr	r0, [pc, #620]	; (8000570 <display7SEG+0x308>)
 8000304:	f001 fe38 	bl	8001f78 <HAL_GPIO_WritePin>
	}
	if(num == 2)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	2b02      	cmp	r3, #2
 800030c:	d122      	bne.n	8000354 <display7SEG+0xec>
	{
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 800030e:	2200      	movs	r2, #0
 8000310:	2101      	movs	r1, #1
 8000312:	4897      	ldr	r0, [pc, #604]	; (8000570 <display7SEG+0x308>)
 8000314:	f001 fe30 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000318:	2200      	movs	r2, #0
 800031a:	2102      	movs	r1, #2
 800031c:	4894      	ldr	r0, [pc, #592]	; (8000570 <display7SEG+0x308>)
 800031e:	f001 fe2b 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_SET);
 8000322:	2201      	movs	r2, #1
 8000324:	2104      	movs	r1, #4
 8000326:	4892      	ldr	r0, [pc, #584]	; (8000570 <display7SEG+0x308>)
 8000328:	f001 fe26 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 800032c:	2200      	movs	r2, #0
 800032e:	2108      	movs	r1, #8
 8000330:	488f      	ldr	r0, [pc, #572]	; (8000570 <display7SEG+0x308>)
 8000332:	f001 fe21 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000336:	2200      	movs	r2, #0
 8000338:	2110      	movs	r1, #16
 800033a:	488d      	ldr	r0, [pc, #564]	; (8000570 <display7SEG+0x308>)
 800033c:	f001 fe1c 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000340:	2201      	movs	r2, #1
 8000342:	2120      	movs	r1, #32
 8000344:	488a      	ldr	r0, [pc, #552]	; (8000570 <display7SEG+0x308>)
 8000346:	f001 fe17 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 800034a:	2200      	movs	r2, #0
 800034c:	2140      	movs	r1, #64	; 0x40
 800034e:	4888      	ldr	r0, [pc, #544]	; (8000570 <display7SEG+0x308>)
 8000350:	f001 fe12 	bl	8001f78 <HAL_GPIO_WritePin>

	}
	if(num == 3)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	2b03      	cmp	r3, #3
 8000358:	d122      	bne.n	80003a0 <display7SEG+0x138>
	{
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	2101      	movs	r1, #1
 800035e:	4884      	ldr	r0, [pc, #528]	; (8000570 <display7SEG+0x308>)
 8000360:	f001 fe0a 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	2102      	movs	r1, #2
 8000368:	4881      	ldr	r0, [pc, #516]	; (8000570 <display7SEG+0x308>)
 800036a:	f001 fe05 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	2104      	movs	r1, #4
 8000372:	487f      	ldr	r0, [pc, #508]	; (8000570 <display7SEG+0x308>)
 8000374:	f001 fe00 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2108      	movs	r1, #8
 800037c:	487c      	ldr	r0, [pc, #496]	; (8000570 <display7SEG+0x308>)
 800037e:	f001 fdfb 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000382:	2201      	movs	r2, #1
 8000384:	2110      	movs	r1, #16
 8000386:	487a      	ldr	r0, [pc, #488]	; (8000570 <display7SEG+0x308>)
 8000388:	f001 fdf6 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 800038c:	2201      	movs	r2, #1
 800038e:	2120      	movs	r1, #32
 8000390:	4877      	ldr	r0, [pc, #476]	; (8000570 <display7SEG+0x308>)
 8000392:	f001 fdf1 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000396:	2200      	movs	r2, #0
 8000398:	2140      	movs	r1, #64	; 0x40
 800039a:	4875      	ldr	r0, [pc, #468]	; (8000570 <display7SEG+0x308>)
 800039c:	f001 fdec 	bl	8001f78 <HAL_GPIO_WritePin>
	}
	if(num == 4)
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	2b04      	cmp	r3, #4
 80003a4:	d122      	bne.n	80003ec <display7SEG+0x184>
	{
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_SET);
 80003a6:	2201      	movs	r2, #1
 80003a8:	2101      	movs	r1, #1
 80003aa:	4871      	ldr	r0, [pc, #452]	; (8000570 <display7SEG+0x308>)
 80003ac:	f001 fde4 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80003b0:	2200      	movs	r2, #0
 80003b2:	2102      	movs	r1, #2
 80003b4:	486e      	ldr	r0, [pc, #440]	; (8000570 <display7SEG+0x308>)
 80003b6:	f001 fddf 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2104      	movs	r1, #4
 80003be:	486c      	ldr	r0, [pc, #432]	; (8000570 <display7SEG+0x308>)
 80003c0:	f001 fdda 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 80003c4:	2201      	movs	r2, #1
 80003c6:	2108      	movs	r1, #8
 80003c8:	4869      	ldr	r0, [pc, #420]	; (8000570 <display7SEG+0x308>)
 80003ca:	f001 fdd5 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 80003ce:	2201      	movs	r2, #1
 80003d0:	2110      	movs	r1, #16
 80003d2:	4867      	ldr	r0, [pc, #412]	; (8000570 <display7SEG+0x308>)
 80003d4:	f001 fdd0 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	2120      	movs	r1, #32
 80003dc:	4864      	ldr	r0, [pc, #400]	; (8000570 <display7SEG+0x308>)
 80003de:	f001 fdcb 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 80003e2:	2200      	movs	r2, #0
 80003e4:	2140      	movs	r1, #64	; 0x40
 80003e6:	4862      	ldr	r0, [pc, #392]	; (8000570 <display7SEG+0x308>)
 80003e8:	f001 fdc6 	bl	8001f78 <HAL_GPIO_WritePin>
	}
	if(num == 5)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	2b05      	cmp	r3, #5
 80003f0:	d122      	bne.n	8000438 <display7SEG+0x1d0>
	{
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 80003f2:	2200      	movs	r2, #0
 80003f4:	2101      	movs	r1, #1
 80003f6:	485e      	ldr	r0, [pc, #376]	; (8000570 <display7SEG+0x308>)
 80003f8:	f001 fdbe 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 80003fc:	2201      	movs	r2, #1
 80003fe:	2102      	movs	r1, #2
 8000400:	485b      	ldr	r0, [pc, #364]	; (8000570 <display7SEG+0x308>)
 8000402:	f001 fdb9 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	2104      	movs	r1, #4
 800040a:	4859      	ldr	r0, [pc, #356]	; (8000570 <display7SEG+0x308>)
 800040c:	f001 fdb4 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	2108      	movs	r1, #8
 8000414:	4856      	ldr	r0, [pc, #344]	; (8000570 <display7SEG+0x308>)
 8000416:	f001 fdaf 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 800041a:	2201      	movs	r2, #1
 800041c:	2110      	movs	r1, #16
 800041e:	4854      	ldr	r0, [pc, #336]	; (8000570 <display7SEG+0x308>)
 8000420:	f001 fdaa 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	2120      	movs	r1, #32
 8000428:	4851      	ldr	r0, [pc, #324]	; (8000570 <display7SEG+0x308>)
 800042a:	f001 fda5 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 800042e:	2200      	movs	r2, #0
 8000430:	2140      	movs	r1, #64	; 0x40
 8000432:	484f      	ldr	r0, [pc, #316]	; (8000570 <display7SEG+0x308>)
 8000434:	f001 fda0 	bl	8001f78 <HAL_GPIO_WritePin>
	}
	if(num == 6)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	2b06      	cmp	r3, #6
 800043c:	d122      	bne.n	8000484 <display7SEG+0x21c>
	{
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 800043e:	2200      	movs	r2, #0
 8000440:	2101      	movs	r1, #1
 8000442:	484b      	ldr	r0, [pc, #300]	; (8000570 <display7SEG+0x308>)
 8000444:	f001 fd98 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 8000448:	2201      	movs	r2, #1
 800044a:	2102      	movs	r1, #2
 800044c:	4848      	ldr	r0, [pc, #288]	; (8000570 <display7SEG+0x308>)
 800044e:	f001 fd93 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000452:	2200      	movs	r2, #0
 8000454:	2104      	movs	r1, #4
 8000456:	4846      	ldr	r0, [pc, #280]	; (8000570 <display7SEG+0x308>)
 8000458:	f001 fd8e 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 800045c:	2200      	movs	r2, #0
 800045e:	2108      	movs	r1, #8
 8000460:	4843      	ldr	r0, [pc, #268]	; (8000570 <display7SEG+0x308>)
 8000462:	f001 fd89 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000466:	2200      	movs	r2, #0
 8000468:	2110      	movs	r1, #16
 800046a:	4841      	ldr	r0, [pc, #260]	; (8000570 <display7SEG+0x308>)
 800046c:	f001 fd84 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000470:	2200      	movs	r2, #0
 8000472:	2120      	movs	r1, #32
 8000474:	483e      	ldr	r0, [pc, #248]	; (8000570 <display7SEG+0x308>)
 8000476:	f001 fd7f 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 800047a:	2200      	movs	r2, #0
 800047c:	2140      	movs	r1, #64	; 0x40
 800047e:	483c      	ldr	r0, [pc, #240]	; (8000570 <display7SEG+0x308>)
 8000480:	f001 fd7a 	bl	8001f78 <HAL_GPIO_WritePin>

	}
	if(num == 7)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	2b07      	cmp	r3, #7
 8000488:	d122      	bne.n	80004d0 <display7SEG+0x268>
	{
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 800048a:	2200      	movs	r2, #0
 800048c:	2101      	movs	r1, #1
 800048e:	4838      	ldr	r0, [pc, #224]	; (8000570 <display7SEG+0x308>)
 8000490:	f001 fd72 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000494:	2200      	movs	r2, #0
 8000496:	2102      	movs	r1, #2
 8000498:	4835      	ldr	r0, [pc, #212]	; (8000570 <display7SEG+0x308>)
 800049a:	f001 fd6d 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 800049e:	2200      	movs	r2, #0
 80004a0:	2104      	movs	r1, #4
 80004a2:	4833      	ldr	r0, [pc, #204]	; (8000570 <display7SEG+0x308>)
 80004a4:	f001 fd68 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 80004a8:	2201      	movs	r2, #1
 80004aa:	2108      	movs	r1, #8
 80004ac:	4830      	ldr	r0, [pc, #192]	; (8000570 <display7SEG+0x308>)
 80004ae:	f001 fd63 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 80004b2:	2201      	movs	r2, #1
 80004b4:	2110      	movs	r1, #16
 80004b6:	482e      	ldr	r0, [pc, #184]	; (8000570 <display7SEG+0x308>)
 80004b8:	f001 fd5e 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 80004bc:	2201      	movs	r2, #1
 80004be:	2120      	movs	r1, #32
 80004c0:	482b      	ldr	r0, [pc, #172]	; (8000570 <display7SEG+0x308>)
 80004c2:	f001 fd59 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 80004c6:	2201      	movs	r2, #1
 80004c8:	2140      	movs	r1, #64	; 0x40
 80004ca:	4829      	ldr	r0, [pc, #164]	; (8000570 <display7SEG+0x308>)
 80004cc:	f001 fd54 	bl	8001f78 <HAL_GPIO_WritePin>
	}
	if(num == 8)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2b08      	cmp	r3, #8
 80004d4:	d122      	bne.n	800051c <display7SEG+0x2b4>
	{
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2101      	movs	r1, #1
 80004da:	4825      	ldr	r0, [pc, #148]	; (8000570 <display7SEG+0x308>)
 80004dc:	f001 fd4c 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2102      	movs	r1, #2
 80004e4:	4822      	ldr	r0, [pc, #136]	; (8000570 <display7SEG+0x308>)
 80004e6:	f001 fd47 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2104      	movs	r1, #4
 80004ee:	4820      	ldr	r0, [pc, #128]	; (8000570 <display7SEG+0x308>)
 80004f0:	f001 fd42 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2108      	movs	r1, #8
 80004f8:	481d      	ldr	r0, [pc, #116]	; (8000570 <display7SEG+0x308>)
 80004fa:	f001 fd3d 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 80004fe:	2200      	movs	r2, #0
 8000500:	2110      	movs	r1, #16
 8000502:	481b      	ldr	r0, [pc, #108]	; (8000570 <display7SEG+0x308>)
 8000504:	f001 fd38 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000508:	2200      	movs	r2, #0
 800050a:	2120      	movs	r1, #32
 800050c:	4818      	ldr	r0, [pc, #96]	; (8000570 <display7SEG+0x308>)
 800050e:	f001 fd33 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000512:	2200      	movs	r2, #0
 8000514:	2140      	movs	r1, #64	; 0x40
 8000516:	4816      	ldr	r0, [pc, #88]	; (8000570 <display7SEG+0x308>)
 8000518:	f001 fd2e 	bl	8001f78 <HAL_GPIO_WritePin>
	}
	if(num == 9)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2b09      	cmp	r3, #9
 8000520:	d122      	bne.n	8000568 <display7SEG+0x300>
	{
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	2101      	movs	r1, #1
 8000526:	4812      	ldr	r0, [pc, #72]	; (8000570 <display7SEG+0x308>)
 8000528:	f001 fd26 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	2102      	movs	r1, #2
 8000530:	480f      	ldr	r0, [pc, #60]	; (8000570 <display7SEG+0x308>)
 8000532:	f001 fd21 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000536:	2200      	movs	r2, #0
 8000538:	2104      	movs	r1, #4
 800053a:	480d      	ldr	r0, [pc, #52]	; (8000570 <display7SEG+0x308>)
 800053c:	f001 fd1c 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	2108      	movs	r1, #8
 8000544:	480a      	ldr	r0, [pc, #40]	; (8000570 <display7SEG+0x308>)
 8000546:	f001 fd17 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 800054a:	2201      	movs	r2, #1
 800054c:	2110      	movs	r1, #16
 800054e:	4808      	ldr	r0, [pc, #32]	; (8000570 <display7SEG+0x308>)
 8000550:	f001 fd12 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	2120      	movs	r1, #32
 8000558:	4805      	ldr	r0, [pc, #20]	; (8000570 <display7SEG+0x308>)
 800055a:	f001 fd0d 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	2140      	movs	r1, #64	; 0x40
 8000562:	4803      	ldr	r0, [pc, #12]	; (8000570 <display7SEG+0x308>)
 8000564:	f001 fd08 	bl	8001f78 <HAL_GPIO_WritePin>
	}
}
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40010c00 	.word	0x40010c00

08000574 <update7SEG>:

void update7SEG (int index)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	2b03      	cmp	r3, #3
 8000580:	d87a      	bhi.n	8000678 <update7SEG+0x104>
 8000582:	a201      	add	r2, pc, #4	; (adr r2, 8000588 <update7SEG+0x14>)
 8000584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000588:	08000599 	.word	0x08000599
 800058c:	080005d1 	.word	0x080005d1
 8000590:	08000609 	.word	0x08000609
 8000594:	08000641 	.word	0x08000641
	switch (index)
	{
		case 0:
			// Display the first 7 SEG with led_buffer [0]
			{
				display7SEG(led_buffer[0]);
 8000598:	4b3a      	ldr	r3, [pc, #232]	; (8000684 <update7SEG+0x110>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4618      	mov	r0, r3
 800059e:	f7ff fe63 	bl	8000268 <display7SEG>
				HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2140      	movs	r1, #64	; 0x40
 80005a6:	4838      	ldr	r0, [pc, #224]	; (8000688 <update7SEG+0x114>)
 80005a8:	f001 fce6 	bl	8001f78 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	2180      	movs	r1, #128	; 0x80
 80005b0:	4835      	ldr	r0, [pc, #212]	; (8000688 <update7SEG+0x114>)
 80005b2:	f001 fce1 	bl	8001f78 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80005b6:	2201      	movs	r2, #1
 80005b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005bc:	4832      	ldr	r0, [pc, #200]	; (8000688 <update7SEG+0x114>)
 80005be:	f001 fcdb 	bl	8001f78 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80005c2:	2201      	movs	r2, #1
 80005c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005c8:	482f      	ldr	r0, [pc, #188]	; (8000688 <update7SEG+0x114>)
 80005ca:	f001 fcd5 	bl	8001f78 <HAL_GPIO_WritePin>
				break;
 80005ce:	e054      	b.n	800067a <update7SEG+0x106>
			}
		case 1:
			// Display the second 7 SEG with led_buffer [1]
			{
				display7SEG(led_buffer[1]);
 80005d0:	4b2c      	ldr	r3, [pc, #176]	; (8000684 <update7SEG+0x110>)
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff fe47 	bl	8000268 <display7SEG>
				HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 80005da:	2201      	movs	r2, #1
 80005dc:	2140      	movs	r1, #64	; 0x40
 80005de:	482a      	ldr	r0, [pc, #168]	; (8000688 <update7SEG+0x114>)
 80005e0:	f001 fcca 	bl	8001f78 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2180      	movs	r1, #128	; 0x80
 80005e8:	4827      	ldr	r0, [pc, #156]	; (8000688 <update7SEG+0x114>)
 80005ea:	f001 fcc5 	bl	8001f78 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80005ee:	2201      	movs	r2, #1
 80005f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f4:	4824      	ldr	r0, [pc, #144]	; (8000688 <update7SEG+0x114>)
 80005f6:	f001 fcbf 	bl	8001f78 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80005fa:	2201      	movs	r2, #1
 80005fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000600:	4821      	ldr	r0, [pc, #132]	; (8000688 <update7SEG+0x114>)
 8000602:	f001 fcb9 	bl	8001f78 <HAL_GPIO_WritePin>
				break;
 8000606:	e038      	b.n	800067a <update7SEG+0x106>
			}
		case 2:
			// Display the third 7 SEG with led_buffer [2]
			{
				display7SEG(led_buffer[2]);
 8000608:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <update7SEG+0x110>)
 800060a:	689b      	ldr	r3, [r3, #8]
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff fe2b 	bl	8000268 <display7SEG>
				HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000612:	2201      	movs	r2, #1
 8000614:	2140      	movs	r1, #64	; 0x40
 8000616:	481c      	ldr	r0, [pc, #112]	; (8000688 <update7SEG+0x114>)
 8000618:	f001 fcae 	bl	8001f78 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 800061c:	2201      	movs	r2, #1
 800061e:	2180      	movs	r1, #128	; 0x80
 8000620:	4819      	ldr	r0, [pc, #100]	; (8000688 <update7SEG+0x114>)
 8000622:	f001 fca9 	bl	8001f78 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	f44f 7180 	mov.w	r1, #256	; 0x100
 800062c:	4816      	ldr	r0, [pc, #88]	; (8000688 <update7SEG+0x114>)
 800062e:	f001 fca3 	bl	8001f78 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000632:	2201      	movs	r2, #1
 8000634:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000638:	4813      	ldr	r0, [pc, #76]	; (8000688 <update7SEG+0x114>)
 800063a:	f001 fc9d 	bl	8001f78 <HAL_GPIO_WritePin>
				break;
 800063e:	e01c      	b.n	800067a <update7SEG+0x106>
			}
		case 3:
			// Display the forth 7 SEG with led_buffer [3]
			{
				display7SEG(led_buffer[3]);
 8000640:	4b10      	ldr	r3, [pc, #64]	; (8000684 <update7SEG+0x110>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff fe0f 	bl	8000268 <display7SEG>
				HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 800064a:	2201      	movs	r2, #1
 800064c:	2140      	movs	r1, #64	; 0x40
 800064e:	480e      	ldr	r0, [pc, #56]	; (8000688 <update7SEG+0x114>)
 8000650:	f001 fc92 	bl	8001f78 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000654:	2201      	movs	r2, #1
 8000656:	2180      	movs	r1, #128	; 0x80
 8000658:	480b      	ldr	r0, [pc, #44]	; (8000688 <update7SEG+0x114>)
 800065a:	f001 fc8d 	bl	8001f78 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 800065e:	2201      	movs	r2, #1
 8000660:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000664:	4808      	ldr	r0, [pc, #32]	; (8000688 <update7SEG+0x114>)
 8000666:	f001 fc87 	bl	8001f78 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <update7SEG+0x114>)
 8000672:	f001 fc81 	bl	8001f78 <HAL_GPIO_WritePin>
				break;
 8000676:	e000      	b.n	800067a <update7SEG+0x106>
			}
		default :
			break ;
 8000678:	bf00      	nop
	}
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000000 	.word	0x20000000
 8000688:	40010800 	.word	0x40010800

0800068c <displayLedMatrix>:
#include "control_matrix.h"

int index_led_matrix = 0;
uint8_t matrix_buffer [8] = {0x18,0x24,0x42,0x42,0x7e,0x42,0x42,0x42};

void displayLedMatrix(int row, int col){
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	6039      	str	r1, [r7, #0]
	int shift = 1;
 8000696:	2301      	movs	r3, #1
 8000698:	60fb      	str	r3, [r7, #12]

	if(row == 0){
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2b00      	cmp	r3, #0
 800069e:	f040 80c3 	bne.w	8000828 <displayLedMatrix+0x19c>
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a8:	48b1      	ldr	r0, [pc, #708]	; (8000970 <displayLedMatrix+0x2e4>)
 80006aa:	f001 fc65 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, GPIO_PIN_SET);
 80006ae:	2201      	movs	r2, #1
 80006b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b4:	48ae      	ldr	r0, [pc, #696]	; (8000970 <displayLedMatrix+0x2e4>)
 80006b6:	f001 fc5f 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, GPIO_PIN_SET);
 80006ba:	2201      	movs	r2, #1
 80006bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006c0:	48ab      	ldr	r0, [pc, #684]	; (8000970 <displayLedMatrix+0x2e4>)
 80006c2:	f001 fc59 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, GPIO_PIN_SET);
 80006c6:	2201      	movs	r2, #1
 80006c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006cc:	48a8      	ldr	r0, [pc, #672]	; (8000970 <displayLedMatrix+0x2e4>)
 80006ce:	f001 fc53 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, GPIO_PIN_SET);
 80006d2:	2201      	movs	r2, #1
 80006d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006d8:	48a5      	ldr	r0, [pc, #660]	; (8000970 <displayLedMatrix+0x2e4>)
 80006da:	f001 fc4d 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, GPIO_PIN_SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e4:	48a2      	ldr	r0, [pc, #648]	; (8000970 <displayLedMatrix+0x2e4>)
 80006e6:	f001 fc47 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, GPIO_PIN_SET);
 80006ea:	2201      	movs	r2, #1
 80006ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006f0:	489f      	ldr	r0, [pc, #636]	; (8000970 <displayLedMatrix+0x2e4>)
 80006f2:	f001 fc41 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, GPIO_PIN_SET);
 80006f6:	2201      	movs	r2, #1
 80006f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006fc:	489c      	ldr	r0, [pc, #624]	; (8000970 <displayLedMatrix+0x2e4>)
 80006fe:	f001 fc3b 	bl	8001f78 <HAL_GPIO_WritePin>
// BSRR, ODR
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1 - (col & shift));
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	b25a      	sxtb	r2, r3
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	b25b      	sxtb	r3, r3
 800070a:	4013      	ands	r3, r2
 800070c:	b25b      	sxtb	r3, r3
 800070e:	b2db      	uxtb	r3, r3
 8000710:	f1c3 0301 	rsb	r3, r3, #1
 8000714:	b2db      	uxtb	r3, r3
 8000716:	461a      	mov	r2, r3
 8000718:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800071c:	4895      	ldr	r0, [pc, #596]	; (8000974 <displayLedMatrix+0x2e8>)
 800071e:	f001 fc2b 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	105b      	asrs	r3, r3, #1
 8000726:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1 - (col & shift));
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	b25a      	sxtb	r2, r3
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	b25b      	sxtb	r3, r3
 8000730:	4013      	ands	r3, r2
 8000732:	b25b      	sxtb	r3, r3
 8000734:	b2db      	uxtb	r3, r3
 8000736:	f1c3 0301 	rsb	r3, r3, #1
 800073a:	b2db      	uxtb	r3, r3
 800073c:	461a      	mov	r2, r3
 800073e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000742:	488c      	ldr	r0, [pc, #560]	; (8000974 <displayLedMatrix+0x2e8>)
 8000744:	f001 fc18 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	105b      	asrs	r3, r3, #1
 800074c:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1 - (col & shift));
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	b25a      	sxtb	r2, r3
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	b25b      	sxtb	r3, r3
 8000756:	4013      	ands	r3, r2
 8000758:	b25b      	sxtb	r3, r3
 800075a:	b2db      	uxtb	r3, r3
 800075c:	f1c3 0301 	rsb	r3, r3, #1
 8000760:	b2db      	uxtb	r3, r3
 8000762:	461a      	mov	r2, r3
 8000764:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000768:	4882      	ldr	r0, [pc, #520]	; (8000974 <displayLedMatrix+0x2e8>)
 800076a:	f001 fc05 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	105b      	asrs	r3, r3, #1
 8000772:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1 - (col & shift));
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	b25a      	sxtb	r2, r3
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	b25b      	sxtb	r3, r3
 800077c:	4013      	ands	r3, r2
 800077e:	b25b      	sxtb	r3, r3
 8000780:	b2db      	uxtb	r3, r3
 8000782:	f1c3 0301 	rsb	r3, r3, #1
 8000786:	b2db      	uxtb	r3, r3
 8000788:	461a      	mov	r2, r3
 800078a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800078e:	4879      	ldr	r0, [pc, #484]	; (8000974 <displayLedMatrix+0x2e8>)
 8000790:	f001 fbf2 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	105b      	asrs	r3, r3, #1
 8000798:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1 - (col & shift));
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	b25a      	sxtb	r2, r3
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	b25b      	sxtb	r3, r3
 80007a2:	4013      	ands	r3, r2
 80007a4:	b25b      	sxtb	r3, r3
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	f1c3 0301 	rsb	r3, r3, #1
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	461a      	mov	r2, r3
 80007b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007b4:	486f      	ldr	r0, [pc, #444]	; (8000974 <displayLedMatrix+0x2e8>)
 80007b6:	f001 fbdf 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	105b      	asrs	r3, r3, #1
 80007be:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1 - (col & shift));
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	b25a      	sxtb	r2, r3
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	b25b      	sxtb	r3, r3
 80007c8:	4013      	ands	r3, r2
 80007ca:	b25b      	sxtb	r3, r3
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	f1c3 0301 	rsb	r3, r3, #1
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	461a      	mov	r2, r3
 80007d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007da:	4866      	ldr	r0, [pc, #408]	; (8000974 <displayLedMatrix+0x2e8>)
 80007dc:	f001 fbcc 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	105b      	asrs	r3, r3, #1
 80007e4:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1 - (col & shift));
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	b25a      	sxtb	r2, r3
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	b25b      	sxtb	r3, r3
 80007ee:	4013      	ands	r3, r2
 80007f0:	b25b      	sxtb	r3, r3
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	f1c3 0301 	rsb	r3, r3, #1
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	461a      	mov	r2, r3
 80007fc:	2108      	movs	r1, #8
 80007fe:	485d      	ldr	r0, [pc, #372]	; (8000974 <displayLedMatrix+0x2e8>)
 8000800:	f001 fbba 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	105b      	asrs	r3, r3, #1
 8000808:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin,  1 - (col & shift));
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	b25a      	sxtb	r2, r3
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	b25b      	sxtb	r3, r3
 8000812:	4013      	ands	r3, r2
 8000814:	b25b      	sxtb	r3, r3
 8000816:	b2db      	uxtb	r3, r3
 8000818:	f1c3 0301 	rsb	r3, r3, #1
 800081c:	b2db      	uxtb	r3, r3
 800081e:	461a      	mov	r2, r3
 8000820:	2104      	movs	r1, #4
 8000822:	4854      	ldr	r0, [pc, #336]	; (8000974 <displayLedMatrix+0x2e8>)
 8000824:	f001 fba8 	bl	8001f78 <HAL_GPIO_WritePin>
	}
	if(row == 1){
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2b01      	cmp	r3, #1
 800082c:	f040 80c8 	bne.w	80009c0 <displayLedMatrix+0x334>
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, GPIO_PIN_SET);
 8000830:	2201      	movs	r2, #1
 8000832:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000836:	484e      	ldr	r0, [pc, #312]	; (8000970 <displayLedMatrix+0x2e4>)
 8000838:	f001 fb9e 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, GPIO_PIN_RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000842:	484b      	ldr	r0, [pc, #300]	; (8000970 <displayLedMatrix+0x2e4>)
 8000844:	f001 fb98 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, GPIO_PIN_SET);
 8000848:	2201      	movs	r2, #1
 800084a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800084e:	4848      	ldr	r0, [pc, #288]	; (8000970 <displayLedMatrix+0x2e4>)
 8000850:	f001 fb92 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, GPIO_PIN_SET);
 8000854:	2201      	movs	r2, #1
 8000856:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800085a:	4845      	ldr	r0, [pc, #276]	; (8000970 <displayLedMatrix+0x2e4>)
 800085c:	f001 fb8c 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, GPIO_PIN_SET);
 8000860:	2201      	movs	r2, #1
 8000862:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000866:	4842      	ldr	r0, [pc, #264]	; (8000970 <displayLedMatrix+0x2e4>)
 8000868:	f001 fb86 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, GPIO_PIN_SET);
 800086c:	2201      	movs	r2, #1
 800086e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000872:	483f      	ldr	r0, [pc, #252]	; (8000970 <displayLedMatrix+0x2e4>)
 8000874:	f001 fb80 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, GPIO_PIN_SET);
 8000878:	2201      	movs	r2, #1
 800087a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800087e:	483c      	ldr	r0, [pc, #240]	; (8000970 <displayLedMatrix+0x2e4>)
 8000880:	f001 fb7a 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, GPIO_PIN_SET);
 8000884:	2201      	movs	r2, #1
 8000886:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800088a:	4839      	ldr	r0, [pc, #228]	; (8000970 <displayLedMatrix+0x2e4>)
 800088c:	f001 fb74 	bl	8001f78 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1 - (col & shift));
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	b25a      	sxtb	r2, r3
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	b25b      	sxtb	r3, r3
 8000898:	4013      	ands	r3, r2
 800089a:	b25b      	sxtb	r3, r3
 800089c:	b2db      	uxtb	r3, r3
 800089e:	f1c3 0301 	rsb	r3, r3, #1
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	461a      	mov	r2, r3
 80008a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008aa:	4832      	ldr	r0, [pc, #200]	; (8000974 <displayLedMatrix+0x2e8>)
 80008ac:	f001 fb64 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	105b      	asrs	r3, r3, #1
 80008b4:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1 - (col & shift));
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	b25a      	sxtb	r2, r3
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	b25b      	sxtb	r3, r3
 80008be:	4013      	ands	r3, r2
 80008c0:	b25b      	sxtb	r3, r3
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	f1c3 0301 	rsb	r3, r3, #1
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	461a      	mov	r2, r3
 80008cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008d0:	4828      	ldr	r0, [pc, #160]	; (8000974 <displayLedMatrix+0x2e8>)
 80008d2:	f001 fb51 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	105b      	asrs	r3, r3, #1
 80008da:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1 - (col & shift));
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	b25a      	sxtb	r2, r3
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	b25b      	sxtb	r3, r3
 80008e4:	4013      	ands	r3, r2
 80008e6:	b25b      	sxtb	r3, r3
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	f1c3 0301 	rsb	r3, r3, #1
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	461a      	mov	r2, r3
 80008f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008f6:	481f      	ldr	r0, [pc, #124]	; (8000974 <displayLedMatrix+0x2e8>)
 80008f8:	f001 fb3e 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	105b      	asrs	r3, r3, #1
 8000900:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1 - (col & shift));
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	b25a      	sxtb	r2, r3
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	b25b      	sxtb	r3, r3
 800090a:	4013      	ands	r3, r2
 800090c:	b25b      	sxtb	r3, r3
 800090e:	b2db      	uxtb	r3, r3
 8000910:	f1c3 0301 	rsb	r3, r3, #1
 8000914:	b2db      	uxtb	r3, r3
 8000916:	461a      	mov	r2, r3
 8000918:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800091c:	4815      	ldr	r0, [pc, #84]	; (8000974 <displayLedMatrix+0x2e8>)
 800091e:	f001 fb2b 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	105b      	asrs	r3, r3, #1
 8000926:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1 - (col & shift));
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	b25a      	sxtb	r2, r3
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	b25b      	sxtb	r3, r3
 8000930:	4013      	ands	r3, r2
 8000932:	b25b      	sxtb	r3, r3
 8000934:	b2db      	uxtb	r3, r3
 8000936:	f1c3 0301 	rsb	r3, r3, #1
 800093a:	b2db      	uxtb	r3, r3
 800093c:	461a      	mov	r2, r3
 800093e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000942:	480c      	ldr	r0, [pc, #48]	; (8000974 <displayLedMatrix+0x2e8>)
 8000944:	f001 fb18 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	105b      	asrs	r3, r3, #1
 800094c:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1 - (col & shift));
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	b25a      	sxtb	r2, r3
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	b25b      	sxtb	r3, r3
 8000956:	4013      	ands	r3, r2
 8000958:	b25b      	sxtb	r3, r3
 800095a:	b2db      	uxtb	r3, r3
 800095c:	f1c3 0301 	rsb	r3, r3, #1
 8000960:	b2db      	uxtb	r3, r3
 8000962:	461a      	mov	r2, r3
 8000964:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000968:	4802      	ldr	r0, [pc, #8]	; (8000974 <displayLedMatrix+0x2e8>)
 800096a:	f001 fb05 	bl	8001f78 <HAL_GPIO_WritePin>
 800096e:	e003      	b.n	8000978 <displayLedMatrix+0x2ec>
 8000970:	40010c00 	.word	0x40010c00
 8000974:	40010800 	.word	0x40010800
		col = col >> 1;
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	105b      	asrs	r3, r3, #1
 800097c:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1 - (col & shift));
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	b25a      	sxtb	r2, r3
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	b25b      	sxtb	r3, r3
 8000986:	4013      	ands	r3, r2
 8000988:	b25b      	sxtb	r3, r3
 800098a:	b2db      	uxtb	r3, r3
 800098c:	f1c3 0301 	rsb	r3, r3, #1
 8000990:	b2db      	uxtb	r3, r3
 8000992:	461a      	mov	r2, r3
 8000994:	2108      	movs	r1, #8
 8000996:	48b2      	ldr	r0, [pc, #712]	; (8000c60 <displayLedMatrix+0x5d4>)
 8000998:	f001 faee 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	105b      	asrs	r3, r3, #1
 80009a0:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin,  1 - (col & shift));
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	b25a      	sxtb	r2, r3
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	b25b      	sxtb	r3, r3
 80009aa:	4013      	ands	r3, r2
 80009ac:	b25b      	sxtb	r3, r3
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	f1c3 0301 	rsb	r3, r3, #1
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	461a      	mov	r2, r3
 80009b8:	2104      	movs	r1, #4
 80009ba:	48a9      	ldr	r0, [pc, #676]	; (8000c60 <displayLedMatrix+0x5d4>)
 80009bc:	f001 fadc 	bl	8001f78 <HAL_GPIO_WritePin>
	}
	if(row == 2){
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	f040 80c3 	bne.w	8000b4e <displayLedMatrix+0x4c2>
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, GPIO_PIN_SET);
 80009c8:	2201      	movs	r2, #1
 80009ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ce:	48a5      	ldr	r0, [pc, #660]	; (8000c64 <displayLedMatrix+0x5d8>)
 80009d0:	f001 fad2 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, GPIO_PIN_SET);
 80009d4:	2201      	movs	r2, #1
 80009d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009da:	48a2      	ldr	r0, [pc, #648]	; (8000c64 <displayLedMatrix+0x5d8>)
 80009dc:	f001 facc 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009e6:	489f      	ldr	r0, [pc, #636]	; (8000c64 <displayLedMatrix+0x5d8>)
 80009e8:	f001 fac6 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, GPIO_PIN_SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009f2:	489c      	ldr	r0, [pc, #624]	; (8000c64 <displayLedMatrix+0x5d8>)
 80009f4:	f001 fac0 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, GPIO_PIN_SET);
 80009f8:	2201      	movs	r2, #1
 80009fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009fe:	4899      	ldr	r0, [pc, #612]	; (8000c64 <displayLedMatrix+0x5d8>)
 8000a00:	f001 faba 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, GPIO_PIN_SET);
 8000a04:	2201      	movs	r2, #1
 8000a06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a0a:	4896      	ldr	r0, [pc, #600]	; (8000c64 <displayLedMatrix+0x5d8>)
 8000a0c:	f001 fab4 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, GPIO_PIN_SET);
 8000a10:	2201      	movs	r2, #1
 8000a12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a16:	4893      	ldr	r0, [pc, #588]	; (8000c64 <displayLedMatrix+0x5d8>)
 8000a18:	f001 faae 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, GPIO_PIN_SET);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a22:	4890      	ldr	r0, [pc, #576]	; (8000c64 <displayLedMatrix+0x5d8>)
 8000a24:	f001 faa8 	bl	8001f78 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1 - (col & shift));
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	b25a      	sxtb	r2, r3
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	b25b      	sxtb	r3, r3
 8000a30:	4013      	ands	r3, r2
 8000a32:	b25b      	sxtb	r3, r3
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	f1c3 0301 	rsb	r3, r3, #1
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a42:	4887      	ldr	r0, [pc, #540]	; (8000c60 <displayLedMatrix+0x5d4>)
 8000a44:	f001 fa98 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	105b      	asrs	r3, r3, #1
 8000a4c:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1 - (col & shift));
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	b25a      	sxtb	r2, r3
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	b25b      	sxtb	r3, r3
 8000a56:	4013      	ands	r3, r2
 8000a58:	b25b      	sxtb	r3, r3
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	f1c3 0301 	rsb	r3, r3, #1
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	461a      	mov	r2, r3
 8000a64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a68:	487d      	ldr	r0, [pc, #500]	; (8000c60 <displayLedMatrix+0x5d4>)
 8000a6a:	f001 fa85 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	105b      	asrs	r3, r3, #1
 8000a72:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1 - (col & shift));
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	b25a      	sxtb	r2, r3
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	b25b      	sxtb	r3, r3
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	b25b      	sxtb	r3, r3
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	f1c3 0301 	rsb	r3, r3, #1
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	461a      	mov	r2, r3
 8000a8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a8e:	4874      	ldr	r0, [pc, #464]	; (8000c60 <displayLedMatrix+0x5d4>)
 8000a90:	f001 fa72 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	105b      	asrs	r3, r3, #1
 8000a98:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1 - (col & shift));
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	b25a      	sxtb	r2, r3
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	b25b      	sxtb	r3, r3
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	b25b      	sxtb	r3, r3
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	f1c3 0301 	rsb	r3, r3, #1
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	461a      	mov	r2, r3
 8000ab0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ab4:	486a      	ldr	r0, [pc, #424]	; (8000c60 <displayLedMatrix+0x5d4>)
 8000ab6:	f001 fa5f 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	105b      	asrs	r3, r3, #1
 8000abe:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1 - (col & shift));
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	b25a      	sxtb	r2, r3
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	b25b      	sxtb	r3, r3
 8000ac8:	4013      	ands	r3, r2
 8000aca:	b25b      	sxtb	r3, r3
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	f1c3 0301 	rsb	r3, r3, #1
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ada:	4861      	ldr	r0, [pc, #388]	; (8000c60 <displayLedMatrix+0x5d4>)
 8000adc:	f001 fa4c 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	105b      	asrs	r3, r3, #1
 8000ae4:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1 - (col & shift));
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	b25a      	sxtb	r2, r3
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	b25b      	sxtb	r3, r3
 8000aee:	4013      	ands	r3, r2
 8000af0:	b25b      	sxtb	r3, r3
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	f1c3 0301 	rsb	r3, r3, #1
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	461a      	mov	r2, r3
 8000afc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b00:	4857      	ldr	r0, [pc, #348]	; (8000c60 <displayLedMatrix+0x5d4>)
 8000b02:	f001 fa39 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	105b      	asrs	r3, r3, #1
 8000b0a:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1 - (col & shift));
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	b25a      	sxtb	r2, r3
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	b25b      	sxtb	r3, r3
 8000b14:	4013      	ands	r3, r2
 8000b16:	b25b      	sxtb	r3, r3
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	f1c3 0301 	rsb	r3, r3, #1
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	461a      	mov	r2, r3
 8000b22:	2108      	movs	r1, #8
 8000b24:	484e      	ldr	r0, [pc, #312]	; (8000c60 <displayLedMatrix+0x5d4>)
 8000b26:	f001 fa27 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	105b      	asrs	r3, r3, #1
 8000b2e:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin,  1 - (col & shift));
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	b25a      	sxtb	r2, r3
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	b25b      	sxtb	r3, r3
 8000b38:	4013      	ands	r3, r2
 8000b3a:	b25b      	sxtb	r3, r3
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	f1c3 0301 	rsb	r3, r3, #1
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	461a      	mov	r2, r3
 8000b46:	2104      	movs	r1, #4
 8000b48:	4845      	ldr	r0, [pc, #276]	; (8000c60 <displayLedMatrix+0x5d4>)
 8000b4a:	f001 fa15 	bl	8001f78 <HAL_GPIO_WritePin>
	}
	if(row == 3){
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b03      	cmp	r3, #3
 8000b52:	f040 80c9 	bne.w	8000ce8 <displayLedMatrix+0x65c>
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, GPIO_PIN_SET);
 8000b56:	2201      	movs	r2, #1
 8000b58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b5c:	4841      	ldr	r0, [pc, #260]	; (8000c64 <displayLedMatrix+0x5d8>)
 8000b5e:	f001 fa0b 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, GPIO_PIN_SET);
 8000b62:	2201      	movs	r2, #1
 8000b64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b68:	483e      	ldr	r0, [pc, #248]	; (8000c64 <displayLedMatrix+0x5d8>)
 8000b6a:	f001 fa05 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, GPIO_PIN_SET);
 8000b6e:	2201      	movs	r2, #1
 8000b70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b74:	483b      	ldr	r0, [pc, #236]	; (8000c64 <displayLedMatrix+0x5d8>)
 8000b76:	f001 f9ff 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b80:	4838      	ldr	r0, [pc, #224]	; (8000c64 <displayLedMatrix+0x5d8>)
 8000b82:	f001 f9f9 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, GPIO_PIN_SET);
 8000b86:	2201      	movs	r2, #1
 8000b88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b8c:	4835      	ldr	r0, [pc, #212]	; (8000c64 <displayLedMatrix+0x5d8>)
 8000b8e:	f001 f9f3 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, GPIO_PIN_SET);
 8000b92:	2201      	movs	r2, #1
 8000b94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b98:	4832      	ldr	r0, [pc, #200]	; (8000c64 <displayLedMatrix+0x5d8>)
 8000b9a:	f001 f9ed 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, GPIO_PIN_SET);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ba4:	482f      	ldr	r0, [pc, #188]	; (8000c64 <displayLedMatrix+0x5d8>)
 8000ba6:	f001 f9e7 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, GPIO_PIN_SET);
 8000baa:	2201      	movs	r2, #1
 8000bac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bb0:	482c      	ldr	r0, [pc, #176]	; (8000c64 <displayLedMatrix+0x5d8>)
 8000bb2:	f001 f9e1 	bl	8001f78 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1 - (col & shift));
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	b25a      	sxtb	r2, r3
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	b25b      	sxtb	r3, r3
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	b25b      	sxtb	r3, r3
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	f1c3 0301 	rsb	r3, r3, #1
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	461a      	mov	r2, r3
 8000bcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bd0:	4823      	ldr	r0, [pc, #140]	; (8000c60 <displayLedMatrix+0x5d4>)
 8000bd2:	f001 f9d1 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	105b      	asrs	r3, r3, #1
 8000bda:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1 - (col & shift));
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	b25a      	sxtb	r2, r3
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	b25b      	sxtb	r3, r3
 8000be4:	4013      	ands	r3, r2
 8000be6:	b25b      	sxtb	r3, r3
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	f1c3 0301 	rsb	r3, r3, #1
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bf6:	481a      	ldr	r0, [pc, #104]	; (8000c60 <displayLedMatrix+0x5d4>)
 8000bf8:	f001 f9be 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	105b      	asrs	r3, r3, #1
 8000c00:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1 - (col & shift));
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	b25a      	sxtb	r2, r3
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	b25b      	sxtb	r3, r3
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	b25b      	sxtb	r3, r3
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	f1c3 0301 	rsb	r3, r3, #1
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	461a      	mov	r2, r3
 8000c18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c1c:	4810      	ldr	r0, [pc, #64]	; (8000c60 <displayLedMatrix+0x5d4>)
 8000c1e:	f001 f9ab 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	105b      	asrs	r3, r3, #1
 8000c26:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1 - (col & shift));
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	b25a      	sxtb	r2, r3
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	b25b      	sxtb	r3, r3
 8000c30:	4013      	ands	r3, r2
 8000c32:	b25b      	sxtb	r3, r3
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	f1c3 0301 	rsb	r3, r3, #1
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c42:	4807      	ldr	r0, [pc, #28]	; (8000c60 <displayLedMatrix+0x5d4>)
 8000c44:	f001 f998 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	105b      	asrs	r3, r3, #1
 8000c4c:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1 - (col & shift));
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	b25a      	sxtb	r2, r3
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	b25b      	sxtb	r3, r3
 8000c56:	4013      	ands	r3, r2
 8000c58:	b25b      	sxtb	r3, r3
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	e004      	b.n	8000c68 <displayLedMatrix+0x5dc>
 8000c5e:	bf00      	nop
 8000c60:	40010800 	.word	0x40010800
 8000c64:	40010c00 	.word	0x40010c00
 8000c68:	f1c3 0301 	rsb	r3, r3, #1
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	461a      	mov	r2, r3
 8000c70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c74:	48b1      	ldr	r0, [pc, #708]	; (8000f3c <displayLedMatrix+0x8b0>)
 8000c76:	f001 f97f 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	105b      	asrs	r3, r3, #1
 8000c7e:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1 - (col & shift));
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	b25a      	sxtb	r2, r3
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	b25b      	sxtb	r3, r3
 8000c88:	4013      	ands	r3, r2
 8000c8a:	b25b      	sxtb	r3, r3
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	f1c3 0301 	rsb	r3, r3, #1
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	461a      	mov	r2, r3
 8000c96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c9a:	48a8      	ldr	r0, [pc, #672]	; (8000f3c <displayLedMatrix+0x8b0>)
 8000c9c:	f001 f96c 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	105b      	asrs	r3, r3, #1
 8000ca4:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1 - (col & shift));
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	b25a      	sxtb	r2, r3
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	b25b      	sxtb	r3, r3
 8000cae:	4013      	ands	r3, r2
 8000cb0:	b25b      	sxtb	r3, r3
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	f1c3 0301 	rsb	r3, r3, #1
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	461a      	mov	r2, r3
 8000cbc:	2108      	movs	r1, #8
 8000cbe:	489f      	ldr	r0, [pc, #636]	; (8000f3c <displayLedMatrix+0x8b0>)
 8000cc0:	f001 f95a 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	105b      	asrs	r3, r3, #1
 8000cc8:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin,  1 - (col & shift));
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	b25a      	sxtb	r2, r3
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	b25b      	sxtb	r3, r3
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	b25b      	sxtb	r3, r3
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	f1c3 0301 	rsb	r3, r3, #1
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	461a      	mov	r2, r3
 8000ce0:	2104      	movs	r1, #4
 8000ce2:	4896      	ldr	r0, [pc, #600]	; (8000f3c <displayLedMatrix+0x8b0>)
 8000ce4:	f001 f948 	bl	8001f78 <HAL_GPIO_WritePin>
	}
	if(row == 4){
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	f040 80c3 	bne.w	8000e76 <displayLedMatrix+0x7ea>
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, GPIO_PIN_SET);
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cf6:	4892      	ldr	r0, [pc, #584]	; (8000f40 <displayLedMatrix+0x8b4>)
 8000cf8:	f001 f93e 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, GPIO_PIN_SET);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d02:	488f      	ldr	r0, [pc, #572]	; (8000f40 <displayLedMatrix+0x8b4>)
 8000d04:	f001 f938 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, GPIO_PIN_SET);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d0e:	488c      	ldr	r0, [pc, #560]	; (8000f40 <displayLedMatrix+0x8b4>)
 8000d10:	f001 f932 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, GPIO_PIN_SET);
 8000d14:	2201      	movs	r2, #1
 8000d16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d1a:	4889      	ldr	r0, [pc, #548]	; (8000f40 <displayLedMatrix+0x8b4>)
 8000d1c:	f001 f92c 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, GPIO_PIN_RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d26:	4886      	ldr	r0, [pc, #536]	; (8000f40 <displayLedMatrix+0x8b4>)
 8000d28:	f001 f926 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, GPIO_PIN_SET);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d32:	4883      	ldr	r0, [pc, #524]	; (8000f40 <displayLedMatrix+0x8b4>)
 8000d34:	f001 f920 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, GPIO_PIN_SET);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d3e:	4880      	ldr	r0, [pc, #512]	; (8000f40 <displayLedMatrix+0x8b4>)
 8000d40:	f001 f91a 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, GPIO_PIN_SET);
 8000d44:	2201      	movs	r2, #1
 8000d46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d4a:	487d      	ldr	r0, [pc, #500]	; (8000f40 <displayLedMatrix+0x8b4>)
 8000d4c:	f001 f914 	bl	8001f78 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1 - (col & shift));
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	b25a      	sxtb	r2, r3
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	b25b      	sxtb	r3, r3
 8000d58:	4013      	ands	r3, r2
 8000d5a:	b25b      	sxtb	r3, r3
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	f1c3 0301 	rsb	r3, r3, #1
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	461a      	mov	r2, r3
 8000d66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d6a:	4874      	ldr	r0, [pc, #464]	; (8000f3c <displayLedMatrix+0x8b0>)
 8000d6c:	f001 f904 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	105b      	asrs	r3, r3, #1
 8000d74:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1 - (col & shift));
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	b25a      	sxtb	r2, r3
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	b25b      	sxtb	r3, r3
 8000d7e:	4013      	ands	r3, r2
 8000d80:	b25b      	sxtb	r3, r3
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	f1c3 0301 	rsb	r3, r3, #1
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d90:	486a      	ldr	r0, [pc, #424]	; (8000f3c <displayLedMatrix+0x8b0>)
 8000d92:	f001 f8f1 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	105b      	asrs	r3, r3, #1
 8000d9a:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1 - (col & shift));
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	b25a      	sxtb	r2, r3
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	b25b      	sxtb	r3, r3
 8000da4:	4013      	ands	r3, r2
 8000da6:	b25b      	sxtb	r3, r3
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	f1c3 0301 	rsb	r3, r3, #1
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	461a      	mov	r2, r3
 8000db2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000db6:	4861      	ldr	r0, [pc, #388]	; (8000f3c <displayLedMatrix+0x8b0>)
 8000db8:	f001 f8de 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	105b      	asrs	r3, r3, #1
 8000dc0:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1 - (col & shift));
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	b25a      	sxtb	r2, r3
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	b25b      	sxtb	r3, r3
 8000dca:	4013      	ands	r3, r2
 8000dcc:	b25b      	sxtb	r3, r3
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	f1c3 0301 	rsb	r3, r3, #1
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ddc:	4857      	ldr	r0, [pc, #348]	; (8000f3c <displayLedMatrix+0x8b0>)
 8000dde:	f001 f8cb 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	105b      	asrs	r3, r3, #1
 8000de6:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1 - (col & shift));
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	b25a      	sxtb	r2, r3
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	b25b      	sxtb	r3, r3
 8000df0:	4013      	ands	r3, r2
 8000df2:	b25b      	sxtb	r3, r3
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	f1c3 0301 	rsb	r3, r3, #1
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e02:	484e      	ldr	r0, [pc, #312]	; (8000f3c <displayLedMatrix+0x8b0>)
 8000e04:	f001 f8b8 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	105b      	asrs	r3, r3, #1
 8000e0c:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1 - (col & shift));
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	b25a      	sxtb	r2, r3
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	b25b      	sxtb	r3, r3
 8000e16:	4013      	ands	r3, r2
 8000e18:	b25b      	sxtb	r3, r3
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	f1c3 0301 	rsb	r3, r3, #1
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	461a      	mov	r2, r3
 8000e24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e28:	4844      	ldr	r0, [pc, #272]	; (8000f3c <displayLedMatrix+0x8b0>)
 8000e2a:	f001 f8a5 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	105b      	asrs	r3, r3, #1
 8000e32:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1 - (col & shift));
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	b25a      	sxtb	r2, r3
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	b25b      	sxtb	r3, r3
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	b25b      	sxtb	r3, r3
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	f1c3 0301 	rsb	r3, r3, #1
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	461a      	mov	r2, r3
 8000e4a:	2108      	movs	r1, #8
 8000e4c:	483b      	ldr	r0, [pc, #236]	; (8000f3c <displayLedMatrix+0x8b0>)
 8000e4e:	f001 f893 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	105b      	asrs	r3, r3, #1
 8000e56:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin,  1 - (col & shift));
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	b25a      	sxtb	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	b25b      	sxtb	r3, r3
 8000e60:	4013      	ands	r3, r2
 8000e62:	b25b      	sxtb	r3, r3
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	f1c3 0301 	rsb	r3, r3, #1
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	2104      	movs	r1, #4
 8000e70:	4832      	ldr	r0, [pc, #200]	; (8000f3c <displayLedMatrix+0x8b0>)
 8000e72:	f001 f881 	bl	8001f78 <HAL_GPIO_WritePin>
	}
	if(row == 5){
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b05      	cmp	r3, #5
 8000e7a:	f040 80c9 	bne.w	8001010 <displayLedMatrix+0x984>
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, GPIO_PIN_SET);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e84:	482e      	ldr	r0, [pc, #184]	; (8000f40 <displayLedMatrix+0x8b4>)
 8000e86:	f001 f877 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, GPIO_PIN_SET);
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e90:	482b      	ldr	r0, [pc, #172]	; (8000f40 <displayLedMatrix+0x8b4>)
 8000e92:	f001 f871 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, GPIO_PIN_SET);
 8000e96:	2201      	movs	r2, #1
 8000e98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e9c:	4828      	ldr	r0, [pc, #160]	; (8000f40 <displayLedMatrix+0x8b4>)
 8000e9e:	f001 f86b 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, GPIO_PIN_SET);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ea8:	4825      	ldr	r0, [pc, #148]	; (8000f40 <displayLedMatrix+0x8b4>)
 8000eaa:	f001 f865 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, GPIO_PIN_SET);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eb4:	4822      	ldr	r0, [pc, #136]	; (8000f40 <displayLedMatrix+0x8b4>)
 8000eb6:	f001 f85f 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, GPIO_PIN_RESET);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ec0:	481f      	ldr	r0, [pc, #124]	; (8000f40 <displayLedMatrix+0x8b4>)
 8000ec2:	f001 f859 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, GPIO_PIN_SET);
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ecc:	481c      	ldr	r0, [pc, #112]	; (8000f40 <displayLedMatrix+0x8b4>)
 8000ece:	f001 f853 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, GPIO_PIN_SET);
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ed8:	4819      	ldr	r0, [pc, #100]	; (8000f40 <displayLedMatrix+0x8b4>)
 8000eda:	f001 f84d 	bl	8001f78 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1 - (col & shift));
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	b25a      	sxtb	r2, r3
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	b25b      	sxtb	r3, r3
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	b25b      	sxtb	r3, r3
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	f1c3 0301 	rsb	r3, r3, #1
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ef8:	4810      	ldr	r0, [pc, #64]	; (8000f3c <displayLedMatrix+0x8b0>)
 8000efa:	f001 f83d 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	105b      	asrs	r3, r3, #1
 8000f02:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1 - (col & shift));
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	b25a      	sxtb	r2, r3
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	b25b      	sxtb	r3, r3
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	b25b      	sxtb	r3, r3
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	f1c3 0301 	rsb	r3, r3, #1
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	461a      	mov	r2, r3
 8000f1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f1e:	4807      	ldr	r0, [pc, #28]	; (8000f3c <displayLedMatrix+0x8b0>)
 8000f20:	f001 f82a 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	105b      	asrs	r3, r3, #1
 8000f28:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1 - (col & shift));
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	b25a      	sxtb	r2, r3
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	b25b      	sxtb	r3, r3
 8000f32:	4013      	ands	r3, r2
 8000f34:	b25b      	sxtb	r3, r3
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	e004      	b.n	8000f44 <displayLedMatrix+0x8b8>
 8000f3a:	bf00      	nop
 8000f3c:	40010800 	.word	0x40010800
 8000f40:	40010c00 	.word	0x40010c00
 8000f44:	f1c3 0301 	rsb	r3, r3, #1
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f50:	48b1      	ldr	r0, [pc, #708]	; (8001218 <displayLedMatrix+0xb8c>)
 8000f52:	f001 f811 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	105b      	asrs	r3, r3, #1
 8000f5a:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1 - (col & shift));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	b25a      	sxtb	r2, r3
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	b25b      	sxtb	r3, r3
 8000f64:	4013      	ands	r3, r2
 8000f66:	b25b      	sxtb	r3, r3
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	f1c3 0301 	rsb	r3, r3, #1
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	461a      	mov	r2, r3
 8000f72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f76:	48a8      	ldr	r0, [pc, #672]	; (8001218 <displayLedMatrix+0xb8c>)
 8000f78:	f000 fffe 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	105b      	asrs	r3, r3, #1
 8000f80:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1 - (col & shift));
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	b25a      	sxtb	r2, r3
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	b25b      	sxtb	r3, r3
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	b25b      	sxtb	r3, r3
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	f1c3 0301 	rsb	r3, r3, #1
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	461a      	mov	r2, r3
 8000f98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f9c:	489e      	ldr	r0, [pc, #632]	; (8001218 <displayLedMatrix+0xb8c>)
 8000f9e:	f000 ffeb 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	105b      	asrs	r3, r3, #1
 8000fa6:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1 - (col & shift));
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	b25a      	sxtb	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	b25b      	sxtb	r3, r3
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	b25b      	sxtb	r3, r3
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	f1c3 0301 	rsb	r3, r3, #1
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fc2:	4895      	ldr	r0, [pc, #596]	; (8001218 <displayLedMatrix+0xb8c>)
 8000fc4:	f000 ffd8 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	105b      	asrs	r3, r3, #1
 8000fcc:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1 - (col & shift));
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	b25a      	sxtb	r2, r3
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	b25b      	sxtb	r3, r3
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	b25b      	sxtb	r3, r3
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	f1c3 0301 	rsb	r3, r3, #1
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	2108      	movs	r1, #8
 8000fe6:	488c      	ldr	r0, [pc, #560]	; (8001218 <displayLedMatrix+0xb8c>)
 8000fe8:	f000 ffc6 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	105b      	asrs	r3, r3, #1
 8000ff0:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin,  1 - (col & shift));
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	b25a      	sxtb	r2, r3
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	b25b      	sxtb	r3, r3
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	b25b      	sxtb	r3, r3
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	f1c3 0301 	rsb	r3, r3, #1
 8001004:	b2db      	uxtb	r3, r3
 8001006:	461a      	mov	r2, r3
 8001008:	2104      	movs	r1, #4
 800100a:	4883      	ldr	r0, [pc, #524]	; (8001218 <displayLedMatrix+0xb8c>)
 800100c:	f000 ffb4 	bl	8001f78 <HAL_GPIO_WritePin>
	}
	if(row == 6){
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b06      	cmp	r3, #6
 8001014:	f040 80c3 	bne.w	800119e <displayLedMatrix+0xb12>
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, GPIO_PIN_SET);
 8001018:	2201      	movs	r2, #1
 800101a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800101e:	487f      	ldr	r0, [pc, #508]	; (800121c <displayLedMatrix+0xb90>)
 8001020:	f000 ffaa 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, GPIO_PIN_SET);
 8001024:	2201      	movs	r2, #1
 8001026:	f44f 7100 	mov.w	r1, #512	; 0x200
 800102a:	487c      	ldr	r0, [pc, #496]	; (800121c <displayLedMatrix+0xb90>)
 800102c:	f000 ffa4 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, GPIO_PIN_SET);
 8001030:	2201      	movs	r2, #1
 8001032:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001036:	4879      	ldr	r0, [pc, #484]	; (800121c <displayLedMatrix+0xb90>)
 8001038:	f000 ff9e 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, GPIO_PIN_SET);
 800103c:	2201      	movs	r2, #1
 800103e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001042:	4876      	ldr	r0, [pc, #472]	; (800121c <displayLedMatrix+0xb90>)
 8001044:	f000 ff98 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, GPIO_PIN_SET);
 8001048:	2201      	movs	r2, #1
 800104a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800104e:	4873      	ldr	r0, [pc, #460]	; (800121c <displayLedMatrix+0xb90>)
 8001050:	f000 ff92 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800105a:	4870      	ldr	r0, [pc, #448]	; (800121c <displayLedMatrix+0xb90>)
 800105c:	f000 ff8c 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, GPIO_PIN_RESET);
 8001060:	2200      	movs	r2, #0
 8001062:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001066:	486d      	ldr	r0, [pc, #436]	; (800121c <displayLedMatrix+0xb90>)
 8001068:	f000 ff86 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, GPIO_PIN_SET);
 800106c:	2201      	movs	r2, #1
 800106e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001072:	486a      	ldr	r0, [pc, #424]	; (800121c <displayLedMatrix+0xb90>)
 8001074:	f000 ff80 	bl	8001f78 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1 - (col & shift));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	b25a      	sxtb	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	b25b      	sxtb	r3, r3
 8001080:	4013      	ands	r3, r2
 8001082:	b25b      	sxtb	r3, r3
 8001084:	b2db      	uxtb	r3, r3
 8001086:	f1c3 0301 	rsb	r3, r3, #1
 800108a:	b2db      	uxtb	r3, r3
 800108c:	461a      	mov	r2, r3
 800108e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001092:	4861      	ldr	r0, [pc, #388]	; (8001218 <displayLedMatrix+0xb8c>)
 8001094:	f000 ff70 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	105b      	asrs	r3, r3, #1
 800109c:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1 - (col & shift));
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	b25a      	sxtb	r2, r3
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	b25b      	sxtb	r3, r3
 80010a6:	4013      	ands	r3, r2
 80010a8:	b25b      	sxtb	r3, r3
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	f1c3 0301 	rsb	r3, r3, #1
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	461a      	mov	r2, r3
 80010b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010b8:	4857      	ldr	r0, [pc, #348]	; (8001218 <displayLedMatrix+0xb8c>)
 80010ba:	f000 ff5d 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	105b      	asrs	r3, r3, #1
 80010c2:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1 - (col & shift));
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	b25a      	sxtb	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	b25b      	sxtb	r3, r3
 80010cc:	4013      	ands	r3, r2
 80010ce:	b25b      	sxtb	r3, r3
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	f1c3 0301 	rsb	r3, r3, #1
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	461a      	mov	r2, r3
 80010da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010de:	484e      	ldr	r0, [pc, #312]	; (8001218 <displayLedMatrix+0xb8c>)
 80010e0:	f000 ff4a 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	105b      	asrs	r3, r3, #1
 80010e8:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1 - (col & shift));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	b25a      	sxtb	r2, r3
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	b25b      	sxtb	r3, r3
 80010f2:	4013      	ands	r3, r2
 80010f4:	b25b      	sxtb	r3, r3
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	f1c3 0301 	rsb	r3, r3, #1
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	461a      	mov	r2, r3
 8001100:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001104:	4844      	ldr	r0, [pc, #272]	; (8001218 <displayLedMatrix+0xb8c>)
 8001106:	f000 ff37 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	105b      	asrs	r3, r3, #1
 800110e:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1 - (col & shift));
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	b25a      	sxtb	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	b25b      	sxtb	r3, r3
 8001118:	4013      	ands	r3, r2
 800111a:	b25b      	sxtb	r3, r3
 800111c:	b2db      	uxtb	r3, r3
 800111e:	f1c3 0301 	rsb	r3, r3, #1
 8001122:	b2db      	uxtb	r3, r3
 8001124:	461a      	mov	r2, r3
 8001126:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800112a:	483b      	ldr	r0, [pc, #236]	; (8001218 <displayLedMatrix+0xb8c>)
 800112c:	f000 ff24 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	105b      	asrs	r3, r3, #1
 8001134:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1 - (col & shift));
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	b25a      	sxtb	r2, r3
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	b25b      	sxtb	r3, r3
 800113e:	4013      	ands	r3, r2
 8001140:	b25b      	sxtb	r3, r3
 8001142:	b2db      	uxtb	r3, r3
 8001144:	f1c3 0301 	rsb	r3, r3, #1
 8001148:	b2db      	uxtb	r3, r3
 800114a:	461a      	mov	r2, r3
 800114c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001150:	4831      	ldr	r0, [pc, #196]	; (8001218 <displayLedMatrix+0xb8c>)
 8001152:	f000 ff11 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	105b      	asrs	r3, r3, #1
 800115a:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1 - (col & shift));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	b25a      	sxtb	r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	b25b      	sxtb	r3, r3
 8001164:	4013      	ands	r3, r2
 8001166:	b25b      	sxtb	r3, r3
 8001168:	b2db      	uxtb	r3, r3
 800116a:	f1c3 0301 	rsb	r3, r3, #1
 800116e:	b2db      	uxtb	r3, r3
 8001170:	461a      	mov	r2, r3
 8001172:	2108      	movs	r1, #8
 8001174:	4828      	ldr	r0, [pc, #160]	; (8001218 <displayLedMatrix+0xb8c>)
 8001176:	f000 feff 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	105b      	asrs	r3, r3, #1
 800117e:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin,  1 - (col & shift));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	b25a      	sxtb	r2, r3
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	b25b      	sxtb	r3, r3
 8001188:	4013      	ands	r3, r2
 800118a:	b25b      	sxtb	r3, r3
 800118c:	b2db      	uxtb	r3, r3
 800118e:	f1c3 0301 	rsb	r3, r3, #1
 8001192:	b2db      	uxtb	r3, r3
 8001194:	461a      	mov	r2, r3
 8001196:	2104      	movs	r1, #4
 8001198:	481f      	ldr	r0, [pc, #124]	; (8001218 <displayLedMatrix+0xb8c>)
 800119a:	f000 feed 	bl	8001f78 <HAL_GPIO_WritePin>
	}
	if(row == 7){
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b07      	cmp	r3, #7
 80011a2:	f040 80c9 	bne.w	8001338 <displayLedMatrix+0xcac>
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, GPIO_PIN_SET);
 80011a6:	2201      	movs	r2, #1
 80011a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ac:	481b      	ldr	r0, [pc, #108]	; (800121c <displayLedMatrix+0xb90>)
 80011ae:	f000 fee3 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, GPIO_PIN_SET);
 80011b2:	2201      	movs	r2, #1
 80011b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011b8:	4818      	ldr	r0, [pc, #96]	; (800121c <displayLedMatrix+0xb90>)
 80011ba:	f000 fedd 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, GPIO_PIN_SET);
 80011be:	2201      	movs	r2, #1
 80011c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011c4:	4815      	ldr	r0, [pc, #84]	; (800121c <displayLedMatrix+0xb90>)
 80011c6:	f000 fed7 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, GPIO_PIN_SET);
 80011ca:	2201      	movs	r2, #1
 80011cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011d0:	4812      	ldr	r0, [pc, #72]	; (800121c <displayLedMatrix+0xb90>)
 80011d2:	f000 fed1 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, GPIO_PIN_SET);
 80011d6:	2201      	movs	r2, #1
 80011d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011dc:	480f      	ldr	r0, [pc, #60]	; (800121c <displayLedMatrix+0xb90>)
 80011de:	f000 fecb 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, GPIO_PIN_SET);
 80011e2:	2201      	movs	r2, #1
 80011e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011e8:	480c      	ldr	r0, [pc, #48]	; (800121c <displayLedMatrix+0xb90>)
 80011ea:	f000 fec5 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, GPIO_PIN_SET);
 80011ee:	2201      	movs	r2, #1
 80011f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011f4:	4809      	ldr	r0, [pc, #36]	; (800121c <displayLedMatrix+0xb90>)
 80011f6:	f000 febf 	bl	8001f78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, GPIO_PIN_RESET);
 80011fa:	2200      	movs	r2, #0
 80011fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001200:	4806      	ldr	r0, [pc, #24]	; (800121c <displayLedMatrix+0xb90>)
 8001202:	f000 feb9 	bl	8001f78 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1 - (col & shift));
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	b25a      	sxtb	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	b25b      	sxtb	r3, r3
 800120e:	4013      	ands	r3, r2
 8001210:	b25b      	sxtb	r3, r3
 8001212:	b2db      	uxtb	r3, r3
 8001214:	e004      	b.n	8001220 <displayLedMatrix+0xb94>
 8001216:	bf00      	nop
 8001218:	40010800 	.word	0x40010800
 800121c:	40010c00 	.word	0x40010c00
 8001220:	f1c3 0301 	rsb	r3, r3, #1
 8001224:	b2db      	uxtb	r3, r3
 8001226:	461a      	mov	r2, r3
 8001228:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800122c:	4844      	ldr	r0, [pc, #272]	; (8001340 <displayLedMatrix+0xcb4>)
 800122e:	f000 fea3 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	105b      	asrs	r3, r3, #1
 8001236:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1 - (col & shift));
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	b25a      	sxtb	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	b25b      	sxtb	r3, r3
 8001240:	4013      	ands	r3, r2
 8001242:	b25b      	sxtb	r3, r3
 8001244:	b2db      	uxtb	r3, r3
 8001246:	f1c3 0301 	rsb	r3, r3, #1
 800124a:	b2db      	uxtb	r3, r3
 800124c:	461a      	mov	r2, r3
 800124e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001252:	483b      	ldr	r0, [pc, #236]	; (8001340 <displayLedMatrix+0xcb4>)
 8001254:	f000 fe90 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	105b      	asrs	r3, r3, #1
 800125c:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1 - (col & shift));
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	b25a      	sxtb	r2, r3
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	b25b      	sxtb	r3, r3
 8001266:	4013      	ands	r3, r2
 8001268:	b25b      	sxtb	r3, r3
 800126a:	b2db      	uxtb	r3, r3
 800126c:	f1c3 0301 	rsb	r3, r3, #1
 8001270:	b2db      	uxtb	r3, r3
 8001272:	461a      	mov	r2, r3
 8001274:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001278:	4831      	ldr	r0, [pc, #196]	; (8001340 <displayLedMatrix+0xcb4>)
 800127a:	f000 fe7d 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	105b      	asrs	r3, r3, #1
 8001282:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1 - (col & shift));
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	b25a      	sxtb	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	b25b      	sxtb	r3, r3
 800128c:	4013      	ands	r3, r2
 800128e:	b25b      	sxtb	r3, r3
 8001290:	b2db      	uxtb	r3, r3
 8001292:	f1c3 0301 	rsb	r3, r3, #1
 8001296:	b2db      	uxtb	r3, r3
 8001298:	461a      	mov	r2, r3
 800129a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800129e:	4828      	ldr	r0, [pc, #160]	; (8001340 <displayLedMatrix+0xcb4>)
 80012a0:	f000 fe6a 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	105b      	asrs	r3, r3, #1
 80012a8:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1 - (col & shift));
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	b25a      	sxtb	r2, r3
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	b25b      	sxtb	r3, r3
 80012b2:	4013      	ands	r3, r2
 80012b4:	b25b      	sxtb	r3, r3
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	f1c3 0301 	rsb	r3, r3, #1
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	461a      	mov	r2, r3
 80012c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012c4:	481e      	ldr	r0, [pc, #120]	; (8001340 <displayLedMatrix+0xcb4>)
 80012c6:	f000 fe57 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	105b      	asrs	r3, r3, #1
 80012ce:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1 - (col & shift));
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	b25a      	sxtb	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	b25b      	sxtb	r3, r3
 80012d8:	4013      	ands	r3, r2
 80012da:	b25b      	sxtb	r3, r3
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	f1c3 0301 	rsb	r3, r3, #1
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	461a      	mov	r2, r3
 80012e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012ea:	4815      	ldr	r0, [pc, #84]	; (8001340 <displayLedMatrix+0xcb4>)
 80012ec:	f000 fe44 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	105b      	asrs	r3, r3, #1
 80012f4:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1 - (col & shift));
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	b25a      	sxtb	r2, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	b25b      	sxtb	r3, r3
 80012fe:	4013      	ands	r3, r2
 8001300:	b25b      	sxtb	r3, r3
 8001302:	b2db      	uxtb	r3, r3
 8001304:	f1c3 0301 	rsb	r3, r3, #1
 8001308:	b2db      	uxtb	r3, r3
 800130a:	461a      	mov	r2, r3
 800130c:	2108      	movs	r1, #8
 800130e:	480c      	ldr	r0, [pc, #48]	; (8001340 <displayLedMatrix+0xcb4>)
 8001310:	f000 fe32 	bl	8001f78 <HAL_GPIO_WritePin>
		col = col >> 1;
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	105b      	asrs	r3, r3, #1
 8001318:	603b      	str	r3, [r7, #0]
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin,  1 - (col & shift));
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	b25a      	sxtb	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	b25b      	sxtb	r3, r3
 8001322:	4013      	ands	r3, r2
 8001324:	b25b      	sxtb	r3, r3
 8001326:	b2db      	uxtb	r3, r3
 8001328:	f1c3 0301 	rsb	r3, r3, #1
 800132c:	b2db      	uxtb	r3, r3
 800132e:	461a      	mov	r2, r3
 8001330:	2104      	movs	r1, #4
 8001332:	4803      	ldr	r0, [pc, #12]	; (8001340 <displayLedMatrix+0xcb4>)
 8001334:	f000 fe20 	bl	8001f78 <HAL_GPIO_WritePin>
	}

}
 8001338:	bf00      	nop
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40010800 	.word	0x40010800

08001344 <updateLedMatrix>:

void updateLedMatrix(int index){
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b07      	cmp	r3, #7
 8001350:	d84a      	bhi.n	80013e8 <updateLedMatrix+0xa4>
 8001352:	a201      	add	r2, pc, #4	; (adr r2, 8001358 <updateLedMatrix+0x14>)
 8001354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001358:	08001379 	.word	0x08001379
 800135c:	08001387 	.word	0x08001387
 8001360:	08001395 	.word	0x08001395
 8001364:	080013a3 	.word	0x080013a3
 8001368:	080013b1 	.word	0x080013b1
 800136c:	080013bf 	.word	0x080013bf
 8001370:	080013cd 	.word	0x080013cd
 8001374:	080013db 	.word	0x080013db
	switch(index){
	case 0:
		displayLedMatrix(0, matrix_buffer[0]);
 8001378:	4b1e      	ldr	r3, [pc, #120]	; (80013f4 <updateLedMatrix+0xb0>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	4619      	mov	r1, r3
 800137e:	2000      	movs	r0, #0
 8001380:	f7ff f984 	bl	800068c <displayLedMatrix>
		break;
 8001384:	e031      	b.n	80013ea <updateLedMatrix+0xa6>
	case 1:
		displayLedMatrix(1, matrix_buffer[1]);
 8001386:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <updateLedMatrix+0xb0>)
 8001388:	785b      	ldrb	r3, [r3, #1]
 800138a:	4619      	mov	r1, r3
 800138c:	2001      	movs	r0, #1
 800138e:	f7ff f97d 	bl	800068c <displayLedMatrix>
		break;
 8001392:	e02a      	b.n	80013ea <updateLedMatrix+0xa6>
	case 2:
		displayLedMatrix(2, matrix_buffer[2]);
 8001394:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <updateLedMatrix+0xb0>)
 8001396:	789b      	ldrb	r3, [r3, #2]
 8001398:	4619      	mov	r1, r3
 800139a:	2002      	movs	r0, #2
 800139c:	f7ff f976 	bl	800068c <displayLedMatrix>
		break;
 80013a0:	e023      	b.n	80013ea <updateLedMatrix+0xa6>
	case 3:
		displayLedMatrix(3, matrix_buffer[3]);
 80013a2:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <updateLedMatrix+0xb0>)
 80013a4:	78db      	ldrb	r3, [r3, #3]
 80013a6:	4619      	mov	r1, r3
 80013a8:	2003      	movs	r0, #3
 80013aa:	f7ff f96f 	bl	800068c <displayLedMatrix>
		break;
 80013ae:	e01c      	b.n	80013ea <updateLedMatrix+0xa6>
	case 4:
		displayLedMatrix(4, matrix_buffer[4]);
 80013b0:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <updateLedMatrix+0xb0>)
 80013b2:	791b      	ldrb	r3, [r3, #4]
 80013b4:	4619      	mov	r1, r3
 80013b6:	2004      	movs	r0, #4
 80013b8:	f7ff f968 	bl	800068c <displayLedMatrix>
		break;
 80013bc:	e015      	b.n	80013ea <updateLedMatrix+0xa6>
	case 5:
		displayLedMatrix(5, matrix_buffer[5]);
 80013be:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <updateLedMatrix+0xb0>)
 80013c0:	795b      	ldrb	r3, [r3, #5]
 80013c2:	4619      	mov	r1, r3
 80013c4:	2005      	movs	r0, #5
 80013c6:	f7ff f961 	bl	800068c <displayLedMatrix>
		break;
 80013ca:	e00e      	b.n	80013ea <updateLedMatrix+0xa6>
	case 6:
		displayLedMatrix(6, matrix_buffer[6]);
 80013cc:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <updateLedMatrix+0xb0>)
 80013ce:	799b      	ldrb	r3, [r3, #6]
 80013d0:	4619      	mov	r1, r3
 80013d2:	2006      	movs	r0, #6
 80013d4:	f7ff f95a 	bl	800068c <displayLedMatrix>
		break;
 80013d8:	e007      	b.n	80013ea <updateLedMatrix+0xa6>
	case 7:
		displayLedMatrix(7, matrix_buffer[7]);
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <updateLedMatrix+0xb0>)
 80013dc:	79db      	ldrb	r3, [r3, #7]
 80013de:	4619      	mov	r1, r3
 80013e0:	2007      	movs	r0, #7
 80013e2:	f7ff f953 	bl	800068c <displayLedMatrix>
		break;
 80013e6:	e000      	b.n	80013ea <updateLedMatrix+0xa6>
	default:
		break;
 80013e8:	bf00      	nop
	}
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000010 	.word	0x20000010

080013f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013fc:	f000 fad2 	bl	80019a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001400:	f000 f870 	bl	80014e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001404:	f000 f8f6 	bl	80015f4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001408:	f000 f8a8 	bl	800155c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 800140c:	482d      	ldr	r0, [pc, #180]	; (80014c4 <main+0xcc>)
 800140e:	f001 fa1d 	bl	800284c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer1(1000);
 8001412:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001416:	f000 f953 	bl	80016c0 <setTimer1>
  setTimer2(1000);
 800141a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800141e:	f000 f969 	bl	80016f4 <setTimer2>
  setTimer3(1000);
 8001422:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001426:	f000 f97f 	bl	8001728 <setTimer3>
  setTimer4(1000);
 800142a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800142e:	f000 f995 	bl	800175c <setTimer4>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(timer3_flag == 1)
 8001432:	4b25      	ldr	r3, [pc, #148]	; (80014c8 <main+0xd0>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d10b      	bne.n	8001452 <main+0x5a>
	{// control LED-RED and DOT-LED
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800143a:	2120      	movs	r1, #32
 800143c:	4823      	ldr	r0, [pc, #140]	; (80014cc <main+0xd4>)
 800143e:	f000 fdb3 	bl	8001fa8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(DOT_GPIO_Port, DOT_Pin);
 8001442:	2110      	movs	r1, #16
 8001444:	4821      	ldr	r0, [pc, #132]	; (80014cc <main+0xd4>)
 8001446:	f000 fdaf 	bl	8001fa8 <HAL_GPIO_TogglePin>
		setTimer3(500);
 800144a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800144e:	f000 f96b 	bl	8001728 <setTimer3>
	}

	if(timer1_flag == 1)
 8001452:	4b1f      	ldr	r3, [pc, #124]	; (80014d0 <main+0xd8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d107      	bne.n	800146a <main+0x72>
	{// run time as a clock
		clock();
 800145a:	f7fe fe77 	bl	800014c <clock>
		updateClockBuffer();
 800145e:	f7fe fea5 	bl	80001ac <updateClockBuffer>
		setTimer1(500);
 8001462:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001466:	f000 f92b 	bl	80016c0 <setTimer1>
	}

	if(timer2_flag == 1)
 800146a:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <main+0xdc>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d111      	bne.n	8001496 <main+0x9e>
	{
		update7SEG(index_led++);
 8001472:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <main+0xe0>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	1c5a      	adds	r2, r3, #1
 8001478:	4917      	ldr	r1, [pc, #92]	; (80014d8 <main+0xe0>)
 800147a:	600a      	str	r2, [r1, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff f879 	bl	8000574 <update7SEG>
		if(index_led == MAX_LED) index_led = 0;
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <main+0xe0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2b04      	cmp	r3, #4
 8001488:	d102      	bne.n	8001490 <main+0x98>
 800148a:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <main+0xe0>)
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
		setTimer2(250);
 8001490:	20fa      	movs	r0, #250	; 0xfa
 8001492:	f000 f92f 	bl	80016f4 <setTimer2>
	}

	if(timer4_flag == 1)
 8001496:	4b11      	ldr	r3, [pc, #68]	; (80014dc <main+0xe4>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d1c9      	bne.n	8001432 <main+0x3a>
	{
		updateLedMatrix(index_led_matrix++);
 800149e:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <main+0xe8>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	1c5a      	adds	r2, r3, #1
 80014a4:	490e      	ldr	r1, [pc, #56]	; (80014e0 <main+0xe8>)
 80014a6:	600a      	str	r2, [r1, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff4b 	bl	8001344 <updateLedMatrix>
		if(index_led_matrix == MAX_LED_MATRIX) index_led_matrix = 0;
 80014ae:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <main+0xe8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2b08      	cmp	r3, #8
 80014b4:	d102      	bne.n	80014bc <main+0xc4>
 80014b6:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <main+0xe8>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
		setTimer4(100);
 80014bc:	2064      	movs	r0, #100	; 0x64
 80014be:	f000 f94d 	bl	800175c <setTimer4>
	if(timer3_flag == 1)
 80014c2:	e7b6      	b.n	8001432 <main+0x3a>
 80014c4:	20000078 	.word	0x20000078
 80014c8:	20000068 	.word	0x20000068
 80014cc:	40010800 	.word	0x40010800
 80014d0:	20000058 	.word	0x20000058
 80014d4:	20000060 	.word	0x20000060
 80014d8:	20000050 	.word	0x20000050
 80014dc:	20000070 	.word	0x20000070
 80014e0:	20000054 	.word	0x20000054

080014e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b090      	sub	sp, #64	; 0x40
 80014e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ea:	f107 0318 	add.w	r3, r7, #24
 80014ee:	2228      	movs	r2, #40	; 0x28
 80014f0:	2100      	movs	r1, #0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f001 fd62 	bl	8002fbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
 8001504:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001506:	2302      	movs	r3, #2
 8001508:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800150a:	2301      	movs	r3, #1
 800150c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800150e:	2310      	movs	r3, #16
 8001510:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001512:	2300      	movs	r3, #0
 8001514:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001516:	f107 0318 	add.w	r3, r7, #24
 800151a:	4618      	mov	r0, r3
 800151c:	f000 fd5e 	bl	8001fdc <HAL_RCC_OscConfig>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001526:	f000 f8c5 	bl	80016b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800152a:	230f      	movs	r3, #15
 800152c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	2100      	movs	r1, #0
 8001542:	4618      	mov	r0, r3
 8001544:	f000 ffca 	bl	80024dc <HAL_RCC_ClockConfig>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800154e:	f000 f8b1 	bl	80016b4 <Error_Handler>
  }
}
 8001552:	bf00      	nop
 8001554:	3740      	adds	r7, #64	; 0x40
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001562:	f107 0308 	add.w	r3, r7, #8
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001570:	463b      	mov	r3, r7
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001578:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <MX_TIM2_Init+0x94>)
 800157a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800157e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001580:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <MX_TIM2_Init+0x94>)
 8001582:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001586:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001588:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <MX_TIM2_Init+0x94>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800158e:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <MX_TIM2_Init+0x94>)
 8001590:	2209      	movs	r2, #9
 8001592:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001594:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <MX_TIM2_Init+0x94>)
 8001596:	2200      	movs	r2, #0
 8001598:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800159a:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <MX_TIM2_Init+0x94>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015a0:	4813      	ldr	r0, [pc, #76]	; (80015f0 <MX_TIM2_Init+0x94>)
 80015a2:	f001 f903 	bl	80027ac <HAL_TIM_Base_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015ac:	f000 f882 	bl	80016b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015b6:	f107 0308 	add.w	r3, r7, #8
 80015ba:	4619      	mov	r1, r3
 80015bc:	480c      	ldr	r0, [pc, #48]	; (80015f0 <MX_TIM2_Init+0x94>)
 80015be:	f001 fa99 	bl	8002af4 <HAL_TIM_ConfigClockSource>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015c8:	f000 f874 	bl	80016b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015cc:	2300      	movs	r3, #0
 80015ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015d4:	463b      	mov	r3, r7
 80015d6:	4619      	mov	r1, r3
 80015d8:	4805      	ldr	r0, [pc, #20]	; (80015f0 <MX_TIM2_Init+0x94>)
 80015da:	f001 fc61 	bl	8002ea0 <HAL_TIMEx_MasterConfigSynchronization>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015e4:	f000 f866 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015e8:	bf00      	nop
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000078 	.word	0x20000078

080015f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fa:	f107 0308 	add.w	r3, r7, #8
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001608:	4b22      	ldr	r3, [pc, #136]	; (8001694 <MX_GPIO_Init+0xa0>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	4a21      	ldr	r2, [pc, #132]	; (8001694 <MX_GPIO_Init+0xa0>)
 800160e:	f043 0304 	orr.w	r3, r3, #4
 8001612:	6193      	str	r3, [r2, #24]
 8001614:	4b1f      	ldr	r3, [pc, #124]	; (8001694 <MX_GPIO_Init+0xa0>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	f003 0304 	and.w	r3, r3, #4
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001620:	4b1c      	ldr	r3, [pc, #112]	; (8001694 <MX_GPIO_Init+0xa0>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	4a1b      	ldr	r2, [pc, #108]	; (8001694 <MX_GPIO_Init+0xa0>)
 8001626:	f043 0308 	orr.w	r3, r3, #8
 800162a:	6193      	str	r3, [r2, #24]
 800162c:	4b19      	ldr	r3, [pc, #100]	; (8001694 <MX_GPIO_Init+0xa0>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	f003 0308 	and.w	r3, r3, #8
 8001634:	603b      	str	r3, [r7, #0]
 8001636:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENM0_Pin|ENM1_Pin|DOT_Pin|LED_RED_Pin
 8001638:	2200      	movs	r2, #0
 800163a:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 800163e:	4816      	ldr	r0, [pc, #88]	; (8001698 <MX_GPIO_Init+0xa4>)
 8001640:	f000 fc9a 	bl	8001f78 <HAL_GPIO_WritePin>
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|ROW2_Pin
 8001644:	2200      	movs	r2, #0
 8001646:	f64f 717f 	movw	r1, #65407	; 0xff7f
 800164a:	4814      	ldr	r0, [pc, #80]	; (800169c <MX_GPIO_Init+0xa8>)
 800164c:	f000 fc94 	bl	8001f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENM0_Pin ENM1_Pin DOT_Pin LED_RED_Pin
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           ENM2_Pin ENM3_Pin ENM4_Pin ENM5_Pin
                           ENM6_Pin ENM7_Pin */
  GPIO_InitStruct.Pin = ENM0_Pin|ENM1_Pin|DOT_Pin|LED_RED_Pin
 8001650:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8001654:	60bb      	str	r3, [r7, #8]
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001656:	2301      	movs	r3, #1
 8001658:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2302      	movs	r3, #2
 8001660:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001662:	f107 0308 	add.w	r3, r7, #8
 8001666:	4619      	mov	r1, r3
 8001668:	480b      	ldr	r0, [pc, #44]	; (8001698 <MX_GPIO_Init+0xa4>)
 800166a:	f000 fb0b 	bl	8001c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin ROW2_Pin
                           ROW3_Pin ROW4_Pin ROW5_Pin ROW6_Pin
                           ROW7_Pin SEG3_Pin SEG4_Pin SEG5_Pin
                           SEG6_Pin ROW0_Pin ROW1_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|ROW2_Pin
 800166e:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8001672:	60bb      	str	r3, [r7, #8]
                          |ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin
                          |ROW7_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin|ROW0_Pin|ROW1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001674:	2301      	movs	r3, #1
 8001676:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167c:	2302      	movs	r3, #2
 800167e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001680:	f107 0308 	add.w	r3, r7, #8
 8001684:	4619      	mov	r1, r3
 8001686:	4805      	ldr	r0, [pc, #20]	; (800169c <MX_GPIO_Init+0xa8>)
 8001688:	f000 fafc 	bl	8001c84 <HAL_GPIO_Init>

}
 800168c:	bf00      	nop
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40021000 	.word	0x40021000
 8001698:	40010800 	.word	0x40010800
 800169c:	40010c00 	.word	0x40010c00

080016a0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	timerRun();
 80016a8:	f000 f872 	bl	8001790 <timerRun>
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b8:	b672      	cpsid	i
}
 80016ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016bc:	e7fe      	b.n	80016bc <Error_Handler+0x8>
	...

080016c0 <setTimer1>:

int timer5_flag = 0;
int timer5_counter = 0;

//timer for update clockbuffer
void setTimer1(int duration){
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 80016c8:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <setTimer1+0x28>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80016d2:	4a06      	ldr	r2, [pc, #24]	; (80016ec <setTimer1+0x2c>)
 80016d4:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <setTimer1+0x30>)
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	20000024 	.word	0x20000024
 80016ec:	2000005c 	.word	0x2000005c
 80016f0:	20000058 	.word	0x20000058

080016f4 <setTimer2>:

//timer for update 7SEG led
void setTimer2(int duration){
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 80016fc:	4b07      	ldr	r3, [pc, #28]	; (800171c <setTimer2+0x28>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	fb92 f3f3 	sdiv	r3, r2, r3
 8001706:	4a06      	ldr	r2, [pc, #24]	; (8001720 <setTimer2+0x2c>)
 8001708:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <setTimer2+0x30>)
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	20000024 	.word	0x20000024
 8001720:	20000064 	.word	0x20000064
 8001724:	20000060 	.word	0x20000060

08001728 <setTimer3>:

//timer for control LED-RED and DOT-LED
void setTimer3(int duration){
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TICK;
 8001730:	4b07      	ldr	r3, [pc, #28]	; (8001750 <setTimer3+0x28>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	fb92 f3f3 	sdiv	r3, r2, r3
 800173a:	4a06      	ldr	r2, [pc, #24]	; (8001754 <setTimer3+0x2c>)
 800173c:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <setTimer3+0x30>)
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	20000024 	.word	0x20000024
 8001754:	2000006c 	.word	0x2000006c
 8001758:	20000068 	.word	0x20000068

0800175c <setTimer4>:

//timer for update led matrix
void setTimer4(int duration){
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TICK;
 8001764:	4b07      	ldr	r3, [pc, #28]	; (8001784 <setTimer4+0x28>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	fb92 f3f3 	sdiv	r3, r2, r3
 800176e:	4a06      	ldr	r2, [pc, #24]	; (8001788 <setTimer4+0x2c>)
 8001770:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <setTimer4+0x30>)
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	20000024 	.word	0x20000024
 8001788:	20000074 	.word	0x20000074
 800178c:	20000070 	.word	0x20000070

08001790 <timerRun>:


void timerRun(){
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) timer1_counter--;
 8001794:	4b21      	ldr	r3, [pc, #132]	; (800181c <timerRun+0x8c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	dd04      	ble.n	80017a6 <timerRun+0x16>
 800179c:	4b1f      	ldr	r3, [pc, #124]	; (800181c <timerRun+0x8c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	3b01      	subs	r3, #1
 80017a2:	4a1e      	ldr	r2, [pc, #120]	; (800181c <timerRun+0x8c>)
 80017a4:	6013      	str	r3, [r2, #0]
	if(timer1_counter == 0){
 80017a6:	4b1d      	ldr	r3, [pc, #116]	; (800181c <timerRun+0x8c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d102      	bne.n	80017b4 <timerRun+0x24>
		timer1_flag = 1;
 80017ae:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <timerRun+0x90>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	601a      	str	r2, [r3, #0]
	}

	if(timer2_counter > 0) timer2_counter--;
 80017b4:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <timerRun+0x94>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	dd04      	ble.n	80017c6 <timerRun+0x36>
 80017bc:	4b19      	ldr	r3, [pc, #100]	; (8001824 <timerRun+0x94>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	3b01      	subs	r3, #1
 80017c2:	4a18      	ldr	r2, [pc, #96]	; (8001824 <timerRun+0x94>)
 80017c4:	6013      	str	r3, [r2, #0]
	if(timer2_counter == 0){
 80017c6:	4b17      	ldr	r3, [pc, #92]	; (8001824 <timerRun+0x94>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d102      	bne.n	80017d4 <timerRun+0x44>
		timer2_flag = 1;
 80017ce:	4b16      	ldr	r3, [pc, #88]	; (8001828 <timerRun+0x98>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	601a      	str	r2, [r3, #0]
	}

	if(timer3_counter > 0) timer3_counter--;
 80017d4:	4b15      	ldr	r3, [pc, #84]	; (800182c <timerRun+0x9c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	dd04      	ble.n	80017e6 <timerRun+0x56>
 80017dc:	4b13      	ldr	r3, [pc, #76]	; (800182c <timerRun+0x9c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	3b01      	subs	r3, #1
 80017e2:	4a12      	ldr	r2, [pc, #72]	; (800182c <timerRun+0x9c>)
 80017e4:	6013      	str	r3, [r2, #0]
	if(timer3_counter == 0){
 80017e6:	4b11      	ldr	r3, [pc, #68]	; (800182c <timerRun+0x9c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d102      	bne.n	80017f4 <timerRun+0x64>
		timer3_flag = 1;
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <timerRun+0xa0>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	601a      	str	r2, [r3, #0]
	}

	if(timer4_counter > 0) timer4_counter--;
 80017f4:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <timerRun+0xa4>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	dd04      	ble.n	8001806 <timerRun+0x76>
 80017fc:	4b0d      	ldr	r3, [pc, #52]	; (8001834 <timerRun+0xa4>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	3b01      	subs	r3, #1
 8001802:	4a0c      	ldr	r2, [pc, #48]	; (8001834 <timerRun+0xa4>)
 8001804:	6013      	str	r3, [r2, #0]
	if(timer4_counter == 0){
 8001806:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <timerRun+0xa4>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d102      	bne.n	8001814 <timerRun+0x84>
		timer4_flag = 1;
 800180e:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <timerRun+0xa8>)
 8001810:	2201      	movs	r2, #1
 8001812:	601a      	str	r2, [r3, #0]
	}

}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr
 800181c:	2000005c 	.word	0x2000005c
 8001820:	20000058 	.word	0x20000058
 8001824:	20000064 	.word	0x20000064
 8001828:	20000060 	.word	0x20000060
 800182c:	2000006c 	.word	0x2000006c
 8001830:	20000068 	.word	0x20000068
 8001834:	20000074 	.word	0x20000074
 8001838:	20000070 	.word	0x20000070

0800183c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001842:	4b15      	ldr	r3, [pc, #84]	; (8001898 <HAL_MspInit+0x5c>)
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	4a14      	ldr	r2, [pc, #80]	; (8001898 <HAL_MspInit+0x5c>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	6193      	str	r3, [r2, #24]
 800184e:	4b12      	ldr	r3, [pc, #72]	; (8001898 <HAL_MspInit+0x5c>)
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800185a:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <HAL_MspInit+0x5c>)
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	4a0e      	ldr	r2, [pc, #56]	; (8001898 <HAL_MspInit+0x5c>)
 8001860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001864:	61d3      	str	r3, [r2, #28]
 8001866:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <HAL_MspInit+0x5c>)
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001872:	4b0a      	ldr	r3, [pc, #40]	; (800189c <HAL_MspInit+0x60>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	4a04      	ldr	r2, [pc, #16]	; (800189c <HAL_MspInit+0x60>)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800188e:	bf00      	nop
 8001890:	3714      	adds	r7, #20
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr
 8001898:	40021000 	.word	0x40021000
 800189c:	40010000 	.word	0x40010000

080018a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018b0:	d113      	bne.n	80018da <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018b2:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <HAL_TIM_Base_MspInit+0x44>)
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	4a0b      	ldr	r2, [pc, #44]	; (80018e4 <HAL_TIM_Base_MspInit+0x44>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	61d3      	str	r3, [r2, #28]
 80018be:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <HAL_TIM_Base_MspInit+0x44>)
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2100      	movs	r1, #0
 80018ce:	201c      	movs	r0, #28
 80018d0:	f000 f9a1 	bl	8001c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018d4:	201c      	movs	r0, #28
 80018d6:	f000 f9ba 	bl	8001c4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018da:	bf00      	nop
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40021000 	.word	0x40021000

080018e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018ec:	e7fe      	b.n	80018ec <NMI_Handler+0x4>

080018ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f2:	e7fe      	b.n	80018f2 <HardFault_Handler+0x4>

080018f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f8:	e7fe      	b.n	80018f8 <MemManage_Handler+0x4>

080018fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018fe:	e7fe      	b.n	80018fe <BusFault_Handler+0x4>

08001900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001904:	e7fe      	b.n	8001904 <UsageFault_Handler+0x4>

08001906 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr

08001912 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	46bd      	mov	sp, r7
 800191a:	bc80      	pop	{r7}
 800191c:	4770      	bx	lr

0800191e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr

0800192a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800192e:	f000 f87f 	bl	8001a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
	...

08001938 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800193c:	4802      	ldr	r0, [pc, #8]	; (8001948 <TIM2_IRQHandler+0x10>)
 800193e:	f000 ffd1 	bl	80028e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000078 	.word	0x20000078

0800194c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr

08001958 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001958:	480c      	ldr	r0, [pc, #48]	; (800198c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800195a:	490d      	ldr	r1, [pc, #52]	; (8001990 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800195c:	4a0d      	ldr	r2, [pc, #52]	; (8001994 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800195e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001960:	e002      	b.n	8001968 <LoopCopyDataInit>

08001962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001966:	3304      	adds	r3, #4

08001968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800196a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800196c:	d3f9      	bcc.n	8001962 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800196e:	4a0a      	ldr	r2, [pc, #40]	; (8001998 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001970:	4c0a      	ldr	r4, [pc, #40]	; (800199c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001974:	e001      	b.n	800197a <LoopFillZerobss>

08001976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001978:	3204      	adds	r2, #4

0800197a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800197a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800197c:	d3fb      	bcc.n	8001976 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800197e:	f7ff ffe5 	bl	800194c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001982:	f001 faf7 	bl	8002f74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001986:	f7ff fd37 	bl	80013f8 <main>
  bx lr
 800198a:	4770      	bx	lr
  ldr r0, =_sdata
 800198c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001990:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8001994:	0800300c 	.word	0x0800300c
  ldr r2, =_sbss
 8001998:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 800199c:	200000c4 	.word	0x200000c4

080019a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019a0:	e7fe      	b.n	80019a0 <ADC1_2_IRQHandler>
	...

080019a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a8:	4b08      	ldr	r3, [pc, #32]	; (80019cc <HAL_Init+0x28>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a07      	ldr	r2, [pc, #28]	; (80019cc <HAL_Init+0x28>)
 80019ae:	f043 0310 	orr.w	r3, r3, #16
 80019b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b4:	2003      	movs	r0, #3
 80019b6:	f000 f923 	bl	8001c00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ba:	200f      	movs	r0, #15
 80019bc:	f000 f808 	bl	80019d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019c0:	f7ff ff3c 	bl	800183c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40022000 	.word	0x40022000

080019d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_InitTick+0x54>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <HAL_InitTick+0x58>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	4619      	mov	r1, r3
 80019e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 f93b 	bl	8001c6a <HAL_SYSTICK_Config>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e00e      	b.n	8001a1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b0f      	cmp	r3, #15
 8001a02:	d80a      	bhi.n	8001a1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a04:	2200      	movs	r2, #0
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	f04f 30ff 	mov.w	r0, #4294967295
 8001a0c:	f000 f903 	bl	8001c16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a10:	4a06      	ldr	r2, [pc, #24]	; (8001a2c <HAL_InitTick+0x5c>)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
 8001a18:	e000      	b.n	8001a1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000028 	.word	0x20000028
 8001a28:	20000030 	.word	0x20000030
 8001a2c:	2000002c 	.word	0x2000002c

08001a30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <HAL_IncTick+0x1c>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_IncTick+0x20>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4413      	add	r3, r2
 8001a40:	4a03      	ldr	r2, [pc, #12]	; (8001a50 <HAL_IncTick+0x20>)
 8001a42:	6013      	str	r3, [r2, #0]
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr
 8001a4c:	20000030 	.word	0x20000030
 8001a50:	200000c0 	.word	0x200000c0

08001a54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return uwTick;
 8001a58:	4b02      	ldr	r3, [pc, #8]	; (8001a64 <HAL_GetTick+0x10>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr
 8001a64:	200000c0 	.word	0x200000c0

08001a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a78:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <__NVIC_SetPriorityGrouping+0x44>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a84:	4013      	ands	r3, r2
 8001a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a9a:	4a04      	ldr	r2, [pc, #16]	; (8001aac <__NVIC_SetPriorityGrouping+0x44>)
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	60d3      	str	r3, [r2, #12]
}
 8001aa0:	bf00      	nop
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab4:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	0a1b      	lsrs	r3, r3, #8
 8001aba:	f003 0307 	and.w	r3, r3, #7
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	db0b      	blt.n	8001af6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	f003 021f 	and.w	r2, r3, #31
 8001ae4:	4906      	ldr	r1, [pc, #24]	; (8001b00 <__NVIC_EnableIRQ+0x34>)
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	095b      	lsrs	r3, r3, #5
 8001aec:	2001      	movs	r0, #1
 8001aee:	fa00 f202 	lsl.w	r2, r0, r2
 8001af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr
 8001b00:	e000e100 	.word	0xe000e100

08001b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	6039      	str	r1, [r7, #0]
 8001b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	db0a      	blt.n	8001b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	490c      	ldr	r1, [pc, #48]	; (8001b50 <__NVIC_SetPriority+0x4c>)
 8001b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b22:	0112      	lsls	r2, r2, #4
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	440b      	add	r3, r1
 8001b28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b2c:	e00a      	b.n	8001b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4908      	ldr	r1, [pc, #32]	; (8001b54 <__NVIC_SetPriority+0x50>)
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	3b04      	subs	r3, #4
 8001b3c:	0112      	lsls	r2, r2, #4
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	440b      	add	r3, r1
 8001b42:	761a      	strb	r2, [r3, #24]
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc80      	pop	{r7}
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	e000e100 	.word	0xe000e100
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b089      	sub	sp, #36	; 0x24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f1c3 0307 	rsb	r3, r3, #7
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	bf28      	it	cs
 8001b76:	2304      	movcs	r3, #4
 8001b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	2b06      	cmp	r3, #6
 8001b80:	d902      	bls.n	8001b88 <NVIC_EncodePriority+0x30>
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3b03      	subs	r3, #3
 8001b86:	e000      	b.n	8001b8a <NVIC_EncodePriority+0x32>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43da      	mvns	r2, r3
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8001baa:	43d9      	mvns	r1, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb0:	4313      	orrs	r3, r2
         );
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3724      	adds	r7, #36	; 0x24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr

08001bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bcc:	d301      	bcc.n	8001bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e00f      	b.n	8001bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <SysTick_Config+0x40>)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bda:	210f      	movs	r1, #15
 8001bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001be0:	f7ff ff90 	bl	8001b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be4:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <SysTick_Config+0x40>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bea:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <SysTick_Config+0x40>)
 8001bec:	2207      	movs	r2, #7
 8001bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	e000e010 	.word	0xe000e010

08001c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff ff2d 	bl	8001a68 <__NVIC_SetPriorityGrouping>
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b086      	sub	sp, #24
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
 8001c22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c28:	f7ff ff42 	bl	8001ab0 <__NVIC_GetPriorityGrouping>
 8001c2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	68b9      	ldr	r1, [r7, #8]
 8001c32:	6978      	ldr	r0, [r7, #20]
 8001c34:	f7ff ff90 	bl	8001b58 <NVIC_EncodePriority>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c3e:	4611      	mov	r1, r2
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff5f 	bl	8001b04 <__NVIC_SetPriority>
}
 8001c46:	bf00      	nop
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	4603      	mov	r3, r0
 8001c56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff ff35 	bl	8001acc <__NVIC_EnableIRQ>
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff ffa2 	bl	8001bbc <SysTick_Config>
 8001c78:	4603      	mov	r3, r0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b08b      	sub	sp, #44	; 0x2c
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c92:	2300      	movs	r3, #0
 8001c94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c96:	e148      	b.n	8001f2a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c98:	2201      	movs	r2, #1
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	69fa      	ldr	r2, [r7, #28]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	f040 8137 	bne.w	8001f24 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	4aa3      	ldr	r2, [pc, #652]	; (8001f48 <HAL_GPIO_Init+0x2c4>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d05e      	beq.n	8001d7e <HAL_GPIO_Init+0xfa>
 8001cc0:	4aa1      	ldr	r2, [pc, #644]	; (8001f48 <HAL_GPIO_Init+0x2c4>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d875      	bhi.n	8001db2 <HAL_GPIO_Init+0x12e>
 8001cc6:	4aa1      	ldr	r2, [pc, #644]	; (8001f4c <HAL_GPIO_Init+0x2c8>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d058      	beq.n	8001d7e <HAL_GPIO_Init+0xfa>
 8001ccc:	4a9f      	ldr	r2, [pc, #636]	; (8001f4c <HAL_GPIO_Init+0x2c8>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d86f      	bhi.n	8001db2 <HAL_GPIO_Init+0x12e>
 8001cd2:	4a9f      	ldr	r2, [pc, #636]	; (8001f50 <HAL_GPIO_Init+0x2cc>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d052      	beq.n	8001d7e <HAL_GPIO_Init+0xfa>
 8001cd8:	4a9d      	ldr	r2, [pc, #628]	; (8001f50 <HAL_GPIO_Init+0x2cc>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d869      	bhi.n	8001db2 <HAL_GPIO_Init+0x12e>
 8001cde:	4a9d      	ldr	r2, [pc, #628]	; (8001f54 <HAL_GPIO_Init+0x2d0>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d04c      	beq.n	8001d7e <HAL_GPIO_Init+0xfa>
 8001ce4:	4a9b      	ldr	r2, [pc, #620]	; (8001f54 <HAL_GPIO_Init+0x2d0>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d863      	bhi.n	8001db2 <HAL_GPIO_Init+0x12e>
 8001cea:	4a9b      	ldr	r2, [pc, #620]	; (8001f58 <HAL_GPIO_Init+0x2d4>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d046      	beq.n	8001d7e <HAL_GPIO_Init+0xfa>
 8001cf0:	4a99      	ldr	r2, [pc, #612]	; (8001f58 <HAL_GPIO_Init+0x2d4>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d85d      	bhi.n	8001db2 <HAL_GPIO_Init+0x12e>
 8001cf6:	2b12      	cmp	r3, #18
 8001cf8:	d82a      	bhi.n	8001d50 <HAL_GPIO_Init+0xcc>
 8001cfa:	2b12      	cmp	r3, #18
 8001cfc:	d859      	bhi.n	8001db2 <HAL_GPIO_Init+0x12e>
 8001cfe:	a201      	add	r2, pc, #4	; (adr r2, 8001d04 <HAL_GPIO_Init+0x80>)
 8001d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d04:	08001d7f 	.word	0x08001d7f
 8001d08:	08001d59 	.word	0x08001d59
 8001d0c:	08001d6b 	.word	0x08001d6b
 8001d10:	08001dad 	.word	0x08001dad
 8001d14:	08001db3 	.word	0x08001db3
 8001d18:	08001db3 	.word	0x08001db3
 8001d1c:	08001db3 	.word	0x08001db3
 8001d20:	08001db3 	.word	0x08001db3
 8001d24:	08001db3 	.word	0x08001db3
 8001d28:	08001db3 	.word	0x08001db3
 8001d2c:	08001db3 	.word	0x08001db3
 8001d30:	08001db3 	.word	0x08001db3
 8001d34:	08001db3 	.word	0x08001db3
 8001d38:	08001db3 	.word	0x08001db3
 8001d3c:	08001db3 	.word	0x08001db3
 8001d40:	08001db3 	.word	0x08001db3
 8001d44:	08001db3 	.word	0x08001db3
 8001d48:	08001d61 	.word	0x08001d61
 8001d4c:	08001d75 	.word	0x08001d75
 8001d50:	4a82      	ldr	r2, [pc, #520]	; (8001f5c <HAL_GPIO_Init+0x2d8>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d013      	beq.n	8001d7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d56:	e02c      	b.n	8001db2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	623b      	str	r3, [r7, #32]
          break;
 8001d5e:	e029      	b.n	8001db4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	3304      	adds	r3, #4
 8001d66:	623b      	str	r3, [r7, #32]
          break;
 8001d68:	e024      	b.n	8001db4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	3308      	adds	r3, #8
 8001d70:	623b      	str	r3, [r7, #32]
          break;
 8001d72:	e01f      	b.n	8001db4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	330c      	adds	r3, #12
 8001d7a:	623b      	str	r3, [r7, #32]
          break;
 8001d7c:	e01a      	b.n	8001db4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d102      	bne.n	8001d8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d86:	2304      	movs	r3, #4
 8001d88:	623b      	str	r3, [r7, #32]
          break;
 8001d8a:	e013      	b.n	8001db4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d105      	bne.n	8001da0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d94:	2308      	movs	r3, #8
 8001d96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69fa      	ldr	r2, [r7, #28]
 8001d9c:	611a      	str	r2, [r3, #16]
          break;
 8001d9e:	e009      	b.n	8001db4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001da0:	2308      	movs	r3, #8
 8001da2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69fa      	ldr	r2, [r7, #28]
 8001da8:	615a      	str	r2, [r3, #20]
          break;
 8001daa:	e003      	b.n	8001db4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001dac:	2300      	movs	r3, #0
 8001dae:	623b      	str	r3, [r7, #32]
          break;
 8001db0:	e000      	b.n	8001db4 <HAL_GPIO_Init+0x130>
          break;
 8001db2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	2bff      	cmp	r3, #255	; 0xff
 8001db8:	d801      	bhi.n	8001dbe <HAL_GPIO_Init+0x13a>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	e001      	b.n	8001dc2 <HAL_GPIO_Init+0x13e>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	2bff      	cmp	r3, #255	; 0xff
 8001dc8:	d802      	bhi.n	8001dd0 <HAL_GPIO_Init+0x14c>
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	e002      	b.n	8001dd6 <HAL_GPIO_Init+0x152>
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	3b08      	subs	r3, #8
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	210f      	movs	r1, #15
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	fa01 f303 	lsl.w	r3, r1, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	401a      	ands	r2, r3
 8001de8:	6a39      	ldr	r1, [r7, #32]
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	fa01 f303 	lsl.w	r3, r1, r3
 8001df0:	431a      	orrs	r2, r3
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 8090 	beq.w	8001f24 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e04:	4b56      	ldr	r3, [pc, #344]	; (8001f60 <HAL_GPIO_Init+0x2dc>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	4a55      	ldr	r2, [pc, #340]	; (8001f60 <HAL_GPIO_Init+0x2dc>)
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	6193      	str	r3, [r2, #24]
 8001e10:	4b53      	ldr	r3, [pc, #332]	; (8001f60 <HAL_GPIO_Init+0x2dc>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e1c:	4a51      	ldr	r2, [pc, #324]	; (8001f64 <HAL_GPIO_Init+0x2e0>)
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	089b      	lsrs	r3, r3, #2
 8001e22:	3302      	adds	r3, #2
 8001e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	f003 0303 	and.w	r3, r3, #3
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	220f      	movs	r2, #15
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a49      	ldr	r2, [pc, #292]	; (8001f68 <HAL_GPIO_Init+0x2e4>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d00d      	beq.n	8001e64 <HAL_GPIO_Init+0x1e0>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a48      	ldr	r2, [pc, #288]	; (8001f6c <HAL_GPIO_Init+0x2e8>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d007      	beq.n	8001e60 <HAL_GPIO_Init+0x1dc>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a47      	ldr	r2, [pc, #284]	; (8001f70 <HAL_GPIO_Init+0x2ec>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d101      	bne.n	8001e5c <HAL_GPIO_Init+0x1d8>
 8001e58:	2302      	movs	r3, #2
 8001e5a:	e004      	b.n	8001e66 <HAL_GPIO_Init+0x1e2>
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e002      	b.n	8001e66 <HAL_GPIO_Init+0x1e2>
 8001e60:	2301      	movs	r3, #1
 8001e62:	e000      	b.n	8001e66 <HAL_GPIO_Init+0x1e2>
 8001e64:	2300      	movs	r3, #0
 8001e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e68:	f002 0203 	and.w	r2, r2, #3
 8001e6c:	0092      	lsls	r2, r2, #2
 8001e6e:	4093      	lsls	r3, r2
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e76:	493b      	ldr	r1, [pc, #236]	; (8001f64 <HAL_GPIO_Init+0x2e0>)
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	089b      	lsrs	r3, r3, #2
 8001e7c:	3302      	adds	r3, #2
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d006      	beq.n	8001e9e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e90:	4b38      	ldr	r3, [pc, #224]	; (8001f74 <HAL_GPIO_Init+0x2f0>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	4937      	ldr	r1, [pc, #220]	; (8001f74 <HAL_GPIO_Init+0x2f0>)
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	600b      	str	r3, [r1, #0]
 8001e9c:	e006      	b.n	8001eac <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e9e:	4b35      	ldr	r3, [pc, #212]	; (8001f74 <HAL_GPIO_Init+0x2f0>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	4933      	ldr	r1, [pc, #204]	; (8001f74 <HAL_GPIO_Init+0x2f0>)
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d006      	beq.n	8001ec6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001eb8:	4b2e      	ldr	r3, [pc, #184]	; (8001f74 <HAL_GPIO_Init+0x2f0>)
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	492d      	ldr	r1, [pc, #180]	; (8001f74 <HAL_GPIO_Init+0x2f0>)
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	604b      	str	r3, [r1, #4]
 8001ec4:	e006      	b.n	8001ed4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ec6:	4b2b      	ldr	r3, [pc, #172]	; (8001f74 <HAL_GPIO_Init+0x2f0>)
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	4929      	ldr	r1, [pc, #164]	; (8001f74 <HAL_GPIO_Init+0x2f0>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d006      	beq.n	8001eee <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ee0:	4b24      	ldr	r3, [pc, #144]	; (8001f74 <HAL_GPIO_Init+0x2f0>)
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	4923      	ldr	r1, [pc, #140]	; (8001f74 <HAL_GPIO_Init+0x2f0>)
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	608b      	str	r3, [r1, #8]
 8001eec:	e006      	b.n	8001efc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001eee:	4b21      	ldr	r3, [pc, #132]	; (8001f74 <HAL_GPIO_Init+0x2f0>)
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	491f      	ldr	r1, [pc, #124]	; (8001f74 <HAL_GPIO_Init+0x2f0>)
 8001ef8:	4013      	ands	r3, r2
 8001efa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d006      	beq.n	8001f16 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f08:	4b1a      	ldr	r3, [pc, #104]	; (8001f74 <HAL_GPIO_Init+0x2f0>)
 8001f0a:	68da      	ldr	r2, [r3, #12]
 8001f0c:	4919      	ldr	r1, [pc, #100]	; (8001f74 <HAL_GPIO_Init+0x2f0>)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	60cb      	str	r3, [r1, #12]
 8001f14:	e006      	b.n	8001f24 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f16:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <HAL_GPIO_Init+0x2f0>)
 8001f18:	68da      	ldr	r2, [r3, #12]
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	4915      	ldr	r1, [pc, #84]	; (8001f74 <HAL_GPIO_Init+0x2f0>)
 8001f20:	4013      	ands	r3, r2
 8001f22:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	3301      	adds	r3, #1
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	fa22 f303 	lsr.w	r3, r2, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f47f aeaf 	bne.w	8001c98 <HAL_GPIO_Init+0x14>
  }
}
 8001f3a:	bf00      	nop
 8001f3c:	bf00      	nop
 8001f3e:	372c      	adds	r7, #44	; 0x2c
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	10320000 	.word	0x10320000
 8001f4c:	10310000 	.word	0x10310000
 8001f50:	10220000 	.word	0x10220000
 8001f54:	10210000 	.word	0x10210000
 8001f58:	10120000 	.word	0x10120000
 8001f5c:	10110000 	.word	0x10110000
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40010000 	.word	0x40010000
 8001f68:	40010800 	.word	0x40010800
 8001f6c:	40010c00 	.word	0x40010c00
 8001f70:	40011000 	.word	0x40011000
 8001f74:	40010400 	.word	0x40010400

08001f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	807b      	strh	r3, [r7, #2]
 8001f84:	4613      	mov	r3, r2
 8001f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f88:	787b      	ldrb	r3, [r7, #1]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f8e:	887a      	ldrh	r2, [r7, #2]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f94:	e003      	b.n	8001f9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f96:	887b      	ldrh	r3, [r7, #2]
 8001f98:	041a      	lsls	r2, r3, #16
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	611a      	str	r2, [r3, #16]
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fba:	887a      	ldrh	r2, [r7, #2]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	041a      	lsls	r2, r3, #16
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	43d9      	mvns	r1, r3
 8001fc6:	887b      	ldrh	r3, [r7, #2]
 8001fc8:	400b      	ands	r3, r1
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	611a      	str	r2, [r3, #16]
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr
	...

08001fdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e26c      	b.n	80024c8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 8087 	beq.w	800210a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ffc:	4b92      	ldr	r3, [pc, #584]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 030c 	and.w	r3, r3, #12
 8002004:	2b04      	cmp	r3, #4
 8002006:	d00c      	beq.n	8002022 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002008:	4b8f      	ldr	r3, [pc, #572]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 030c 	and.w	r3, r3, #12
 8002010:	2b08      	cmp	r3, #8
 8002012:	d112      	bne.n	800203a <HAL_RCC_OscConfig+0x5e>
 8002014:	4b8c      	ldr	r3, [pc, #560]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800201c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002020:	d10b      	bne.n	800203a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002022:	4b89      	ldr	r3, [pc, #548]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d06c      	beq.n	8002108 <HAL_RCC_OscConfig+0x12c>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d168      	bne.n	8002108 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e246      	b.n	80024c8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002042:	d106      	bne.n	8002052 <HAL_RCC_OscConfig+0x76>
 8002044:	4b80      	ldr	r3, [pc, #512]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a7f      	ldr	r2, [pc, #508]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 800204a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800204e:	6013      	str	r3, [r2, #0]
 8002050:	e02e      	b.n	80020b0 <HAL_RCC_OscConfig+0xd4>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10c      	bne.n	8002074 <HAL_RCC_OscConfig+0x98>
 800205a:	4b7b      	ldr	r3, [pc, #492]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a7a      	ldr	r2, [pc, #488]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 8002060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002064:	6013      	str	r3, [r2, #0]
 8002066:	4b78      	ldr	r3, [pc, #480]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a77      	ldr	r2, [pc, #476]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 800206c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	e01d      	b.n	80020b0 <HAL_RCC_OscConfig+0xd4>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800207c:	d10c      	bne.n	8002098 <HAL_RCC_OscConfig+0xbc>
 800207e:	4b72      	ldr	r3, [pc, #456]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a71      	ldr	r2, [pc, #452]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 8002084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	4b6f      	ldr	r3, [pc, #444]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a6e      	ldr	r2, [pc, #440]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 8002090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002094:	6013      	str	r3, [r2, #0]
 8002096:	e00b      	b.n	80020b0 <HAL_RCC_OscConfig+0xd4>
 8002098:	4b6b      	ldr	r3, [pc, #428]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a6a      	ldr	r2, [pc, #424]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 800209e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	4b68      	ldr	r3, [pc, #416]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a67      	ldr	r2, [pc, #412]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 80020aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d013      	beq.n	80020e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b8:	f7ff fccc 	bl	8001a54 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020c0:	f7ff fcc8 	bl	8001a54 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b64      	cmp	r3, #100	; 0x64
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e1fa      	b.n	80024c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d2:	4b5d      	ldr	r3, [pc, #372]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0xe4>
 80020de:	e014      	b.n	800210a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7ff fcb8 	bl	8001a54 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e8:	f7ff fcb4 	bl	8001a54 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b64      	cmp	r3, #100	; 0x64
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e1e6      	b.n	80024c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020fa:	4b53      	ldr	r3, [pc, #332]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f0      	bne.n	80020e8 <HAL_RCC_OscConfig+0x10c>
 8002106:	e000      	b.n	800210a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d063      	beq.n	80021de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002116:	4b4c      	ldr	r3, [pc, #304]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f003 030c 	and.w	r3, r3, #12
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00b      	beq.n	800213a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002122:	4b49      	ldr	r3, [pc, #292]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f003 030c 	and.w	r3, r3, #12
 800212a:	2b08      	cmp	r3, #8
 800212c:	d11c      	bne.n	8002168 <HAL_RCC_OscConfig+0x18c>
 800212e:	4b46      	ldr	r3, [pc, #280]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d116      	bne.n	8002168 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800213a:	4b43      	ldr	r3, [pc, #268]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d005      	beq.n	8002152 <HAL_RCC_OscConfig+0x176>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d001      	beq.n	8002152 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e1ba      	b.n	80024c8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002152:	4b3d      	ldr	r3, [pc, #244]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4939      	ldr	r1, [pc, #228]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 8002162:	4313      	orrs	r3, r2
 8002164:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002166:	e03a      	b.n	80021de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d020      	beq.n	80021b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002170:	4b36      	ldr	r3, [pc, #216]	; (800224c <HAL_RCC_OscConfig+0x270>)
 8002172:	2201      	movs	r2, #1
 8002174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002176:	f7ff fc6d 	bl	8001a54 <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800217e:	f7ff fc69 	bl	8001a54 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e19b      	b.n	80024c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002190:	4b2d      	ldr	r3, [pc, #180]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0f0      	beq.n	800217e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800219c:	4b2a      	ldr	r3, [pc, #168]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	4927      	ldr	r1, [pc, #156]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	600b      	str	r3, [r1, #0]
 80021b0:	e015      	b.n	80021de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021b2:	4b26      	ldr	r3, [pc, #152]	; (800224c <HAL_RCC_OscConfig+0x270>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b8:	f7ff fc4c 	bl	8001a54 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021c0:	f7ff fc48 	bl	8001a54 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e17a      	b.n	80024c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d2:	4b1d      	ldr	r3, [pc, #116]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f0      	bne.n	80021c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d03a      	beq.n	8002260 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d019      	beq.n	8002226 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021f2:	4b17      	ldr	r3, [pc, #92]	; (8002250 <HAL_RCC_OscConfig+0x274>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f8:	f7ff fc2c 	bl	8001a54 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002200:	f7ff fc28 	bl	8001a54 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e15a      	b.n	80024c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002212:	4b0d      	ldr	r3, [pc, #52]	; (8002248 <HAL_RCC_OscConfig+0x26c>)
 8002214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800221e:	2001      	movs	r0, #1
 8002220:	f000 faa6 	bl	8002770 <RCC_Delay>
 8002224:	e01c      	b.n	8002260 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002226:	4b0a      	ldr	r3, [pc, #40]	; (8002250 <HAL_RCC_OscConfig+0x274>)
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800222c:	f7ff fc12 	bl	8001a54 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002232:	e00f      	b.n	8002254 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002234:	f7ff fc0e 	bl	8001a54 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d908      	bls.n	8002254 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e140      	b.n	80024c8 <HAL_RCC_OscConfig+0x4ec>
 8002246:	bf00      	nop
 8002248:	40021000 	.word	0x40021000
 800224c:	42420000 	.word	0x42420000
 8002250:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002254:	4b9e      	ldr	r3, [pc, #632]	; (80024d0 <HAL_RCC_OscConfig+0x4f4>)
 8002256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1e9      	bne.n	8002234 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 80a6 	beq.w	80023ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800226e:	2300      	movs	r3, #0
 8002270:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002272:	4b97      	ldr	r3, [pc, #604]	; (80024d0 <HAL_RCC_OscConfig+0x4f4>)
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10d      	bne.n	800229a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800227e:	4b94      	ldr	r3, [pc, #592]	; (80024d0 <HAL_RCC_OscConfig+0x4f4>)
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	4a93      	ldr	r2, [pc, #588]	; (80024d0 <HAL_RCC_OscConfig+0x4f4>)
 8002284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002288:	61d3      	str	r3, [r2, #28]
 800228a:	4b91      	ldr	r3, [pc, #580]	; (80024d0 <HAL_RCC_OscConfig+0x4f4>)
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002292:	60bb      	str	r3, [r7, #8]
 8002294:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002296:	2301      	movs	r3, #1
 8002298:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229a:	4b8e      	ldr	r3, [pc, #568]	; (80024d4 <HAL_RCC_OscConfig+0x4f8>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d118      	bne.n	80022d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022a6:	4b8b      	ldr	r3, [pc, #556]	; (80024d4 <HAL_RCC_OscConfig+0x4f8>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a8a      	ldr	r2, [pc, #552]	; (80024d4 <HAL_RCC_OscConfig+0x4f8>)
 80022ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022b2:	f7ff fbcf 	bl	8001a54 <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ba:	f7ff fbcb 	bl	8001a54 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b64      	cmp	r3, #100	; 0x64
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e0fd      	b.n	80024c8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022cc:	4b81      	ldr	r3, [pc, #516]	; (80024d4 <HAL_RCC_OscConfig+0x4f8>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d0f0      	beq.n	80022ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d106      	bne.n	80022ee <HAL_RCC_OscConfig+0x312>
 80022e0:	4b7b      	ldr	r3, [pc, #492]	; (80024d0 <HAL_RCC_OscConfig+0x4f4>)
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	4a7a      	ldr	r2, [pc, #488]	; (80024d0 <HAL_RCC_OscConfig+0x4f4>)
 80022e6:	f043 0301 	orr.w	r3, r3, #1
 80022ea:	6213      	str	r3, [r2, #32]
 80022ec:	e02d      	b.n	800234a <HAL_RCC_OscConfig+0x36e>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10c      	bne.n	8002310 <HAL_RCC_OscConfig+0x334>
 80022f6:	4b76      	ldr	r3, [pc, #472]	; (80024d0 <HAL_RCC_OscConfig+0x4f4>)
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	4a75      	ldr	r2, [pc, #468]	; (80024d0 <HAL_RCC_OscConfig+0x4f4>)
 80022fc:	f023 0301 	bic.w	r3, r3, #1
 8002300:	6213      	str	r3, [r2, #32]
 8002302:	4b73      	ldr	r3, [pc, #460]	; (80024d0 <HAL_RCC_OscConfig+0x4f4>)
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	4a72      	ldr	r2, [pc, #456]	; (80024d0 <HAL_RCC_OscConfig+0x4f4>)
 8002308:	f023 0304 	bic.w	r3, r3, #4
 800230c:	6213      	str	r3, [r2, #32]
 800230e:	e01c      	b.n	800234a <HAL_RCC_OscConfig+0x36e>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	2b05      	cmp	r3, #5
 8002316:	d10c      	bne.n	8002332 <HAL_RCC_OscConfig+0x356>
 8002318:	4b6d      	ldr	r3, [pc, #436]	; (80024d0 <HAL_RCC_OscConfig+0x4f4>)
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	4a6c      	ldr	r2, [pc, #432]	; (80024d0 <HAL_RCC_OscConfig+0x4f4>)
 800231e:	f043 0304 	orr.w	r3, r3, #4
 8002322:	6213      	str	r3, [r2, #32]
 8002324:	4b6a      	ldr	r3, [pc, #424]	; (80024d0 <HAL_RCC_OscConfig+0x4f4>)
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	4a69      	ldr	r2, [pc, #420]	; (80024d0 <HAL_RCC_OscConfig+0x4f4>)
 800232a:	f043 0301 	orr.w	r3, r3, #1
 800232e:	6213      	str	r3, [r2, #32]
 8002330:	e00b      	b.n	800234a <HAL_RCC_OscConfig+0x36e>
 8002332:	4b67      	ldr	r3, [pc, #412]	; (80024d0 <HAL_RCC_OscConfig+0x4f4>)
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	4a66      	ldr	r2, [pc, #408]	; (80024d0 <HAL_RCC_OscConfig+0x4f4>)
 8002338:	f023 0301 	bic.w	r3, r3, #1
 800233c:	6213      	str	r3, [r2, #32]
 800233e:	4b64      	ldr	r3, [pc, #400]	; (80024d0 <HAL_RCC_OscConfig+0x4f4>)
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	4a63      	ldr	r2, [pc, #396]	; (80024d0 <HAL_RCC_OscConfig+0x4f4>)
 8002344:	f023 0304 	bic.w	r3, r3, #4
 8002348:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d015      	beq.n	800237e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002352:	f7ff fb7f 	bl	8001a54 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002358:	e00a      	b.n	8002370 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235a:	f7ff fb7b 	bl	8001a54 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	f241 3288 	movw	r2, #5000	; 0x1388
 8002368:	4293      	cmp	r3, r2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e0ab      	b.n	80024c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002370:	4b57      	ldr	r3, [pc, #348]	; (80024d0 <HAL_RCC_OscConfig+0x4f4>)
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0ee      	beq.n	800235a <HAL_RCC_OscConfig+0x37e>
 800237c:	e014      	b.n	80023a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237e:	f7ff fb69 	bl	8001a54 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002384:	e00a      	b.n	800239c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002386:	f7ff fb65 	bl	8001a54 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	f241 3288 	movw	r2, #5000	; 0x1388
 8002394:	4293      	cmp	r3, r2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e095      	b.n	80024c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800239c:	4b4c      	ldr	r3, [pc, #304]	; (80024d0 <HAL_RCC_OscConfig+0x4f4>)
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1ee      	bne.n	8002386 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023a8:	7dfb      	ldrb	r3, [r7, #23]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d105      	bne.n	80023ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ae:	4b48      	ldr	r3, [pc, #288]	; (80024d0 <HAL_RCC_OscConfig+0x4f4>)
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	4a47      	ldr	r2, [pc, #284]	; (80024d0 <HAL_RCC_OscConfig+0x4f4>)
 80023b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f000 8081 	beq.w	80024c6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023c4:	4b42      	ldr	r3, [pc, #264]	; (80024d0 <HAL_RCC_OscConfig+0x4f4>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f003 030c 	and.w	r3, r3, #12
 80023cc:	2b08      	cmp	r3, #8
 80023ce:	d061      	beq.n	8002494 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	69db      	ldr	r3, [r3, #28]
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d146      	bne.n	8002466 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d8:	4b3f      	ldr	r3, [pc, #252]	; (80024d8 <HAL_RCC_OscConfig+0x4fc>)
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023de:	f7ff fb39 	bl	8001a54 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e6:	f7ff fb35 	bl	8001a54 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e067      	b.n	80024c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f8:	4b35      	ldr	r3, [pc, #212]	; (80024d0 <HAL_RCC_OscConfig+0x4f4>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1f0      	bne.n	80023e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800240c:	d108      	bne.n	8002420 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800240e:	4b30      	ldr	r3, [pc, #192]	; (80024d0 <HAL_RCC_OscConfig+0x4f4>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	492d      	ldr	r1, [pc, #180]	; (80024d0 <HAL_RCC_OscConfig+0x4f4>)
 800241c:	4313      	orrs	r3, r2
 800241e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002420:	4b2b      	ldr	r3, [pc, #172]	; (80024d0 <HAL_RCC_OscConfig+0x4f4>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a19      	ldr	r1, [r3, #32]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	430b      	orrs	r3, r1
 8002432:	4927      	ldr	r1, [pc, #156]	; (80024d0 <HAL_RCC_OscConfig+0x4f4>)
 8002434:	4313      	orrs	r3, r2
 8002436:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002438:	4b27      	ldr	r3, [pc, #156]	; (80024d8 <HAL_RCC_OscConfig+0x4fc>)
 800243a:	2201      	movs	r2, #1
 800243c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243e:	f7ff fb09 	bl	8001a54 <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002446:	f7ff fb05 	bl	8001a54 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e037      	b.n	80024c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002458:	4b1d      	ldr	r3, [pc, #116]	; (80024d0 <HAL_RCC_OscConfig+0x4f4>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0f0      	beq.n	8002446 <HAL_RCC_OscConfig+0x46a>
 8002464:	e02f      	b.n	80024c6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002466:	4b1c      	ldr	r3, [pc, #112]	; (80024d8 <HAL_RCC_OscConfig+0x4fc>)
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246c:	f7ff faf2 	bl	8001a54 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002474:	f7ff faee 	bl	8001a54 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e020      	b.n	80024c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002486:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <HAL_RCC_OscConfig+0x4f4>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1f0      	bne.n	8002474 <HAL_RCC_OscConfig+0x498>
 8002492:	e018      	b.n	80024c6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d101      	bne.n	80024a0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e013      	b.n	80024c8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024a0:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <HAL_RCC_OscConfig+0x4f4>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d106      	bne.n	80024c2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024be:	429a      	cmp	r2, r3
 80024c0:	d001      	beq.n	80024c6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e000      	b.n	80024c8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3718      	adds	r7, #24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40021000 	.word	0x40021000
 80024d4:	40007000 	.word	0x40007000
 80024d8:	42420060 	.word	0x42420060

080024dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e0d0      	b.n	8002692 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024f0:	4b6a      	ldr	r3, [pc, #424]	; (800269c <HAL_RCC_ClockConfig+0x1c0>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d910      	bls.n	8002520 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fe:	4b67      	ldr	r3, [pc, #412]	; (800269c <HAL_RCC_ClockConfig+0x1c0>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f023 0207 	bic.w	r2, r3, #7
 8002506:	4965      	ldr	r1, [pc, #404]	; (800269c <HAL_RCC_ClockConfig+0x1c0>)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	4313      	orrs	r3, r2
 800250c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800250e:	4b63      	ldr	r3, [pc, #396]	; (800269c <HAL_RCC_ClockConfig+0x1c0>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	429a      	cmp	r2, r3
 800251a:	d001      	beq.n	8002520 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e0b8      	b.n	8002692 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d020      	beq.n	800256e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	d005      	beq.n	8002544 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002538:	4b59      	ldr	r3, [pc, #356]	; (80026a0 <HAL_RCC_ClockConfig+0x1c4>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	4a58      	ldr	r2, [pc, #352]	; (80026a0 <HAL_RCC_ClockConfig+0x1c4>)
 800253e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002542:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0308 	and.w	r3, r3, #8
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002550:	4b53      	ldr	r3, [pc, #332]	; (80026a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	4a52      	ldr	r2, [pc, #328]	; (80026a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002556:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800255a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800255c:	4b50      	ldr	r3, [pc, #320]	; (80026a0 <HAL_RCC_ClockConfig+0x1c4>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	494d      	ldr	r1, [pc, #308]	; (80026a0 <HAL_RCC_ClockConfig+0x1c4>)
 800256a:	4313      	orrs	r3, r2
 800256c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d040      	beq.n	80025fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d107      	bne.n	8002592 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002582:	4b47      	ldr	r3, [pc, #284]	; (80026a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d115      	bne.n	80025ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e07f      	b.n	8002692 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b02      	cmp	r3, #2
 8002598:	d107      	bne.n	80025aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800259a:	4b41      	ldr	r3, [pc, #260]	; (80026a0 <HAL_RCC_ClockConfig+0x1c4>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d109      	bne.n	80025ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e073      	b.n	8002692 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025aa:	4b3d      	ldr	r3, [pc, #244]	; (80026a0 <HAL_RCC_ClockConfig+0x1c4>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e06b      	b.n	8002692 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ba:	4b39      	ldr	r3, [pc, #228]	; (80026a0 <HAL_RCC_ClockConfig+0x1c4>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f023 0203 	bic.w	r2, r3, #3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	4936      	ldr	r1, [pc, #216]	; (80026a0 <HAL_RCC_ClockConfig+0x1c4>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025cc:	f7ff fa42 	bl	8001a54 <HAL_GetTick>
 80025d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d2:	e00a      	b.n	80025ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025d4:	f7ff fa3e 	bl	8001a54 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e053      	b.n	8002692 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ea:	4b2d      	ldr	r3, [pc, #180]	; (80026a0 <HAL_RCC_ClockConfig+0x1c4>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f003 020c 	and.w	r2, r3, #12
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d1eb      	bne.n	80025d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025fc:	4b27      	ldr	r3, [pc, #156]	; (800269c <HAL_RCC_ClockConfig+0x1c0>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	429a      	cmp	r2, r3
 8002608:	d210      	bcs.n	800262c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260a:	4b24      	ldr	r3, [pc, #144]	; (800269c <HAL_RCC_ClockConfig+0x1c0>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f023 0207 	bic.w	r2, r3, #7
 8002612:	4922      	ldr	r1, [pc, #136]	; (800269c <HAL_RCC_ClockConfig+0x1c0>)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	4313      	orrs	r3, r2
 8002618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800261a:	4b20      	ldr	r3, [pc, #128]	; (800269c <HAL_RCC_ClockConfig+0x1c0>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d001      	beq.n	800262c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e032      	b.n	8002692 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	2b00      	cmp	r3, #0
 8002636:	d008      	beq.n	800264a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002638:	4b19      	ldr	r3, [pc, #100]	; (80026a0 <HAL_RCC_ClockConfig+0x1c4>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	4916      	ldr	r1, [pc, #88]	; (80026a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002646:	4313      	orrs	r3, r2
 8002648:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	d009      	beq.n	800266a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002656:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	490e      	ldr	r1, [pc, #56]	; (80026a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002666:	4313      	orrs	r3, r2
 8002668:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800266a:	f000 f821 	bl	80026b0 <HAL_RCC_GetSysClockFreq>
 800266e:	4602      	mov	r2, r0
 8002670:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	091b      	lsrs	r3, r3, #4
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	490a      	ldr	r1, [pc, #40]	; (80026a4 <HAL_RCC_ClockConfig+0x1c8>)
 800267c:	5ccb      	ldrb	r3, [r1, r3]
 800267e:	fa22 f303 	lsr.w	r3, r2, r3
 8002682:	4a09      	ldr	r2, [pc, #36]	; (80026a8 <HAL_RCC_ClockConfig+0x1cc>)
 8002684:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002686:	4b09      	ldr	r3, [pc, #36]	; (80026ac <HAL_RCC_ClockConfig+0x1d0>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff f9a0 	bl	80019d0 <HAL_InitTick>

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40022000 	.word	0x40022000
 80026a0:	40021000 	.word	0x40021000
 80026a4:	08002ff4 	.word	0x08002ff4
 80026a8:	20000028 	.word	0x20000028
 80026ac:	2000002c 	.word	0x2000002c

080026b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026b0:	b490      	push	{r4, r7}
 80026b2:	b08a      	sub	sp, #40	; 0x28
 80026b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026b6:	4b2a      	ldr	r3, [pc, #168]	; (8002760 <HAL_RCC_GetSysClockFreq+0xb0>)
 80026b8:	1d3c      	adds	r4, r7, #4
 80026ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026c0:	f240 2301 	movw	r3, #513	; 0x201
 80026c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026c6:	2300      	movs	r3, #0
 80026c8:	61fb      	str	r3, [r7, #28]
 80026ca:	2300      	movs	r3, #0
 80026cc:	61bb      	str	r3, [r7, #24]
 80026ce:	2300      	movs	r3, #0
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026da:	4b22      	ldr	r3, [pc, #136]	; (8002764 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f003 030c 	and.w	r3, r3, #12
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	d002      	beq.n	80026f0 <HAL_RCC_GetSysClockFreq+0x40>
 80026ea:	2b08      	cmp	r3, #8
 80026ec:	d003      	beq.n	80026f6 <HAL_RCC_GetSysClockFreq+0x46>
 80026ee:	e02d      	b.n	800274c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026f0:	4b1d      	ldr	r3, [pc, #116]	; (8002768 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026f2:	623b      	str	r3, [r7, #32]
      break;
 80026f4:	e02d      	b.n	8002752 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	0c9b      	lsrs	r3, r3, #18
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002702:	4413      	add	r3, r2
 8002704:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002708:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d013      	beq.n	800273c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002714:	4b13      	ldr	r3, [pc, #76]	; (8002764 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	0c5b      	lsrs	r3, r3, #17
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002722:	4413      	add	r3, r2
 8002724:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002728:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	4a0e      	ldr	r2, [pc, #56]	; (8002768 <HAL_RCC_GetSysClockFreq+0xb8>)
 800272e:	fb02 f203 	mul.w	r2, r2, r3
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	fbb2 f3f3 	udiv	r3, r2, r3
 8002738:	627b      	str	r3, [r7, #36]	; 0x24
 800273a:	e004      	b.n	8002746 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	4a0b      	ldr	r2, [pc, #44]	; (800276c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002740:	fb02 f303 	mul.w	r3, r2, r3
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	623b      	str	r3, [r7, #32]
      break;
 800274a:	e002      	b.n	8002752 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800274c:	4b06      	ldr	r3, [pc, #24]	; (8002768 <HAL_RCC_GetSysClockFreq+0xb8>)
 800274e:	623b      	str	r3, [r7, #32]
      break;
 8002750:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002752:	6a3b      	ldr	r3, [r7, #32]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3728      	adds	r7, #40	; 0x28
 8002758:	46bd      	mov	sp, r7
 800275a:	bc90      	pop	{r4, r7}
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	08002fe4 	.word	0x08002fe4
 8002764:	40021000 	.word	0x40021000
 8002768:	007a1200 	.word	0x007a1200
 800276c:	003d0900 	.word	0x003d0900

08002770 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002778:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <RCC_Delay+0x34>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a0a      	ldr	r2, [pc, #40]	; (80027a8 <RCC_Delay+0x38>)
 800277e:	fba2 2303 	umull	r2, r3, r2, r3
 8002782:	0a5b      	lsrs	r3, r3, #9
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	fb02 f303 	mul.w	r3, r2, r3
 800278a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800278c:	bf00      	nop
  }
  while (Delay --);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	1e5a      	subs	r2, r3, #1
 8002792:	60fa      	str	r2, [r7, #12]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1f9      	bne.n	800278c <RCC_Delay+0x1c>
}
 8002798:	bf00      	nop
 800279a:	bf00      	nop
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr
 80027a4:	20000028 	.word	0x20000028
 80027a8:	10624dd3 	.word	0x10624dd3

080027ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e041      	b.n	8002842 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d106      	bne.n	80027d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7ff f864 	bl	80018a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2202      	movs	r2, #2
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3304      	adds	r3, #4
 80027e8:	4619      	mov	r1, r3
 80027ea:	4610      	mov	r0, r2
 80027ec:	f000 fa6a 	bl	8002cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b01      	cmp	r3, #1
 800285e:	d001      	beq.n	8002864 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e035      	b.n	80028d0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2202      	movs	r2, #2
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68da      	ldr	r2, [r3, #12]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 0201 	orr.w	r2, r2, #1
 800287a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a16      	ldr	r2, [pc, #88]	; (80028dc <HAL_TIM_Base_Start_IT+0x90>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d009      	beq.n	800289a <HAL_TIM_Base_Start_IT+0x4e>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800288e:	d004      	beq.n	800289a <HAL_TIM_Base_Start_IT+0x4e>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a12      	ldr	r2, [pc, #72]	; (80028e0 <HAL_TIM_Base_Start_IT+0x94>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d111      	bne.n	80028be <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2b06      	cmp	r3, #6
 80028aa:	d010      	beq.n	80028ce <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0201 	orr.w	r2, r2, #1
 80028ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028bc:	e007      	b.n	80028ce <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f042 0201 	orr.w	r2, r2, #1
 80028cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bc80      	pop	{r7}
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	40012c00 	.word	0x40012c00
 80028e0:	40000400 	.word	0x40000400

080028e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d122      	bne.n	8002940 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b02      	cmp	r3, #2
 8002906:	d11b      	bne.n	8002940 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f06f 0202 	mvn.w	r2, #2
 8002910:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f9b1 	bl	8002c8e <HAL_TIM_IC_CaptureCallback>
 800292c:	e005      	b.n	800293a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f9a4 	bl	8002c7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 f9b3 	bl	8002ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	f003 0304 	and.w	r3, r3, #4
 800294a:	2b04      	cmp	r3, #4
 800294c:	d122      	bne.n	8002994 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	2b04      	cmp	r3, #4
 800295a:	d11b      	bne.n	8002994 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f06f 0204 	mvn.w	r2, #4
 8002964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2202      	movs	r2, #2
 800296a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f987 	bl	8002c8e <HAL_TIM_IC_CaptureCallback>
 8002980:	e005      	b.n	800298e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f97a 	bl	8002c7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 f989 	bl	8002ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d122      	bne.n	80029e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f003 0308 	and.w	r3, r3, #8
 80029ac:	2b08      	cmp	r3, #8
 80029ae:	d11b      	bne.n	80029e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f06f 0208 	mvn.w	r2, #8
 80029b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2204      	movs	r2, #4
 80029be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f95d 	bl	8002c8e <HAL_TIM_IC_CaptureCallback>
 80029d4:	e005      	b.n	80029e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f950 	bl	8002c7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 f95f 	bl	8002ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	f003 0310 	and.w	r3, r3, #16
 80029f2:	2b10      	cmp	r3, #16
 80029f4:	d122      	bne.n	8002a3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	f003 0310 	and.w	r3, r3, #16
 8002a00:	2b10      	cmp	r3, #16
 8002a02:	d11b      	bne.n	8002a3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f06f 0210 	mvn.w	r2, #16
 8002a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2208      	movs	r2, #8
 8002a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f933 	bl	8002c8e <HAL_TIM_IC_CaptureCallback>
 8002a28:	e005      	b.n	8002a36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f926 	bl	8002c7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 f935 	bl	8002ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d10e      	bne.n	8002a68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d107      	bne.n	8002a68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f06f 0201 	mvn.w	r2, #1
 8002a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7fe fe1c 	bl	80016a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a72:	2b80      	cmp	r3, #128	; 0x80
 8002a74:	d10e      	bne.n	8002a94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a80:	2b80      	cmp	r3, #128	; 0x80
 8002a82:	d107      	bne.n	8002a94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 fa67 	bl	8002f62 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a9e:	2b40      	cmp	r3, #64	; 0x40
 8002aa0:	d10e      	bne.n	8002ac0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aac:	2b40      	cmp	r3, #64	; 0x40
 8002aae:	d107      	bne.n	8002ac0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f8f9 	bl	8002cb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	f003 0320 	and.w	r3, r3, #32
 8002aca:	2b20      	cmp	r3, #32
 8002acc:	d10e      	bne.n	8002aec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f003 0320 	and.w	r3, r3, #32
 8002ad8:	2b20      	cmp	r3, #32
 8002ada:	d107      	bne.n	8002aec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f06f 0220 	mvn.w	r2, #32
 8002ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 fa32 	bl	8002f50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002aec:	bf00      	nop
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d101      	bne.n	8002b0c <HAL_TIM_ConfigClockSource+0x18>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	e0b3      	b.n	8002c74 <HAL_TIM_ConfigClockSource+0x180>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2202      	movs	r2, #2
 8002b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b32:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b44:	d03e      	beq.n	8002bc4 <HAL_TIM_ConfigClockSource+0xd0>
 8002b46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b4a:	f200 8087 	bhi.w	8002c5c <HAL_TIM_ConfigClockSource+0x168>
 8002b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b52:	f000 8085 	beq.w	8002c60 <HAL_TIM_ConfigClockSource+0x16c>
 8002b56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b5a:	d87f      	bhi.n	8002c5c <HAL_TIM_ConfigClockSource+0x168>
 8002b5c:	2b70      	cmp	r3, #112	; 0x70
 8002b5e:	d01a      	beq.n	8002b96 <HAL_TIM_ConfigClockSource+0xa2>
 8002b60:	2b70      	cmp	r3, #112	; 0x70
 8002b62:	d87b      	bhi.n	8002c5c <HAL_TIM_ConfigClockSource+0x168>
 8002b64:	2b60      	cmp	r3, #96	; 0x60
 8002b66:	d050      	beq.n	8002c0a <HAL_TIM_ConfigClockSource+0x116>
 8002b68:	2b60      	cmp	r3, #96	; 0x60
 8002b6a:	d877      	bhi.n	8002c5c <HAL_TIM_ConfigClockSource+0x168>
 8002b6c:	2b50      	cmp	r3, #80	; 0x50
 8002b6e:	d03c      	beq.n	8002bea <HAL_TIM_ConfigClockSource+0xf6>
 8002b70:	2b50      	cmp	r3, #80	; 0x50
 8002b72:	d873      	bhi.n	8002c5c <HAL_TIM_ConfigClockSource+0x168>
 8002b74:	2b40      	cmp	r3, #64	; 0x40
 8002b76:	d058      	beq.n	8002c2a <HAL_TIM_ConfigClockSource+0x136>
 8002b78:	2b40      	cmp	r3, #64	; 0x40
 8002b7a:	d86f      	bhi.n	8002c5c <HAL_TIM_ConfigClockSource+0x168>
 8002b7c:	2b30      	cmp	r3, #48	; 0x30
 8002b7e:	d064      	beq.n	8002c4a <HAL_TIM_ConfigClockSource+0x156>
 8002b80:	2b30      	cmp	r3, #48	; 0x30
 8002b82:	d86b      	bhi.n	8002c5c <HAL_TIM_ConfigClockSource+0x168>
 8002b84:	2b20      	cmp	r3, #32
 8002b86:	d060      	beq.n	8002c4a <HAL_TIM_ConfigClockSource+0x156>
 8002b88:	2b20      	cmp	r3, #32
 8002b8a:	d867      	bhi.n	8002c5c <HAL_TIM_ConfigClockSource+0x168>
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d05c      	beq.n	8002c4a <HAL_TIM_ConfigClockSource+0x156>
 8002b90:	2b10      	cmp	r3, #16
 8002b92:	d05a      	beq.n	8002c4a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002b94:	e062      	b.n	8002c5c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6818      	ldr	r0, [r3, #0]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	6899      	ldr	r1, [r3, #8]
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	f000 f95c 	bl	8002e62 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002bb8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	609a      	str	r2, [r3, #8]
      break;
 8002bc2:	e04e      	b.n	8002c62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6818      	ldr	r0, [r3, #0]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	6899      	ldr	r1, [r3, #8]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f000 f945 	bl	8002e62 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689a      	ldr	r2, [r3, #8]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002be6:	609a      	str	r2, [r3, #8]
      break;
 8002be8:	e03b      	b.n	8002c62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6818      	ldr	r0, [r3, #0]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	6859      	ldr	r1, [r3, #4]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	f000 f8bc 	bl	8002d74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2150      	movs	r1, #80	; 0x50
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 f913 	bl	8002e2e <TIM_ITRx_SetConfig>
      break;
 8002c08:	e02b      	b.n	8002c62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6818      	ldr	r0, [r3, #0]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	6859      	ldr	r1, [r3, #4]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	461a      	mov	r2, r3
 8002c18:	f000 f8da 	bl	8002dd0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2160      	movs	r1, #96	; 0x60
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 f903 	bl	8002e2e <TIM_ITRx_SetConfig>
      break;
 8002c28:	e01b      	b.n	8002c62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6818      	ldr	r0, [r3, #0]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	6859      	ldr	r1, [r3, #4]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	461a      	mov	r2, r3
 8002c38:	f000 f89c 	bl	8002d74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2140      	movs	r1, #64	; 0x40
 8002c42:	4618      	mov	r0, r3
 8002c44:	f000 f8f3 	bl	8002e2e <TIM_ITRx_SetConfig>
      break;
 8002c48:	e00b      	b.n	8002c62 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4619      	mov	r1, r3
 8002c54:	4610      	mov	r0, r2
 8002c56:	f000 f8ea 	bl	8002e2e <TIM_ITRx_SetConfig>
        break;
 8002c5a:	e002      	b.n	8002c62 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c5c:	bf00      	nop
 8002c5e:	e000      	b.n	8002c62 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c60:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bc80      	pop	{r7}
 8002c8c:	4770      	bx	lr

08002c8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c96:	bf00      	nop
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bc80      	pop	{r7}
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr

08002cb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr

08002cc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a25      	ldr	r2, [pc, #148]	; (8002d6c <TIM_Base_SetConfig+0xa8>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d007      	beq.n	8002cec <TIM_Base_SetConfig+0x28>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce2:	d003      	beq.n	8002cec <TIM_Base_SetConfig+0x28>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a22      	ldr	r2, [pc, #136]	; (8002d70 <TIM_Base_SetConfig+0xac>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d108      	bne.n	8002cfe <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a1a      	ldr	r2, [pc, #104]	; (8002d6c <TIM_Base_SetConfig+0xa8>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d007      	beq.n	8002d16 <TIM_Base_SetConfig+0x52>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d0c:	d003      	beq.n	8002d16 <TIM_Base_SetConfig+0x52>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a17      	ldr	r2, [pc, #92]	; (8002d70 <TIM_Base_SetConfig+0xac>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d108      	bne.n	8002d28 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a07      	ldr	r2, [pc, #28]	; (8002d6c <TIM_Base_SetConfig+0xa8>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d103      	bne.n	8002d5c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	691a      	ldr	r2, [r3, #16]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	615a      	str	r2, [r3, #20]
}
 8002d62:	bf00      	nop
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr
 8002d6c:	40012c00 	.word	0x40012c00
 8002d70:	40000400 	.word	0x40000400

08002d74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b087      	sub	sp, #28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	f023 0201 	bic.w	r2, r3, #1
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	011b      	lsls	r3, r3, #4
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f023 030a 	bic.w	r3, r3, #10
 8002db0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	621a      	str	r2, [r3, #32]
}
 8002dc6:	bf00      	nop
 8002dc8:	371c      	adds	r7, #28
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr

08002dd0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b087      	sub	sp, #28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	f023 0210 	bic.w	r2, r3, #16
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002dfa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	031b      	lsls	r3, r3, #12
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e0c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	011b      	lsls	r3, r3, #4
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	621a      	str	r2, [r3, #32]
}
 8002e24:	bf00      	nop
 8002e26:	371c      	adds	r7, #28
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr

08002e2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b085      	sub	sp, #20
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
 8002e36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	f043 0307 	orr.w	r3, r3, #7
 8002e50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	609a      	str	r2, [r3, #8]
}
 8002e58:	bf00      	nop
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bc80      	pop	{r7}
 8002e60:	4770      	bx	lr

08002e62 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b087      	sub	sp, #28
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	60f8      	str	r0, [r7, #12]
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	607a      	str	r2, [r7, #4]
 8002e6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e7c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	021a      	lsls	r2, r3, #8
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	431a      	orrs	r2, r3
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	609a      	str	r2, [r3, #8]
}
 8002e96:	bf00      	nop
 8002e98:	371c      	adds	r7, #28
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d101      	bne.n	8002eb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	e041      	b.n	8002f3c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ede:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a14      	ldr	r2, [pc, #80]	; (8002f48 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d009      	beq.n	8002f10 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f04:	d004      	beq.n	8002f10 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a10      	ldr	r2, [pc, #64]	; (8002f4c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d10c      	bne.n	8002f2a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68ba      	ldr	r2, [r7, #8]
 8002f28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3714      	adds	r7, #20
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bc80      	pop	{r7}
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40012c00 	.word	0x40012c00
 8002f4c:	40000400 	.word	0x40000400

08002f50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bc80      	pop	{r7}
 8002f60:	4770      	bx	lr

08002f62 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f62:	b480      	push	{r7}
 8002f64:	b083      	sub	sp, #12
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr

08002f74 <__libc_init_array>:
 8002f74:	b570      	push	{r4, r5, r6, lr}
 8002f76:	2600      	movs	r6, #0
 8002f78:	4d0c      	ldr	r5, [pc, #48]	; (8002fac <__libc_init_array+0x38>)
 8002f7a:	4c0d      	ldr	r4, [pc, #52]	; (8002fb0 <__libc_init_array+0x3c>)
 8002f7c:	1b64      	subs	r4, r4, r5
 8002f7e:	10a4      	asrs	r4, r4, #2
 8002f80:	42a6      	cmp	r6, r4
 8002f82:	d109      	bne.n	8002f98 <__libc_init_array+0x24>
 8002f84:	f000 f822 	bl	8002fcc <_init>
 8002f88:	2600      	movs	r6, #0
 8002f8a:	4d0a      	ldr	r5, [pc, #40]	; (8002fb4 <__libc_init_array+0x40>)
 8002f8c:	4c0a      	ldr	r4, [pc, #40]	; (8002fb8 <__libc_init_array+0x44>)
 8002f8e:	1b64      	subs	r4, r4, r5
 8002f90:	10a4      	asrs	r4, r4, #2
 8002f92:	42a6      	cmp	r6, r4
 8002f94:	d105      	bne.n	8002fa2 <__libc_init_array+0x2e>
 8002f96:	bd70      	pop	{r4, r5, r6, pc}
 8002f98:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f9c:	4798      	blx	r3
 8002f9e:	3601      	adds	r6, #1
 8002fa0:	e7ee      	b.n	8002f80 <__libc_init_array+0xc>
 8002fa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fa6:	4798      	blx	r3
 8002fa8:	3601      	adds	r6, #1
 8002faa:	e7f2      	b.n	8002f92 <__libc_init_array+0x1e>
 8002fac:	08003004 	.word	0x08003004
 8002fb0:	08003004 	.word	0x08003004
 8002fb4:	08003004 	.word	0x08003004
 8002fb8:	08003008 	.word	0x08003008

08002fbc <memset>:
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	4402      	add	r2, r0
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d100      	bne.n	8002fc6 <memset+0xa>
 8002fc4:	4770      	bx	lr
 8002fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8002fca:	e7f9      	b.n	8002fc0 <memset+0x4>

08002fcc <_init>:
 8002fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fce:	bf00      	nop
 8002fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fd2:	bc08      	pop	{r3}
 8002fd4:	469e      	mov	lr, r3
 8002fd6:	4770      	bx	lr

08002fd8 <_fini>:
 8002fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fda:	bf00      	nop
 8002fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fde:	bc08      	pop	{r3}
 8002fe0:	469e      	mov	lr, r3
 8002fe2:	4770      	bx	lr
